[
  {
    "title": "C++",
    "topics": [
      {
        "topic": "Function",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which of the following function prototype is perfectly acceptable?",
            "options": [
              {
                "optionTxt": "int Function(int Tmp = Show());"
              },
              {
                "optionTxt": "float Function(int Tmp = Show(int, float));"
              },
              {
                "optionTxt": "Both A and B."
              },
              {
                "optionTxt": "float = Show(int, float) Function(Tmp);"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "C++ enables to define functions that take constants as an argument."
              },
              {
                "optionTxt": "We cannot change the argument of the function that that are declared as constant."
              },
              {
                "optionTxt": "Both A and B."
              },
              {
                "optionTxt": "We cannot use the constant while defining the function."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Overloaded functions can have at most one default argument."
              },
              {
                "optionTxt": "An overloaded function cannot have default argument."
              },
              {
                "optionTxt": "All arguments of an overloaded function can be default."
              },
              {
                "optionTxt": "A function if overloaded more than once cannot have default argument."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Two functions having same number of argument, order and type of argument can be overloaded if both functions do not have any default argument."
              },
              {
                "optionTxt": "Overloaded function must have default arguments."
              },
              {
                "optionTxt": "Overloaded function must have default arguments starting from the left of argument list."
              },
              {
                "optionTxt": "A function can be overloaded more than once."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which of the following statement will be correct if the function has three arguments passed to it?",
            "options": [
              {
                "optionTxt": "The trailing argument will be the default argument."
              },
              {
                "optionTxt": "The first argument will be the default argument."
              },
              {
                "optionTxt": "The middle argument will be the default argument."
              },
              {
                "optionTxt": "All the argument will be the default argument."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which of the following statement is incorrect?",
            "options": [
              {
                "optionTxt": "Default arguments can be provided for pointers to functions."
              },
              {
                "optionTxt": "A function can have all its arguments as default."
              },
              {
                "optionTxt": "Default argument cannot be provided for pointers to functions."
              },
              {
                "optionTxt": "A default argument cannot be redefined in later declaration."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Constructors can have default parameters."
              },
              {
                "optionTxt": "Constructors cannot have default parameters."
              },
              {
                "optionTxt": "Constructors cannot have more than one default parameter."
              },
              {
                "optionTxt": "Constructors can have at most five default parameters."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which of the following function / type of function cannot be overloaded?",
            "options": [
              {
                "optionTxt": "Member function"
              },
              {
                "optionTxt": "Static function"
              },
              {
                "optionTxt": "Virtual function"
              },
              {
                "optionTxt": "Both B and C"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which of the following function declaration is/are incorrect?",
            "options": [
              {
                "optionTxt": "int Sum(int a, int b = 2, int c = 3);"
              },
              {
                "optionTxt": "int Sum(int a = 5, int b);"
              },
              {
                "optionTxt": "int Sum(int a = 0, int b, int c = 3);"
              },
              {
                "optionTxt": "Both B and C are incorrect."
              },
              {
                "optionTxt": "All are correct."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which of the following statement is incorrect?",
            "options": [
              {
                "optionTxt": "The default value for an argument can be a global constant."
              },
              {
                "optionTxt": "The default arguments are given in the function prototype."
              },
              {
                "optionTxt": "Compiler uses the prototype information to build a call, not the function definition."
              },
              {
                "optionTxt": "The default arguments are given in the function prototype and should be repeated in the function definition."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Where the default value of parameter have to be specified?",
            "options": [
              {
                "optionTxt": "Function call"
              },
              {
                "optionTxt": "Function definition"
              },
              {
                "optionTxt": "Function prototype"
              },
              {
                "optionTxt": "Both B or C"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "The default value for an argument cannot be function call."
              },
              {
                "optionTxt": "C++ allows the redefinition of a default parameter."
              },
              {
                "optionTxt": "Both A and B."
              },
              {
                "optionTxt": "C++ does not allow the redefinition of a default parameter."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Only one parameter of a function can be a default parameter."
              },
              {
                "optionTxt": "Minimum one parameter of a function must be a default parameter."
              },
              {
                "optionTxt": "All the parameters of a function can be default parameters."
              },
              {
                "optionTxt": "No parameter of a function can be default."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Which of the following statement is incorrect?",
            "options": [
              {
                "optionTxt": "A default argument is checked for type at the time of declaration and evaluated at the time of call."
              },
              {
                "optionTxt": "We can provide a default value to a particular argument in the middle of an argument list."
              },
              {
                "optionTxt": "We cannot provide a default value to a particular argument in the middle of an argument list."
              },
              {
                "optionTxt": "Default arguments are useful in situations where some arguments always have the same value."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Overloaded functions can accept same number of arguments."
              },
              {
                "optionTxt": "Overloaded functions always return value of same data type."
              },
              {
                "optionTxt": "Overloaded functions can accept only same number and same type of arguments."
              },
              {
                "optionTxt": "Overloaded functions can accept only different number and different type of arguments."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "Which of the following function / types of function cannot have default parameters?",
            "options": [
              {
                "optionTxt": "Member function of class"
              },
              {
                "optionTxt": "main()"
              },
              {
                "optionTxt": "Member function of structure"
              },
              {
                "optionTxt": "Both B and C"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "The order of the default argument will be right to left."
              },
              {
                "optionTxt": "The order of the default argument will be left to right."
              },
              {
                "optionTxt": "The order of the default argument will be alternate."
              },
              {
                "optionTxt": "The order of the default argument will be random."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          }
        ]
      },
      {
        "topic": "OOPs Concept",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which of the following type of class allows only one object of it to be created?",
            "options": [
              {
                "optionTxt": "Virtual class"
              },
              {
                "optionTxt": "Abstract class"
              },
              {
                "optionTxt": "Singleton class"
              },
              {
                "optionTxt": "Friend class"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which of the following is not a type of constructor?",
            "options": [
              {
                "optionTxt": "Copy constructor"
              },
              {
                "optionTxt": "Friend constructor"
              },
              {
                "optionTxt": "Default constructor"
              },
              {
                "optionTxt": "Parameterized constructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which of the following statements is correct?",
            "options": [
              {
                "optionTxt": "Base class pointer cannot point to derived class."
              },
              {
                "optionTxt": "Derived class pointer cannot point to base class."
              },
              {
                "optionTxt": "Pointer to derived class cannot be created."
              },
              {
                "optionTxt": "Pointer to base class cannot be created."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which of the following is not the member of class?",
            "options": [
              {
                "optionTxt": "Static function"
              },
              {
                "optionTxt": "Friend function"
              },
              {
                "optionTxt": "Const function"
              },
              {
                "optionTxt": "Virtual function"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which of the following concepts means determining at runtime what method to invoke?",
            "options": [
              {
                "optionTxt": "Data hiding"
              },
              {
                "optionTxt": "Dynamic Typing"
              },
              {
                "optionTxt": "Dynamic binding"
              },
              {
                "optionTxt": "Dynamic loading"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which of the following term is used for a function defined inside a class?",
            "options": [
              {
                "optionTxt": "Member Variable"
              },
              {
                "optionTxt": "Member function"
              },
              {
                "optionTxt": "Class function"
              },
              {
                "optionTxt": "Classic function"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following concept of oops allows compiler to insert arguments in a function call if it is not specified?",
            "options": [
              {
                "optionTxt": "Call by value"
              },
              {
                "optionTxt": "Call by reference"
              },
              {
                "optionTxt": "Default arguments"
              },
              {
                "optionTxt": "Call by pointer"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "How many instances of an abstract class can be created?",
            "options": [
              {
                "optionTxt": "1"
              },
              {
                "optionTxt": "5"
              },
              {
                "optionTxt": "13"
              },
              {
                "optionTxt": "0"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which of the following cannot be friend?",
            "options": [
              {
                "optionTxt": "Function"
              },
              {
                "optionTxt": "Class"
              },
              {
                "optionTxt": "Object"
              },
              {
                "optionTxt": "Operator function"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which of the following concepts of OOPS means exposing only necessary information to client?",
            "options": [
              {
                "optionTxt": "Encapsulation"
              },
              {
                "optionTxt": "Abstraction"
              },
              {
                "optionTxt": "Data hiding"
              },
              {
                "optionTxt": "Data binding"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Why reference is not same as a pointer?",
            "options": [
              {
                "optionTxt": "A reference can never be null."
              },
              {
                "optionTxt": "A reference once established cannot be changed."
              },
              {
                "optionTxt": "Reference doesn't need an explicit dereferencing mechanism."
              },
              {
                "optionTxt": "All of the above."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "cout is a/an __________ .",
            "options": [
              {
                "optionTxt": "operator"
              },
              {
                "optionTxt": "function"
              },
              {
                "optionTxt": "object"
              },
              {
                "optionTxt": "macro"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which of the following concepts provides facility of using object of one class inside another class?",
            "options": [
              {
                "optionTxt": "Encapsulation"
              },
              {
                "optionTxt": "Abstraction"
              },
              {
                "optionTxt": "Composition"
              },
              {
                "optionTxt": "Inheritance"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "How many types of polymorphisms are supported by C++?",
            "options": [
              {
                "optionTxt": "1"
              },
              {
                "optionTxt": "2"
              },
              {
                "optionTxt": "3"
              },
              {
                "optionTxt": "4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "Which of the following is an abstract data type?",
            "options": [
              {
                "optionTxt": "int"
              },
              {
                "optionTxt": "double"
              },
              {
                "optionTxt": "string"
              },
              {
                "optionTxt": "Class"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "Which of the following concepts means adding new components to a program as it runs?",
            "options": [
              {
                "optionTxt": "Data hiding"
              },
              {
                "optionTxt": "Dynamic typing"
              },
              {
                "optionTxt": "Dynamic binding"
              },
              {
                "optionTxt": "Dynamic loading"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A constructor is called at the time of declaration of an object."
              },
              {
                "optionTxt": "A constructor is called at the time of use of an object."
              },
              {
                "optionTxt": "A constructor is called at the time of declaration of a class."
              },
              {
                "optionTxt": "A constructor is called at the time of use of a class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "18.",
            "questionText": "Which of the following correctly describes overloading of functions?",
            "options": [
              {
                "optionTxt": "Virtual polymorphism"
              },
              {
                "optionTxt": "Transient polymorphism"
              },
              {
                "optionTxt": "Ad-hoc polymorphism"
              },
              {
                "optionTxt": "Pseudo polymorphism"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "19.",
            "questionText": "Which of the following approach is adapted by C++?",
            "options": [
              {
                "optionTxt": "Top-down"
              },
              {
                "optionTxt": "Bottom-up"
              },
              {
                "optionTxt": "Right-left"
              },
              {
                "optionTxt": "Left-right"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "20.",
            "questionText": "Which of the following is correct about function overloading?",
            "options": [
              {
                "optionTxt": "The types of arguments are different."
              },
              {
                "optionTxt": "The order of argument is different."
              },
              {
                "optionTxt": "The number of argument is same."
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "21.",
            "questionText": "Which of the following is correct about class and structure?",
            "options": [
              {
                "optionTxt": "class can have member functions while structure cannot."
              },
              {
                "optionTxt": "class data members are public by default while that of structure are private."
              },
              {
                "optionTxt": "Pointer to structure or classes cannot be declared."
              },
              {
                "optionTxt": "class data members are private by default while that of structure are public by default."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "22.",
            "questionText": "Which of the following concepts means wrapping up of data and functions together?",
            "options": [
              {
                "optionTxt": "Abstraction"
              },
              {
                "optionTxt": "Encapsulation"
              },
              {
                "optionTxt": "Inheritance"
              },
              {
                "optionTxt": "Polymorphism"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "23.",
            "questionText": "Which of the following concepts means waiting until runtime to determine which function to call?",
            "options": [
              {
                "optionTxt": "Data hiding"
              },
              {
                "optionTxt": "Dynamic casting"
              },
              {
                "optionTxt": "Dynamic binding"
              },
              {
                "optionTxt": "Dynamic loading"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "24.",
            "questionText": "How \"Late binding\" is implemented in C++?",
            "options": [
              {
                "optionTxt": "Using C++ tables"
              },
              {
                "optionTxt": "Using Virtual tables"
              },
              {
                "optionTxt": "Using Indexed virtual tables"
              },
              {
                "optionTxt": "Using polymorphic tables"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "25.",
            "questionText": "Which of the following operator is overloaded for object cout?",
            "options": [
              {
                "optionTxt": "&gt;&gt;"
              },
              {
                "optionTxt": "&lt;&lt;"
              },
              {
                "optionTxt": "+"
              },
              {
                "optionTxt": "="
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "26.",
            "questionText": "Which of the following is the correct class of the object cout?",
            "options": [
              {
                "optionTxt": "iostream"
              },
              {
                "optionTxt": "istream"
              },
              {
                "optionTxt": "ostream"
              },
              {
                "optionTxt": "ifstream"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "27.",
            "questionText": "Which of the following cannot be used with the keyword virtual?",
            "options": [
              {
                "optionTxt": "class"
              },
              {
                "optionTxt": "member functions"
              },
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "destructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "28.",
            "questionText": "Which of the following functions are performed by a constructor?",
            "options": [
              {
                "optionTxt": "Construct a new class"
              },
              {
                "optionTxt": "Construct a new object"
              },
              {
                "optionTxt": "Construct a new function"
              },
              {
                "optionTxt": "Initialize objects"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "29.",
            "questionText": "Which of the following problem causes an exception?",
            "options": [
              {
                "optionTxt": "main()"
              },
              {
                "optionTxt": "A problem in calling function."
              },
              {
                "optionTxt": "A syntax error."
              },
              {
                "optionTxt": "A run-time error."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "30.",
            "questionText": "Which one of the following options is correct about the statement given below? The compiler checks the type of reference in the object and not the type of object.",
            "options": [
              {
                "optionTxt": "Inheritance"
              },
              {
                "optionTxt": "Polymorphism"
              },
              {
                "optionTxt": "Abstraction"
              },
              {
                "optionTxt": "Encapsulation"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "31.",
            "questionText": "Which of the following is the correct way of declaring a function as constant?",
            "options": [
              {
                "optionTxt": "const int ShowData(void) { /* statements */ }"
              },
              {
                "optionTxt": "int const ShowData(void) { /* statements */ }"
              },
              {
                "optionTxt": "int ShowData(void) const { /* statements */ }"
              },
              {
                "optionTxt": "Both A and B"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "32.",
            "questionText": "Which of the following concepts is used to implement late binding?",
            "options": [
              {
                "optionTxt": "Virtual function"
              },
              {
                "optionTxt": "Operator function"
              },
              {
                "optionTxt": "Const function"
              },
              {
                "optionTxt": "Static function"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "33.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "C++ allows static type checking."
              },
              {
                "optionTxt": "C++ allows dynamic type checking."
              },
              {
                "optionTxt": "C++ allows static member function be of type const."
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "34.",
            "questionText": "Which of the following factors supports the statement that reusability is a desirable feature of a language?",
            "options": [
              {
                "optionTxt": "It decreases the testing time."
              },
              {
                "optionTxt": "It lowers the maintenance cost."
              },
              {
                "optionTxt": "It reduces the compilation time."
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "35.",
            "questionText": "Which of the following ways are legal to access a class data member using this pointer?",
            "options": [
              {
                "optionTxt": "this-&gt;x"
              },
              {
                "optionTxt": "this.x"
              },
              {
                "optionTxt": "*this.x"
              },
              {
                "optionTxt": "*this-x"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "36.",
            "questionText": "Which of the following is a mechanism of static polymorphism?",
            "options": [
              {
                "optionTxt": "Operator overloading"
              },
              {
                "optionTxt": "Function overloading"
              },
              {
                "optionTxt": "Templates"
              },
              {
                "optionTxt": "All of the above"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "37.",
            "questionText": "Which of the following is correct about the statements given below?\nAll operators can be overloaded in C++.\nWe can change the basic meaning of an operator in C++.",
            "options": [
              {
                "optionTxt": "Only I is true."
              },
              {
                "optionTxt": "Both I and II are false."
              },
              {
                "optionTxt": "Only II is true."
              },
              {
                "optionTxt": "Both I and II are true."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "38.",
            "questionText": "What happens if the base and derived class contains definition of a function with same prototype?",
            "options": [
              {
                "optionTxt": "Compiler reports an error on compilation."
              },
              {
                "optionTxt": "Only base class function will get called irrespective of object."
              },
              {
                "optionTxt": "Only derived class function will get called irrespective of object."
              },
              {
                "optionTxt": "Base class object will call base class function and derived class object will call derived class function."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "39.",
            "questionText": "Which of the following are available only in the class hierarchy chain?",
            "options": [
              {
                "optionTxt": "Public data members"
              },
              {
                "optionTxt": "Private data members"
              },
              {
                "optionTxt": "Protected data members"
              },
              {
                "optionTxt": "Member functions"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "40.",
            "questionText": "Which of the following is not a type of inheritance?",
            "options": [
              {
                "optionTxt": "Multiple"
              },
              {
                "optionTxt": "Multilevel"
              },
              {
                "optionTxt": "Distributive"
              },
              {
                "optionTxt": "Hierarchical"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "41.",
            "questionText": "Which of the following operators cannot be overloaded?",
            "options": [
              {
                "optionTxt": "[]"
              },
              {
                "optionTxt": "-&gt;"
              },
              {
                "optionTxt": "?:"
              },
              {
                "optionTxt": "*"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "42.",
            "questionText": "In which of the following a virtual call is resolved at the time of compilation?",
            "options": [
              {
                "optionTxt": "From inside the destructor."
              },
              {
                "optionTxt": "From inside the constructor."
              },
              {
                "optionTxt": "main()"
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "43.",
            "questionText": "Which of the following statements regarding inline functions is correct?",
            "options": [
              {
                "optionTxt": "It speeds up execution."
              },
              {
                "optionTxt": "It slows down execution."
              },
              {
                "optionTxt": "It increases the code size."
              },
              {
                "optionTxt": "Both A and C."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "44.",
            "questionText": "Which one of the following is the correct way to declare a pure virtual function?",
            "options": [
              {
                "optionTxt": "virtual void Display(void){0};"
              },
              {
                "optionTxt": "virtual void Display = 0;"
              },
              {
                "optionTxt": "virtual void Display(void) = 0;"
              },
              {
                "optionTxt": "void Display(void) = 0;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "45.",
            "questionText": "Which of the following header file includes definition of cin and cout?",
            "options": [
              {
                "optionTxt": "istream.h"
              },
              {
                "optionTxt": "ostream.h"
              },
              {
                "optionTxt": "iomanip.h"
              },
              {
                "optionTxt": "iostream.h"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "46.",
            "questionText": "Which of the following keyword is used to overload an operator?",
            "options": [
              {
                "optionTxt": "overload"
              },
              {
                "optionTxt": "operator"
              },
              {
                "optionTxt": "friend"
              },
              {
                "optionTxt": "override"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "47.",
            "questionText": "What will happen if a class is not having any name?",
            "options": [
              {
                "optionTxt": "It cannot have a destructor."
              },
              {
                "optionTxt": "It cannot have a constructor."
              },
              {
                "optionTxt": "It is not allowed."
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "48.",
            "questionText": "Which inheritance type is used in the class given below?\nclass A : public X, public Y\n{}",
            "options": [
              {
                "optionTxt": "Multilevel inheritance"
              },
              {
                "optionTxt": "Multiple inheritance"
              },
              {
                "optionTxt": "Hybrid inheritance"
              },
              {
                "optionTxt": "Hierarchical Inheritance"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "49.",
            "questionText": "Which one of the following is correct about the statements given below?\nAll function calls are resolved at compile-time in Procedure Oriented Programming.\nAll function calls are resolved at compile-time in OOPS.",
            "options": [
              {
                "optionTxt": "Only II is correct."
              },
              {
                "optionTxt": "Both I and II are correct."
              },
              {
                "optionTxt": "Only I is correct."
              },
              {
                "optionTxt": "Both I and II are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "50.",
            "questionText": "Which of the following is an invalid visibility label while inheriting a class?",
            "options": [
              {
                "optionTxt": "public"
              },
              {
                "optionTxt": "private"
              },
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "friend"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "51.",
            "questionText": "Which one of the following options is correct?",
            "options": [
              {
                "optionTxt": "Friend function can access public data members of the class."
              },
              {
                "optionTxt": "Friend function can access protected data members of the class."
              },
              {
                "optionTxt": "Friend function can access private data members of the class."
              },
              {
                "optionTxt": "All of the above."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "52.",
            "questionText": "Which of the following statements is correct in C++?",
            "options": [
              {
                "optionTxt": "Classes cannot have data as protected members."
              },
              {
                "optionTxt": "Structures can have functions as members."
              },
              {
                "optionTxt": "Class members are public by default."
              },
              {
                "optionTxt": "Structure members are private by default."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "53.",
            "questionText": "Which of the following is used to make an abstract class?",
            "options": [
              {
                "optionTxt": "Declaring it abstract using static keyword."
              },
              {
                "optionTxt": "Declaring it abstract using virtual keyword."
              },
              {
                "optionTxt": "Making at least one member function as virtual function."
              },
              {
                "optionTxt": "Making at least one member function as pure virtual function."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "54.",
            "questionText": "Which of the following access specifier is used as a default in a class definition?",
            "options": [
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "public"
              },
              {
                "optionTxt": "private"
              },
              {
                "optionTxt": "friend"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "55.",
            "questionText": "What is correct about the static data member of a class?",
            "options": [
              {
                "optionTxt": "A static member function can access only static data members of a class."
              },
              {
                "optionTxt": "A static data member is shared among all the object of the class."
              },
              {
                "optionTxt": "main()"
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "56.",
            "questionText": "Which of the following provides a reuse mechanism?",
            "options": [
              {
                "optionTxt": "Abstraction"
              },
              {
                "optionTxt": "Inheritance"
              },
              {
                "optionTxt": "Dynamic binding"
              },
              {
                "optionTxt": "Encapsulation"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "57.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Class is an instance of object."
              },
              {
                "optionTxt": "Object is an instance of a class."
              },
              {
                "optionTxt": "Class is an instance of data type."
              },
              {
                "optionTxt": "Object is an instance of data type."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          }
        ]
      },
      {
        "topic": "Objects and Classes",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What happens when we try to compile the class definition in following code snippet?\nclass Birds {};\nclass Peacock : protected Birds {};",
            "options": [
              {
                "optionTxt": "It will not compile because class body of Birds is not defined."
              },
              {
                "optionTxt": "It will not compile because class body of Peacock is not defined."
              },
              {
                "optionTxt": "It will not compile because a class cannot be protectedly inherited from other class."
              },
              {
                "optionTxt": "It will compile succesfully."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which of the following statements is incorrect?",
            "options": [
              {
                "optionTxt": "Friend keyword can be used in the class to allow access to another class."
              },
              {
                "optionTxt": "Friend keyword can be used for a function in the public section of a class."
              },
              {
                "optionTxt": "Friend keyword can be used for a function in the private section of a class."
              },
              {
                "optionTxt": "main()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which of the following statement is correct regarding destructor of base class?",
            "options": [
              {
                "optionTxt": "Destructor of base class should always be static."
              },
              {
                "optionTxt": "Destructor of base class should always be virtual."
              },
              {
                "optionTxt": "Destructor of base class should not be virtual."
              },
              {
                "optionTxt": "Destructor of base class should always be private."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which of the following two entities (reading from Left to Right) can be connected by the dot operator?",
            "options": [
              {
                "optionTxt": "A class member and a class object."
              },
              {
                "optionTxt": "A class object and a class."
              },
              {
                "optionTxt": "A class and a member of that class."
              },
              {
                "optionTxt": "A class object and a member of that class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "How can we make a class abstract?",
            "options": [
              {
                "optionTxt": "By making all member functions constant."
              },
              {
                "optionTxt": "By making at least one member function as pure virtual function."
              },
              {
                "optionTxt": "By declaring it abstract using the static keyword."
              },
              {
                "optionTxt": "By declaring it abstract using the virtual keyword."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which of the following statements is correct when a class is inherited publicly?",
            "options": [
              {
                "optionTxt": "Public members of the base class become protected members of derived class."
              },
              {
                "optionTxt": "Public members of the base class become private members of derived class."
              },
              {
                "optionTxt": "Private members of the base class become protected members of derived class."
              },
              {
                "optionTxt": "Public members of the base class become public members of derived class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following statements is correct about the constructors and destructors?",
            "options": [
              {
                "optionTxt": "Destructors can take arguments but constructors cannot."
              },
              {
                "optionTxt": "Constructors can take arguments but destructors cannot."
              },
              {
                "optionTxt": "Destructors can be overloaded but constructors cannot be overloaded."
              },
              {
                "optionTxt": "Constructors and destructors can both return a value."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which of the following access specifies is used in a class definition by default?",
            "options": [
              {
                "optionTxt": "Protected"
              },
              {
                "optionTxt": "Public"
              },
              {
                "optionTxt": "Private"
              },
              {
                "optionTxt": "Friend"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which of the following statement is correct with respect to the use of friend keyword inside a class?",
            "options": [
              {
                "optionTxt": "A private data member can be declared as a friend."
              },
              {
                "optionTxt": "A class may be declared as a friend."
              },
              {
                "optionTxt": "An object may be declared as a friend."
              },
              {
                "optionTxt": "We can use friend keyword as a class name."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which of the following keywords is used to control access to a class member?",
            "options": [
              {
                "optionTxt": "Default"
              },
              {
                "optionTxt": "Break"
              },
              {
                "optionTxt": "Protected"
              },
              {
                "optionTxt": "Asm"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Which of the following can access private data members or member functions of a class?",
            "options": [
              {
                "optionTxt": "Any function in the program."
              },
              {
                "optionTxt": "All global functions in the program."
              },
              {
                "optionTxt": "Any member function of that class."
              },
              {
                "optionTxt": "Only public member functions of that class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Which of the following type of data member can be shared by all instances of its class?",
            "options": [
              {
                "optionTxt": "Public"
              },
              {
                "optionTxt": "Inherited"
              },
              {
                "optionTxt": "Static"
              },
              {
                "optionTxt": "Friend"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which of the following also known as an instance of a class?",
            "options": [
              {
                "optionTxt": "Friend Functions"
              },
              {
                "optionTxt": "Object"
              },
              {
                "optionTxt": "Member Functions"
              },
              {
                "optionTxt": "Member Variables"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Constructor is executed when _____.",
            "options": [
              {
                "optionTxt": "an object is created"
              },
              {
                "optionTxt": "an object is used"
              },
              {
                "optionTxt": "a class is declared"
              },
              {
                "optionTxt": "an object goes out of scope."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "Which of the following statements about virtual base classes is correct?",
            "options": [
              {
                "optionTxt": "It is used to provide multiple inheritance."
              },
              {
                "optionTxt": "It is used to avoid multiple copies of base class in derived class."
              },
              {
                "optionTxt": "It is used to allow multiple copies of base class in a derived class."
              },
              {
                "optionTxt": "It allows private members of the base class to be inherited in the derived class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "How many objects can be created from an abstract class?",
            "options": [
              {
                "optionTxt": "Zero"
              },
              {
                "optionTxt": "One"
              },
              {
                "optionTxt": "Two"
              },
              {
                "optionTxt": "As many as we want"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "What does the class definitions in following code represent?\nclass Bike\n{\n    Engine objEng;\n};\nclass Engine\n{\n    float CC;\n};",
            "options": [
              {
                "optionTxt": "kind of relationship"
              },
              {
                "optionTxt": "has a relationship"
              },
              {
                "optionTxt": "Inheritance"
              },
              {
                "optionTxt": "Both A and B"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "18.",
            "questionText": "Which of the following statements is correct when a class is inherited privately?",
            "options": [
              {
                "optionTxt": "Public members of the base class become protected members of derived class."
              },
              {
                "optionTxt": "Public members of the base class become private members of derived class."
              },
              {
                "optionTxt": "Private members of the base class become private members of derived class."
              },
              {
                "optionTxt": "Public members of the base class become public members of derived class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "19.",
            "questionText": "Which of the following statements is correct?",
            "options": [
              {
                "optionTxt": "Data items in a class must be private."
              },
              {
                "optionTxt": "Both data and functions can be either private or public."
              },
              {
                "optionTxt": "Member functions of a class must be private."
              },
              {
                "optionTxt": "Constructor of a class cannot be private."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "20.",
            "questionText": "What does a class hierarchy depict?",
            "options": [
              {
                "optionTxt": "It shows the relationships between the classes in the form of an organization chart."
              },
              {
                "optionTxt": "It describes \"has a\" relationships."
              },
              {
                "optionTxt": "It describes \"kind of\" relationships."
              },
              {
                "optionTxt": "It shows the same relationship as a family tree."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "21.",
            "questionText": "Which of the following can be overloaded?",
            "options": [
              {
                "optionTxt": "Object"
              },
              {
                "optionTxt": "Functions"
              },
              {
                "optionTxt": "Operators"
              },
              {
                "optionTxt": "Both B and C"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "22.",
            "questionText": "Which of the following means \"The use of an object of one class in definition of another class\"?",
            "options": [
              {
                "optionTxt": "Encapsulation"
              },
              {
                "optionTxt": "Inheritance"
              },
              {
                "optionTxt": "Composition"
              },
              {
                "optionTxt": "Abstraction"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "23.",
            "questionText": "Which of the following is the only technical difference between structures and classes in C++?",
            "options": [
              {
                "optionTxt": "Member function and data are by default protected in structures but private in classes."
              },
              {
                "optionTxt": "Member function and data are by default private in structures but public in classes."
              },
              {
                "optionTxt": "Member function and data are by default public in structures but private in classes."
              },
              {
                "optionTxt": "Member function and data are by default public in structures but protected in classes."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "24.",
            "questionText": "Which of the following statements is correct about the program given below?\nclass Bix\n{\n    public:\n    static void MyFunction();\n};\nint main()\n{\n    void(*ptr)() = &Bix::MyFunction;\n    return 0; \n}",
            "options": [
              {
                "optionTxt": "The program reports an error as pointer to member function cannot be defined outside the definition of class."
              },
              {
                "optionTxt": "The program reports an error as pointer to static member function cannot be defined."
              },
              {
                "optionTxt": "The program reports an error as pointer to member function cannot be defined without object."
              },
              {
                "optionTxt": "The program reports linker error."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "25.",
            "questionText": "Which of the following statements are correct for a static member function?\nIt can access only other static members of its class.\nIt can be called using the class name, instead of objects.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          }
        ]
      },
      {
        "topic": "Constructors and Destructors",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "A constructor that accepts __________ parameters is called the default constructor.",
            "options": [
              {
                "optionTxt": "one"
              },
              {
                "optionTxt": "two"
              },
              {
                "optionTxt": "no"
              },
              {
                "optionTxt": "three"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "What happens when a class with parameterized constructors and having no default constructor is used in a program and we create an object that needs a zero-argument constructor?",
            "options": [
              {
                "optionTxt": "Compile-time error."
              },
              {
                "optionTxt": "Preprocessing error."
              },
              {
                "optionTxt": "Runtime error."
              },
              {
                "optionTxt": "Runtime exception."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Can a class have virtual destructor?",
            "options": [
              {
                "optionTxt": "Yes"
              },
              {
                "optionTxt": "No"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Destructor has the same name as the constructor and it is preceded by ______ .",
            "options": [
              {
                "optionTxt": "!"
              },
              {
                "optionTxt": "?"
              },
              {
                "optionTxt": "~"
              },
              {
                "optionTxt": "$"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "For automatic objects, constructors and destructors are called each time the objects",
            "options": [
              {
                "optionTxt": "enter and leave scope"
              },
              {
                "optionTxt": "inherit parent class"
              },
              {
                "optionTxt": "are constructed"
              },
              {
                "optionTxt": "are destroyed"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which constructor function is designed to copy objects of the same class type?",
            "options": [
              {
                "optionTxt": "Create constructor"
              },
              {
                "optionTxt": "Object constructor"
              },
              {
                "optionTxt": "Dynamic constructor"
              },
              {
                "optionTxt": "Copy constructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Constructor has the same name as that of the class."
              },
              {
                "optionTxt": "Destructor has the same name as that of the class with a tilde symbol at the beginning."
              },
              {
                "optionTxt": "Both A and B."
              },
              {
                "optionTxt": "Destructor has the same name as the first member function of the class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which of the following statement is incorrect?",
            "options": [
              {
                "optionTxt": "Constructor is a member function of the class."
              },
              {
                "optionTxt": "The compiler always provides a zero argument constructor."
              },
              {
                "optionTxt": "It is necessary that a constructor in a class should always be public."
              },
              {
                "optionTxt": "Both B and C."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "When are the Global objects destroyed?",
            "options": [
              {
                "optionTxt": "When the control comes out of the block in which they are being used."
              },
              {
                "optionTxt": "When the program terminates."
              },
              {
                "optionTxt": "When the control comes out of the function in which they are being used."
              },
              {
                "optionTxt": "As soon as local objects die."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Copy constructor must receive its arguments by __________ .",
            "options": [
              {
                "optionTxt": "either pass-by-value or pass-by-reference"
              },
              {
                "optionTxt": "only pass-by-value"
              },
              {
                "optionTxt": "only pass-by-reference"
              },
              {
                "optionTxt": "only pass by address"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "A function with the same name as the class, but preceded with a tilde character (~) is called __________ of that class.",
            "options": [
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "function"
              },
              {
                "optionTxt": "object"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "A union that has no constructor can be initialized with another union of __________ type.",
            "options": [
              {
                "optionTxt": "different"
              },
              {
                "optionTxt": "same"
              },
              {
                "optionTxt": "virtual"
              },
              {
                "optionTxt": "class"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which of the following gets called when an object goes out of scope?",
            "options": [
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "main"
              },
              {
                "optionTxt": "virtual function"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Destructor destroys only integer data members of the object."
              },
              {
                "optionTxt": "Destructor destroys only float data members of the object."
              },
              {
                "optionTxt": "Destructor destroys only pointer data members of the object."
              },
              {
                "optionTxt": "Destructor destroys the complete object."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "__________ used to make a copy of one class object from another class object of the same class type.",
            "options": [
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "copy constructor"
              },
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "default constructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "Constructors __________ to allow different approaches of object construction.",
            "options": [
              {
                "optionTxt": "cannot overloaded"
              },
              {
                "optionTxt": "can be overloaded"
              },
              {
                "optionTxt": "can be called"
              },
              {
                "optionTxt": "can be nested"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A destructor has the same name as the class in which it is present."
              },
              {
                "optionTxt": "A destructor has a different name than the class in which it is present."
              },
              {
                "optionTxt": "A destructor always returns an integer."
              },
              {
                "optionTxt": "A destructor can be overloaded."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "18.",
            "questionText": "Which of the following cannot be declared as virtual?",
            "options": [
              {
                "optionTxt": "Constructor"
              },
              {
                "optionTxt": "Destructor"
              },
              {
                "optionTxt": "Data Members"
              },
              {
                "optionTxt": "Both A and C"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "19.",
            "questionText": "If the copy constructor receives its arguments by value, the copy constructor would",
            "options": [
              {
                "optionTxt": "call one-argument constructor of the class"
              },
              {
                "optionTxt": "work without any problem"
              },
              {
                "optionTxt": "call itself recursively"
              },
              {
                "optionTxt": "call zero-argument constructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "20.",
            "questionText": "Which of the following are NOT provided by the compiler by default?",
            "options": [
              {
                "optionTxt": "Zero-argument Constructor"
              },
              {
                "optionTxt": "Destructor"
              },
              {
                "optionTxt": "Copy Constructor"
              },
              {
                "optionTxt": "Copy Destructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "21.",
            "questionText": "It is a __________ error to pass arguments to a destructor.",
            "options": [
              {
                "optionTxt": "logical"
              },
              {
                "optionTxt": "virtual"
              },
              {
                "optionTxt": "syntax"
              },
              {
                "optionTxt": "linker"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "22.",
            "questionText": "If the programmer does not explicitly provide a destructor, then which of the following creates an empty destructor?",
            "options": [
              {
                "optionTxt": "Preprocessor"
              },
              {
                "optionTxt": "Compiler"
              },
              {
                "optionTxt": "Linker"
              },
              {
                "optionTxt": "main()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "23.",
            "questionText": "A __________ is a constructor that either has no parameters, or if it has parameters, all the parameters have default values.",
            "options": [
              {
                "optionTxt": "default constructor"
              },
              {
                "optionTxt": "copy constructor"
              },
              {
                "optionTxt": "Both A and B"
              },
              {
                "optionTxt": "None of these"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "24.",
            "questionText": "How many default constructors per class are possible?",
            "options": [
              {
                "optionTxt": "Only one"
              },
              {
                "optionTxt": "Two"
              },
              {
                "optionTxt": "Three"
              },
              {
                "optionTxt": "Unlimited"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "25.",
            "questionText": "Which of the following statement is correct about destructors?",
            "options": [
              {
                "optionTxt": "A destructor has void return type."
              },
              {
                "optionTxt": "A destructor has integer return type."
              },
              {
                "optionTxt": "A destructor has no return type."
              },
              {
                "optionTxt": "A destructors return type is always same as that of main()."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "26.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A constructor has the same name as the class in which it is present."
              },
              {
                "optionTxt": "A constructor has a different name than the class in which it is present."
              },
              {
                "optionTxt": "A constructor always returns an integer."
              },
              {
                "optionTxt": "A constructor cannot be overloaded."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "27.",
            "questionText": "Which of the following implicitly creates a default constructor when the programmer does not explicitly define at least one constructor for a class?",
            "options": [
              {
                "optionTxt": "Preprocessor"
              },
              {
                "optionTxt": "Linker"
              },
              {
                "optionTxt": "Loader"
              },
              {
                "optionTxt": "Compiler"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "28.",
            "questionText": "A destructor takes __________ arguments.",
            "options": [
              {
                "optionTxt": "one"
              },
              {
                "optionTxt": "two"
              },
              {
                "optionTxt": "three"
              },
              {
                "optionTxt": "no"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "29.",
            "questionText": "Destructor calls are made in which order of the corresponding constructor calls?",
            "options": [
              {
                "optionTxt": "Reverse order"
              },
              {
                "optionTxt": "Forward order"
              },
              {
                "optionTxt": "Depends on how the object is constructed"
              },
              {
                "optionTxt": "Depends on how many objects are constructed"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "30.",
            "questionText": "Which of the following never requires any arguments?",
            "options": [
              {
                "optionTxt": "Member function"
              },
              {
                "optionTxt": "Friend function"
              },
              {
                "optionTxt": "Default constructor"
              },
              {
                "optionTxt": "const"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "31.",
            "questionText": "A class's __________ is called when an object is destroyed.",
            "options": [
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "assignment function"
              },
              {
                "optionTxt": "copy constructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "32.",
            "questionText": "Destructors __________ for automatic objects if the program terminates with a call to function exit or function abort.",
            "options": [
              {
                "optionTxt": "are called"
              },
              {
                "optionTxt": "are inherited"
              },
              {
                "optionTxt": "are not called"
              },
              {
                "optionTxt": "are created"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "33.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A constructor of a derived class can access any public and protected member of the base class."
              },
              {
                "optionTxt": "Constructor cannot be inherited but the derived class can call them."
              },
              {
                "optionTxt": "A constructor of a derived class cannot access any public and protected member of the base class."
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "34.",
            "questionText": "Which of the following statements are correct?",
            "options": [
              {
                "optionTxt": "Constructor is always called explicitly."
              },
              {
                "optionTxt": "Constructor is called either implicitly or explicitly, whereas destructor is always called implicitly."
              },
              {
                "optionTxt": "Destructor is always called explicitly."
              },
              {
                "optionTxt": "Constructor and destructor functions are not called at all as they are always inline."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "35.",
            "questionText": "How many times a constructor is called in the life-time of an object?",
            "options": [
              {
                "optionTxt": "Only once"
              },
              {
                "optionTxt": "Twice"
              },
              {
                "optionTxt": "Thrice"
              },
              {
                "optionTxt": "Depends on the way of creation of object"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "36.",
            "questionText": "Which of the following gets called when an object is being created?",
            "options": [
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "virtual function"
              },
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "main"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "37.",
            "questionText": "To ensure that every object in the array receives a destructor call, always delete memory allocated as an array with operator __________ .",
            "options": [
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "delete"
              },
              {
                "optionTxt": "delete[]"
              },
              {
                "optionTxt": "kill[]"
              },
              {
                "optionTxt": "free[]"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "38.",
            "questionText": "Which of the following statement is correct about constructors?",
            "options": [
              {
                "optionTxt": "A constructor has a return type."
              },
              {
                "optionTxt": "A constructor cannot contain a function call."
              },
              {
                "optionTxt": "A constructor has no return type."
              },
              {
                "optionTxt": "A constructor has a void return type."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "39.",
            "questionText": "Which of the following statement is correct whenever an object goes out of scope?",
            "options": [
              {
                "optionTxt": "The default constructor of the object is called."
              },
              {
                "optionTxt": "The parameterized destructor is called."
              },
              {
                "optionTxt": "The default destructor of the object is called."
              },
              {
                "optionTxt": "None of the above."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          }
        ]
      },
      {
        "topic": "References",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A reference is stored on heap."
              },
              {
                "optionTxt": "A reference is stored on stack."
              },
              {
                "optionTxt": "A reference is stored in a queue."
              },
              {
                "optionTxt": "A reference is stored in a binary tree."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which of the following statements is correct?\nOnce a reference variable has been defined to refer to a particular variable it can refer to any other variable.\nA reference is not a constant pointer.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Functions can be declared to return a reference type. There are reasons to make such a declaration/Which of the following reasons are correct?\nThe information being returned is a large enough object that returning a reference is more efficient than returning a copy.\nThe type of the function must be a R-value.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which of the following statements is correct?\nChange a reference changes the referent.\nWe can create an array of references.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which of the following statement is correct about the references?",
            "options": [
              {
                "optionTxt": "A reference must always be initialized within functions."
              },
              {
                "optionTxt": "A reference must always be initialized outside all functions."
              },
              {
                "optionTxt": "A reference must always be initialized."
              },
              {
                "optionTxt": "Both A and C."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "A reference is declared using the _____ symbol.",
            "options": [
              {
                "optionTxt": "&amp;&amp;"
              },
              {
                "optionTxt": "&amp;"
              },
              {
                "optionTxt": "||"
              },
              {
                "optionTxt": "!"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Once a reference variable has been defined to refer to a particular variable it can refer to any other variable."
              },
              {
                "optionTxt": "A reference is indicated by using && operator."
              },
              {
                "optionTxt": "Once a reference variable has been defined to refer to a particular variable it cannot refer to any other variable."
              },
              {
                "optionTxt": "A reference can be declared beforehand and initialized later."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which of the following statements is correct?\nA reference is not a constant pointer.\nA referenced is automatically de-referenced.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which of the following statements is correct?\nAn array of references is acceptable.\nWe can also create a reference to a reference.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A referenced has to be de-referenced to access a value."
              },
              {
                "optionTxt": "A referenced does not need to be de-referenced to access a value."
              },
              {
                "optionTxt": "A referenced has to be double de-referenced to access a value."
              },
              {
                "optionTxt": "Whether a reference should be de-referenced or not depends on the type of the reference."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Which of the following statements is correct?\nOnce the variable and the reference are linked they are tied together.\nOnce the reference of a variable is declared another reference of that variable is not allowed.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Which of the following statements is correct?\nWe can return a global variable by reference.\nWe cannot return a local variable by reference.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Reference is like a _____.",
            "options": [
              {
                "optionTxt": "Pointer"
              },
              {
                "optionTxt": "Structure"
              },
              {
                "optionTxt": "Macro"
              },
              {
                "optionTxt": "Enum"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A reference is a constant pointer."
              },
              {
                "optionTxt": "A reference is not a constant pointer."
              },
              {
                "optionTxt": "An array of references is acceptable."
              },
              {
                "optionTxt": "It is possible to create a reference to a reference."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "*"
              },
              {
                "optionTxt": "Once a reference variable has been defined to refer to a particular variable it can refer to any other variable."
              },
              {
                "optionTxt": "A reference must always be initialized within classes."
              },
              {
                "optionTxt": "A variable can have multiple references."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "An array of references is acceptable."
              },
              {
                "optionTxt": "Once a reference variable has been defined to refer to a particular variable it can refer to any other variable."
              },
              {
                "optionTxt": "An array of references is not acceptable."
              },
              {
                "optionTxt": "Reference is like a structure."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "Which of the following statements is correct?\nPointer to a reference and reference to a pointer both are valid.\nWhen we use reference, we are actually referring to a referent.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          }
        ]
      }
    ]
  },
  {
    "title": "Java",
    "topics": [
      {
        "topic": "Language Fundamentals",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which four options describe the correct default values for array elements of the types indicated?\nint -> 0\nString -> \"null\"\nDog -> null\nchar -> '\\u0000'\nfloat -> 0.0f\nboolean -> true",
            "options": [
              {
                "optionTxt": "1, 2, 3, 4"
              },
              {
                "optionTxt": "1, 3, 4, 5"
              },
              {
                "optionTxt": "2, 4, 5, 6"
              },
              {
                "optionTxt": "3, 4, 5, 6"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which one of these lists contains only Java programming language keywords?",
            "options": [
              {
                "optionTxt": "class, if, void, long, Int, continue"
              },
              {
                "optionTxt": "goto, instanceof, native, finally, default, throws"
              },
              {
                "optionTxt": "try, virtual, throw, final, volatile, transient"
              },
              {
                "optionTxt": "strictfp, constant, super, implements, do"
              },
              {
                "optionTxt": "byte, break, assert, switch, include"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which will legally declare, construct, and initialize an array?",
            "options": [
              {
                "optionTxt": "int [] myList = {\"1\", \"2\", \"3\"};"
              },
              {
                "optionTxt": "int [] myList = (5, 8, 2);"
              },
              {
                "optionTxt": "int myList [] [] = {4,9,7,0};"
              },
              {
                "optionTxt": "int myList [] = {4, 3, 7};"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which is a reserved word in the Java programming language?",
            "options": [
              {
                "optionTxt": "method"
              },
              {
                "optionTxt": "native"
              },
              {
                "optionTxt": "subclasses"
              },
              {
                "optionTxt": "reference"
              },
              {
                "optionTxt": "array"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which is a valid keyword in java?",
            "options": [
              {
                "optionTxt": "interface"
              },
              {
                "optionTxt": "string"
              },
              {
                "optionTxt": "Float"
              },
              {
                "optionTxt": "unsigned"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which three are legal array declarations?\nint [] myScores [];\nchar [] myChars;\nint [6] myScores;\nDog myDogs [];\nDog myDogs [7];",
            "options": [
              {
                "optionTxt": "1, 2, 4"
              },
              {
                "optionTxt": "2, 4, 5"
              },
              {
                "optionTxt": "2, 3, 4"
              },
              {
                "optionTxt": "All are correct."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "public interface Foo \n{ \n    int k = 4; /* Line 3 */\n}\n\nWhich three piece of codes are equivalent to line 3?\nfinal int k = 4;\npublic int k = 4;\nstatic int k = 4;\nabstract int k = 4;\nvolatile int k = 4;\nprotected int k = 4;",
            "options": [
              {
                "optionTxt": "1, 2 and 3"
              },
              {
                "optionTxt": "2, 3 and 4"
              },
              {
                "optionTxt": "3, 4 and 5"
              },
              {
                "optionTxt": "4, 5 and 6"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which one of the following will declare an array and initialize it with five numbers?",
            "options": [
              {
                "optionTxt": "Array a = new Array(5);"
              },
              {
                "optionTxt": "int [] a = {23,22,21,20,19};"
              },
              {
                "optionTxt": "int a [] = new int[5];"
              },
              {
                "optionTxt": "int [5] array;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which three are valid declarations of a char?\nchar c1 = 064770;\nchar c2 = 'face';\nchar c3 = 0xbeef;\nchar c4 = \\u0022;\nchar c5 = '\\iface';\nchar c6 = '\\uface';",
            "options": [
              {
                "optionTxt": "1, 2, 4"
              },
              {
                "optionTxt": "1, 3, 6"
              },
              {
                "optionTxt": "3, 5"
              },
              {
                "optionTxt": "5 only"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which is the valid declarations within an interface definition?",
            "options": [
              {
                "optionTxt": "public double methoda();"
              },
              {
                "optionTxt": "public final double methoda();"
              },
              {
                "optionTxt": "static void methoda(double d1);"
              },
              {
                "optionTxt": "protected void methoda(double d1);"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Which one is a valid declaration of a boolean?",
            "options": [
              {
                "optionTxt": "boolean b1 = 0;"
              },
              {
                "optionTxt": "boolean b2 = 'false';"
              },
              {
                "optionTxt": "boolean b3 = false;"
              },
              {
                "optionTxt": "boolean b4 = Boolean.false();"
              },
              {
                "optionTxt": "boolean b5 = no;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Which three are valid declarations of a float?\nfloat f1 = -343;\nfloat f2 = 3.14;\nfloat f3 = 0x12345;\nfloat f4 = 42e7;\nfloat f5 = 2001.0D;\nfloat f6 = 2.81F;",
            "options": [
              {
                "optionTxt": "1, 2, 4"
              },
              {
                "optionTxt": "2, 3, 5"
              },
              {
                "optionTxt": "1, 3, 6"
              },
              {
                "optionTxt": "2, 4, 6"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which is a valid declarations of a String?",
            "options": [
              {
                "optionTxt": "String s1 = null;"
              },
              {
                "optionTxt": "String s2 = 'null';"
              },
              {
                "optionTxt": "String s3 = (String) 'abc';"
              },
              {
                "optionTxt": "String s4 = (String) '\\ufeed';"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "What is the numerical range of a char?",
            "options": [
              {
                "optionTxt": "-128 to 127"
              },
              {
                "optionTxt": "-(215) to (215) - 1"
              },
              {
                "optionTxt": "0 to 32767"
              },
              {
                "optionTxt": "0 to 65535"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          }
        ]
      },
      {
        "topic": "Declarations and Access Control",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "You want subclasses in any package to have access to members of a superclass. Which is the most restrictive access that accomplishes this objective?",
            "options": [
              {
                "optionTxt": "public"
              },
              {
                "optionTxt": "private"
              },
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "transient"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "public class Outer \n{ \n    public void someOuterMethod() \n    {\n        //Line 5 \n    } \n    public class Inner { } \n    \n    public static void main(String[] argv) \n    {\n        Outer ot = new Outer(); \n        //Line 10\n    } \n} \n\n\nWhich of the following code fragments inserted, will allow to compile?",
            "options": [
              {
                "optionTxt": "new Inner(); //At line 5"
              },
              {
                "optionTxt": "new Inner(); //At line 10"
              },
              {
                "optionTxt": "new ot.Inner(); //At line 10"
              },
              {
                "optionTxt": "new Outer.Inner(); //At line 10"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "interface Base \n{\n    boolean m1 ();\n    byte m2(short s);\n}\n\nwhich two code fragments will compile?\ninterface Base2 implements Base {}\nabstract class Class2 extends Base\n{ public boolean m1(){ return true; }}\nabstract class Class2 implements Base {}\nabstract class Class2 implements Base\n{ public boolean m1(){ return (7 > 4); }}\nabstract class Class2 implements Base\n{ protected boolean m1(){ return (5 > 7) }}",
            "options": [
              {
                "optionTxt": "1 and 2"
              },
              {
                "optionTxt": "2 and 3"
              },
              {
                "optionTxt": "3 and 4"
              },
              {
                "optionTxt": "1 and 5"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which three form part of correct array declarations?\npublic int a [ ]\nstatic int [ ] a\npublic [ ] int a\nprivate int a [3]\nprivate int [3] a [ ]\npublic final int [ ] a",
            "options": [
              {
                "optionTxt": "1, 3, 4"
              },
              {
                "optionTxt": "2, 4, 5"
              },
              {
                "optionTxt": "1, 2, 6"
              },
              {
                "optionTxt": "2, 5, 6"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "public class Test { }\n\nWhat is the prototype of the default constructor?",
            "options": [
              {
                "optionTxt": "Test( )"
              },
              {
                "optionTxt": "Test(void)"
              },
              {
                "optionTxt": "public Test( )"
              },
              {
                "optionTxt": "public Test(void)"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "What is the most restrictive access modifier that will allow members of one class to have access to members of another class in the same package?",
            "options": [
              {
                "optionTxt": "public"
              },
              {
                "optionTxt": "abstract"
              },
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "synchronized"
              },
              {
                "optionTxt": "default access"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "E"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following is/are legal method declarations?\nprotected abstract void m1();\nstatic final void m1(){}\nsynchronized public final void m1() {}\nprivate native void m1();",
            "options": [
              {
                "optionTxt": "1 and 3"
              },
              {
                "optionTxt": "2 and 4"
              },
              {
                "optionTxt": "1 only"
              },
              {
                "optionTxt": "All of them are legal declarations."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which cause a compiler error?",
            "options": [
              {
                "optionTxt": "int[ ] scores = {3, 5, 7};"
              },
              {
                "optionTxt": "int [ ][ ] scores = {2,7,6}, {9,3,45};"
              },
              {
                "optionTxt": "String cats[ ] = {\"Fluffy\", \"Spot\", \"Zeus\"};"
              },
              {
                "optionTxt": "boolean results[ ] = new boolean [] {true, false, true};"
              },
              {
                "optionTxt": "Integer results[ ] = {new Integer(3), new Integer(5), new Integer(8)};"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which three are valid method signatures in an interface?\nprivate int getArea();\npublic float getVol(float x);\npublic void main(String [] args);\npublic static void main(String [] args);\nboolean setFlag(Boolean [] test);",
            "options": [
              {
                "optionTxt": "1 and 2"
              },
              {
                "optionTxt": "2, 3 and 5"
              },
              {
                "optionTxt": "3, 4, and 5"
              },
              {
                "optionTxt": "2 and 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "You want a class to have access to members of another class in the same package. Which is the most restrictive access that accomplishes this objective?",
            "options": [
              {
                "optionTxt": "public"
              },
              {
                "optionTxt": "private"
              },
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "default access"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "What is the widest valid returnType for methodA in line 3?\npublic class ReturnIt \n{ \n    returnType methodA(byte x, double y) /* Line 3 */\n    { \n        return (long)x / y * 2; \n    } \n}",
            "options": [
              {
                "optionTxt": "int"
              },
              {
                "optionTxt": "byte"
              },
              {
                "optionTxt": "long"
              },
              {
                "optionTxt": "double"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "class A \n{  \n    protected int method1(int a, int b) \n    {\n        return 0; \n    } \n}\n\nWhich is valid in a class that extends class A?",
            "options": [
              {
                "optionTxt": "public int method1(int a, int b) {return 0; }"
              },
              {
                "optionTxt": "private int method1(int a, int b) { return 0; }"
              },
              {
                "optionTxt": "public short method1(int a, int b) { return 0; }"
              },
              {
                "optionTxt": "static protected int method1(int a, int b) { return 0; }"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which one creates an instance of an array?",
            "options": [
              {
                "optionTxt": "int[ ] ia = new int[15];"
              },
              {
                "optionTxt": "float fa = new float[20];"
              },
              {
                "optionTxt": "char[ ] ca = \"Some String\";"
              },
              {
                "optionTxt": "int ia[ ] [ ] = { 4, 5, 6 }, { 1,2,3 };"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Which two of the following are legal declarations for nonnested classes and interfaces?\nfinal abstract class Test {}\npublic static interface Test {}\nfinal public class Test {}\nprotected abstract class Test {}\nprotected interface Test {}\nabstract public class Test {}",
            "options": [
              {
                "optionTxt": "1 and 4"
              },
              {
                "optionTxt": "2 and 5"
              },
              {
                "optionTxt": "3 and 6"
              },
              {
                "optionTxt": "4 and 6"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "Which of the following class level (nonlocal) variable declarations will not compile?",
            "options": [
              {
                "optionTxt": "protected int a;"
              },
              {
                "optionTxt": "transient int b = 3;"
              },
              {
                "optionTxt": "private synchronized int e;"
              },
              {
                "optionTxt": "volatile int d;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "Which two cause a compiler error?\nfloat[ ] f = new float(3);\nfloat f2[ ] = new float[ ];\nfloat[ ]f1 = new float[3];\nfloat f3[ ] = new float[3];\nfloat f5[ ] = {1.0f, 2.0f, 2.0f};",
            "options": [
              {
                "optionTxt": "2, 4"
              },
              {
                "optionTxt": "3, 5"
              },
              {
                "optionTxt": "4, 5"
              },
              {
                "optionTxt": "1, 2"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "Given a method in a protected class, what access modifier do you use to restrict access to that method to only the other members of the same class?",
            "options": [
              {
                "optionTxt": "final"
              },
              {
                "optionTxt": "static"
              },
              {
                "optionTxt": "private"
              },
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "volatile"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "18.",
            "questionText": "Which is a valid declaration within an interface?",
            "options": [
              {
                "optionTxt": "public static short stop = 23;"
              },
              {
                "optionTxt": "protected short stop = 23;"
              },
              {
                "optionTxt": "transient short stop = 23;"
              },
              {
                "optionTxt": "final void madness(short stop);"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          }
        ]
      },
      {
        "topic": "Operators and Assignments",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What will be the output of the program?\nclass PassA \n{\n    public static void main(String [] args) \n    {\n        PassA p = new PassA();\n        p.start();\n    }\n\n    void start() \n    {\n        long [] a1 = {3,4,5};\n        long [] a2 = fix(a1);\n        System.out.print(a1[0] + a1[1] + a1[2] + \" \");\n        System.out.println(a2[0] + a2[1] + a2[2]);\n    }\n\n    long [] fix(long [] a3) \n    {\n        a3[1] = 7;\n        return a3;\n    }\n}",
            "options": [
              {
                "optionTxt": "12 15"
              },
              {
                "optionTxt": "15 15"
              },
              {
                "optionTxt": "3 4 5 3 7 5"
              },
              {
                "optionTxt": "3 7 5 3 7 5"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "What will be the output of the program?\nclass Test \n{\n    public static void main(String [] args) \n    {\n        Test p = new Test();\n        p.start();\n    }\n\n    void start() \n    {\n        boolean b1 = false;\n        boolean b2 = fix(b1);\n        System.out.println(b1 + \" \" + b2);\n    }\n\n    boolean fix(boolean b1) \n    {\n        b1 = true;\n        return b1;\n    }\n}",
            "options": [
              {
                "optionTxt": "true true"
              },
              {
                "optionTxt": "false true"
              },
              {
                "optionTxt": "true false"
              },
              {
                "optionTxt": "false false"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "What will be the output of the program?\nclass PassS \n{\n    public static void main(String [] args) \n    {\n        PassS p = new PassS();\n        p.start();\n    }\n\n    void start() \n    {\n        String s1 = \"slip\";\n        String s2 = fix(s1);\n        System.out.println(s1 + \" \" + s2);\n    }\n\n    String fix(String s1) \n    {\n        s1 = s1 + \"stream\";\n        System.out.print(s1 + \" \");\n        return \"stream\";\n    }\n}",
            "options": [
              {
                "optionTxt": "slip stream"
              },
              {
                "optionTxt": "slipstream stream"
              },
              {
                "optionTxt": "stream slip stream"
              },
              {
                "optionTxt": "slipstream slip stream"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "What will be the output of the program?\nclass BitShift \n{\n    public static void main(String [] args) \n    {\n        int x = 0x80000000;\n        System.out.print(x + \" and  \");\n        x = x >>> 31;\n        System.out.println(x);\n    }\n}",
            "options": [
              {
                "optionTxt": "-2147483648 and 1"
              },
              {
                "optionTxt": "0x80000000 and 0x00000001"
              },
              {
                "optionTxt": "-2147483648 and -1"
              },
              {
                "optionTxt": "1 and -2147483648"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "What will be the output of the program?\nclass Equals \n{\n    public static void main(String [] args) \n    {\n        int x = 100;\n        double y = 100.1;\n        boolean b = (x = y); /* Line 7 */\n        System.out.println(b);\n    }\n}",
            "options": [
              {
                "optionTxt": "true"
              },
              {
                "optionTxt": "false"
              },
              {
                "optionTxt": "Compilation fails"
              },
              {
                "optionTxt": "An exception is thrown at runtime"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "What will be the output of the program?\nclass Test \n{\n    public static void main(String [] args) \n    {\n        int x=20;\n        String sup = (x < 15) ? \"small\" : (x < 22)? \"tiny\" : \"huge\";\n        System.out.println(sup);\n    }\n}",
            "options": [
              {
                "optionTxt": "small"
              },
              {
                "optionTxt": "tiny"
              },
              {
                "optionTxt": "huge"
              },
              {
                "optionTxt": "Compilation fails"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "What will be the output of the program?\nclass Test \n{\n    public static void main(String [] args) \n    {\n        int x= 0;\n        int y= 0;\n        for (int z = 0; z < 5; z++) \n        {\n            if (( ++x > 2 ) && (++y > 2)) \n            {\n                x++;\n            }\n        }\n        System.out.println(x + \" \" + y);\n    }\n}",
            "options": [
              {
                "optionTxt": "5 2"
              },
              {
                "optionTxt": "5 3"
              },
              {
                "optionTxt": "6 3"
              },
              {
                "optionTxt": "6 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "What will be the output of the program?\nclass Test \n{\n    public static void main(String [] args) \n    {\n        int x= 0;\n        int y= 0;\n        for (int z = 0; z < 5; z++) \n        {\n            if (( ++x > 2 ) || (++y > 2)) \n            {\n                x++;\n            }\n        }\n    System.out.println(x + \" \" + y);\n    }\n}",
            "options": [
              {
                "optionTxt": "5 3"
              },
              {
                "optionTxt": "8 2"
              },
              {
                "optionTxt": "8 3"
              },
              {
                "optionTxt": "8 5"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "What will be the output of the program?\nclass Bitwise \n{\n    public static void main(String [] args) \n    {\n        int x = 11 & 9;\n        int y = x ^ 3;\n        System.out.println( y | 12 );\n    }\n}",
            "options": [
              {
                "optionTxt": "0"
              },
              {
                "optionTxt": "7"
              },
              {
                "optionTxt": "8"
              },
              {
                "optionTxt": "14"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "What will be the output of the program?\nclass SSBool \n{\n    public static void main(String [] args) \n    {\n        boolean b1 = true;\n        boolean b2 = false;\n        boolean b3 = true;\n        if ( b1 & b2 | b2 & b3 | b2 ) /* Line 8 */\n            System.out.print(\"ok \");\n        if ( b1 & b2 | b2 & b3 | b2 | b1 ) /*Line 10*/\n            System.out.println(\"dokey\");\n    }\n}",
            "options": [
              {
                "optionTxt": "ok"
              },
              {
                "optionTxt": "dokey"
              },
              {
                "optionTxt": "ok dokey"
              },
              {
                "optionTxt": "No output is produced"
              },
              {
                "optionTxt": "Compilation error"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "What will be the output of the program?\nclass SC2 \n{\n    public static void main(String [] args) \n    {\n        SC2 s = new SC2();\n        s.start();\n    }\n\n    void start() \n    {\n        int a = 3;\n        int b = 4;\n        System.out.print(\" \" + 7 + 2 + \" \");\n        System.out.print(a + b);\n        System.out.print(\" \" + a + b + \" \");\n        System.out.print(foo() + a + b + \" \");\n        System.out.println(a + b + foo());\n    }\n\n    String foo() \n    {\n        return \"foo\";\n    }\n}",
            "options": [
              {
                "optionTxt": "9 7 7 foo 7 7foo"
              },
              {
                "optionTxt": "72 34 34 foo34 34foo"
              },
              {
                "optionTxt": "9 7 7 foo34 34foo"
              },
              {
                "optionTxt": "72 7 34 foo34 7foo"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "What will be the output of the program?\nclass Test \n{\n    static int s;\n    public static void main(String [] args) \n    {\n        Test p = new Test();\n        p.start();\n        System.out.println(s);\n    }\n\n    void start() \n    {\n        int x = 7;\n        twice(x);\n        System.out.print(x + \" \");\n    }\n\n    void twice(int x) \n    {\n        x = x*2;\n        s = x;\n    }\n}",
            "options": [
              {
                "optionTxt": "7 7"
              },
              {
                "optionTxt": "7 14"
              },
              {
                "optionTxt": "14 0"
              },
              {
                "optionTxt": "14 14"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "What will be the output of the program?\nclass Two \n{\n    byte x;\n}\n\nclass PassO \n{\n    public static void main(String [] args) \n    {\n        PassO p = new PassO();\n        p.start();\n    }\n\n    void start() \n    {\n        Two t = new Two();\n        System.out.print(t.x + \" \");\n        Two t2 = fix(t);\n        System.out.println(t.x + \" \" + t2.x);\n    }\n\n    Two fix(Two tt) \n    {\n        tt.x = 42;\n        return tt;\n    }\n}",
            "options": [
              {
                "optionTxt": "null null 42"
              },
              {
                "optionTxt": "0 0 42"
              },
              {
                "optionTxt": "0 42 42"
              },
              {
                "optionTxt": "0 0 0"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "What will be the output of the program?\nclass BoolArray \n{\n    boolean [] b = new boolean[3];\n    int count = 0;\n\n    void set(boolean [] x, int i) \n    {\n        x[i] = true;\n        ++count;\n    }\n\n    public static void main(String [] args) \n    {\n        BoolArray ba = new BoolArray();\n        ba.set(ba.b, 0);\n        ba.set(ba.b, 2);\n        ba.test();\n    }\n\n    void test() \n    {\n        if ( b[0] && b[1] | b[2] )\n            count++;\n        if ( b[1] && b[(++count - 2)] )\n            count += 7;\n        System.out.println(\"count = \" + count);\n    }\n}",
            "options": [
              {
                "optionTxt": "count = 0"
              },
              {
                "optionTxt": "count = 2"
              },
              {
                "optionTxt": "count = 3"
              },
              {
                "optionTxt": "count = 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "What will be the output of the program?\npublic class Test \n{ \n    public static void leftshift(int i, int j) \n    {\n        i <<= j; \n    } \n    public static void main(String args[]) \n    {\n        int i = 4, j = 2; \n        leftshift(i, j); \n        System.out.println(i); \n    } \n}",
            "options": [
              {
                "optionTxt": "2"
              },
              {
                "optionTxt": "4"
              },
              {
                "optionTxt": "8"
              },
              {
                "optionTxt": "16"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          }
        ]
      },
      {
        "topic": "Exceptions",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What will be the output of the program?\npublic class Foo \n{  \n    public static void main(String[] args) \n    {\n        try \n        { \n            return; \n        } \n        finally \n        {\n            System.out.println( \"Finally\" ); \n        } \n    } \n}",
            "options": [
              {
                "optionTxt": "Finally"
              },
              {
                "optionTxt": "Compilation fails."
              },
              {
                "optionTxt": "The code runs with no output."
              },
              {
                "optionTxt": "An exception is thrown at runtime."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "What will be the output of the program?\ntry \n{ \n    int x = 0; \n    int y = 5 / x; \n} \ncatch (Exception e) \n{\n    System.out.println(\"Exception\"); \n} \ncatch (ArithmeticException ae) \n{\n    System.out.println(\" Arithmetic Exception\"); \n} \nSystem.out.println(\"finished\");",
            "options": [
              {
                "optionTxt": "finished"
              },
              {
                "optionTxt": "Exception"
              },
              {
                "optionTxt": "Compilation fails."
              },
              {
                "optionTxt": "Arithmetic Exception"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "What will be the output of the program?\npublic class X \n{  \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod();  \n            System.out.print(\"A\"); \n        }  \n        catch (Exception ex) \n        {\n            System.out.print(\"B\");  \n        } \n        finally \n        {\n            System.out.print(\"C\"); \n        } \n        System.out.print(\"D\"); \n    }  \n    public static void badMethod() \n    {\n        throw new Error(); /* Line 22 */\n    } \n}",
            "options": [
              {
                "optionTxt": "ABCD"
              },
              {
                "optionTxt": "Compilation fails."
              },
              {
                "optionTxt": "C is printed before exiting with an error message."
              },
              {
                "optionTxt": "BC is printed before exiting with an error message."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "What will be the output of the program?\npublic class X \n{  \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod();  \n            System.out.print(\"A\");  \n        } \n        catch (RuntimeException ex) /* Line 10 */\n        { \n            System.out.print(\"B\"); \n        } \n        catch (Exception ex1) \n        { \n            System.out.print(\"C\"); \n        } \n        finally \n        {\n            System.out.print(\"D\"); \n        } \n        System.out.print(\"E\"); \n    } \n    public static void badMethod() \n    { \n        throw new RuntimeException(); \n    } \n}",
            "options": [
              {
                "optionTxt": "BD"
              },
              {
                "optionTxt": "BCD"
              },
              {
                "optionTxt": "BDE"
              },
              {
                "optionTxt": "BCDE"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "What will be the output of the program?\npublic class RTExcept \n{\n    public static void throwit () \n    {\n        System.out.print(\"throwit \");\n        throw new RuntimeException();\n    }\n    public static void main(String [] args) \n    {\n        try \n        {\n            System.out.print(\"hello \");\n            throwit();\n        }\n        catch (Exception re ) \n        {\n            System.out.print(\"caught \");\n        }\n        finally \n        {\n            System.out.print(\"finally \");\n        }\n        System.out.println(\"after \");\n    }\n}",
            "options": [
              {
                "optionTxt": "hello throwit caught"
              },
              {
                "optionTxt": "Compilation fails"
              },
              {
                "optionTxt": "RuntimeException"
              },
              {
                "optionTxt": "hello throwit caught finally after"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "What will be the output of the program?\npublic class Test \n{  \n    public static void aMethod() throws Exception \n    {\n        try /* Line 5 */\n        {\n            throw new Exception(); /* Line 7 */\n        } \n        finally /* Line 9 */\n        {\n            System.out.print(\"finally \"); /* Line 11 */\n        } \n    } \n    public static void main(String args[]) \n    {\n        try \n        {\n            aMethod();  \n        } \n        catch (Exception e) /* Line 20 */\n        {\n            System.out.print(\"exception \"); \n        } \n        System.out.print(\"finished\"); /* Line 24 */\n    } \n}",
            "options": [
              {
                "optionTxt": "finally"
              },
              {
                "optionTxt": "exception finished"
              },
              {
                "optionTxt": "finally exception finished"
              },
              {
                "optionTxt": "Compilation fails"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "What will be the output of the program?\npublic class X \n{ \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod();  \n            System.out.print(\"A\"); \n        }  \n        catch (Exception ex) \n        {\n            System.out.print(\"B\"); \n        }  \n        finally \n        {\n            System.out.print(\"C\"); \n        }  \n        System.out.print(\"D\"); \n    }  \n    public static void badMethod() {} \n}",
            "options": [
              {
                "optionTxt": "AC"
              },
              {
                "optionTxt": "BC"
              },
              {
                "optionTxt": "ACD"
              },
              {
                "optionTxt": "ABCD"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "What will be the output of the program?\npublic class X \n{  \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod(); /* Line 7 */\n            System.out.print(\"A\"); \n        } \n        catch (Exception ex) /* Line 10 */\n        {\n            System.out.print(\"B\"); /* Line 12 */\n        } \n        finally /* Line 14 */\n        {\n            System.out.print(\"C\"); /* Line 16 */\n        }  \n        System.out.print(\"D\"); /* Line 18 */\n    } \n    public static void badMethod() \n    {\n        throw new RuntimeException(); \n    } \n}",
            "options": [
              {
                "optionTxt": "AB"
              },
              {
                "optionTxt": "BC"
              },
              {
                "optionTxt": "ABC"
              },
              {
                "optionTxt": "BCD"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "What will be the output of the program?\npublic class MyProgram \n{\n    public static void main(String args[])\n    {\n        try \n        {\n            System.out.print(\"Hello world \");\n        }\n        finally \n        {\n            System.out.println(\"Finally executing \");\n        }\n    }\n}",
            "options": [
              {
                "optionTxt": "Nothing. The program will not compile because no exceptions are specified."
              },
              {
                "optionTxt": "Nothing. The program will not compile because no catch clauses are specified."
              },
              {
                "optionTxt": "Hello world."
              },
              {
                "optionTxt": "Hello world Finally executing"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "What will be the output of the program?\nclass Exc0 extends Exception { } \nclass Exc1 extends Exc0 { } /* Line 2 */\npublic class Test \n{  \n    public static void main(String args[]) \n    { \n        try \n        {  \n            throw new Exc1(); /* Line 9 */\n        } \n        catch (Exc0 e0) /* Line 11 */\n        {\n            System.out.println(\"Ex0 caught\"); \n        } \n        catch (Exception e) \n        {\n            System.out.println(\"exception caught\");  \n        } \n    } \n}",
            "options": [
              {
                "optionTxt": "Ex0"
              },
              {
                "optionTxt": "exception caught"
              },
              {
                "optionTxt": "Compilation fails because of an error at line 2."
              },
              {
                "optionTxt": "Compilation fails because of an error at line 9."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          }
        ]
      },
      {
        "topic": "Objects and Collections",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Suppose that you would like to create an instance of a new Map that has an iteration order that is the same as the iteration order of an existing instance of a Map. Which concrete implementation of the Map interface should be used for the new instance?",
            "options": [
              {
                "optionTxt": "TreeMap"
              },
              {
                "optionTxt": "HashMap"
              },
              {
                "optionTxt": "LinkedHashMap"
              },
              {
                "optionTxt": "The answer depends on the implementation of the existing instance."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which class does not override the equals() and hashCode() methods, inheriting them directly from class Object?",
            "options": [
              {
                "optionTxt": "java.lang.String"
              },
              {
                "optionTxt": "java.lang.Double"
              },
              {
                "optionTxt": "java.lang.StringBuffer"
              },
              {
                "optionTxt": "java.lang.Character"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which collection class allows you to grow or shrink its size and provides indexed access to its elements, but whose methods are not synchronized?",
            "options": [
              {
                "optionTxt": "java.util.HashSet"
              },
              {
                "optionTxt": "java.util.LinkedHashSet"
              },
              {
                "optionTxt": "java.util.List"
              },
              {
                "optionTxt": "java.util.ArrayList"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "You need to store elements in a collection that guarantees that no duplicates are stored and all elements can be accessed in natural order. Which interface provides that capability?",
            "options": [
              {
                "optionTxt": "java.util.Map"
              },
              {
                "optionTxt": "java.util.Set"
              },
              {
                "optionTxt": "java.util.List"
              },
              {
                "optionTxt": "java.util.Collection"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which interface does java.util.Hashtable implement?",
            "options": [
              {
                "optionTxt": "Java.util.Map"
              },
              {
                "optionTxt": "Java.util.List"
              },
              {
                "optionTxt": "Java.util.HashTable"
              },
              {
                "optionTxt": "Java.util.Collection"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which interface provides the capability to store objects using a key-value pair?",
            "options": [
              {
                "optionTxt": "Java.util.Map"
              },
              {
                "optionTxt": "Java.util.Set"
              },
              {
                "optionTxt": "Java.util.List"
              },
              {
                "optionTxt": "Java.util.Collection"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which collection class allows you to associate its elements with key values, and allows you to retrieve objects in FIFO (first-in, first-out) sequence?",
            "options": [
              {
                "optionTxt": "java.util.ArrayList"
              },
              {
                "optionTxt": "java.util.LinkedHashMap"
              },
              {
                "optionTxt": "java.util.HashMap"
              },
              {
                "optionTxt": "java.util.TreeMap"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which collection class allows you to access its elements by associating a key with an element's value, and provides synchronization?",
            "options": [
              {
                "optionTxt": "java.util.SortedMap"
              },
              {
                "optionTxt": "java.util.TreeMap"
              },
              {
                "optionTxt": "java.util.TreeSet"
              },
              {
                "optionTxt": "java.util.Hashtable"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which is valid declaration of a float?",
            "options": [
              {
                "optionTxt": "float f = 1F;"
              },
              {
                "optionTxt": "float f = 1.0;"
              },
              {
                "optionTxt": "float f = \"1\";"
              },
              {
                "optionTxt": "float f = 1.0d;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "/* Missing Statement ? */\npublic class foo \n{\n    public static void main(String[]args)throws Exception \n    {\n        java.io.PrintWriter out = new java.io.PrintWriter(); \n        new java.io.OutputStreamWriter(System.out,true); \n        out.println(\"Hello\"); \n    } \n}\n\nWhat line of code should replace the missing statement to make this program compile?",
            "options": [
              {
                "optionTxt": "No statement required."
              },
              {
                "optionTxt": "import java.io.*;"
              },
              {
                "optionTxt": "include java.io.*;"
              },
              {
                "optionTxt": "import java.io.PrintWriter;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "What is the numerical range of char?",
            "options": [
              {
                "optionTxt": "0 to 32767"
              },
              {
                "optionTxt": "0 to 65535"
              },
              {
                "optionTxt": "-256 to 255"
              },
              {
                "optionTxt": "-32768 to 32767"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Which of the following are Java reserved words?\nrun\nimport\ndefault\nimplement",
            "options": [
              {
                "optionTxt": "1 and 2"
              },
              {
                "optionTxt": "2 and 3"
              },
              {
                "optionTxt": "3 and 4"
              },
              {
                "optionTxt": "2 and 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          }
        ]
      },
      {
        "topic": "Inner Classes",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which is true about an anonymous inner class?",
            "options": [
              {
                "optionTxt": "It can extend exactly one class and implement exactly one interface."
              },
              {
                "optionTxt": "It can extend exactly one class and can implement multiple interfaces."
              },
              {
                "optionTxt": "It can extend exactly one class or implement exactly one interface."
              },
              {
                "optionTxt": "It can implement multiple interfaces regardless of whether it also extends a class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "class Boo \n{\n    Boo(String s) { }\n    Boo() { }\n}\nclass Bar extends Boo \n{\n    Bar() { }\n    Bar(String s) {super(s);}\n    void zoo() \n    {\n    // insert code here\n    }\n}\n\nwhich one create an anonymous inner class from within class Bar?",
            "options": [
              {
                "optionTxt": "Boo f = new Boo(24) { };"
              },
              {
                "optionTxt": "Boo f = new Bar() { };"
              },
              {
                "optionTxt": "Bar f = new Boo(String s) { };"
              },
              {
                "optionTxt": "Boo f = new Boo.Bar(String s) { };"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which is true about a method-local inner class?",
            "options": [
              {
                "optionTxt": "It must be marked final."
              },
              {
                "optionTxt": "It can be marked abstract."
              },
              {
                "optionTxt": "It can be marked public."
              },
              {
                "optionTxt": "It can be marked static."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which statement is true about a static nested class?",
            "options": [
              {
                "optionTxt": "You must have a reference to an instance of the enclosing class in order to instantiate it."
              },
              {
                "optionTxt": "It does not have access to nonstatic members of the enclosing class."
              },
              {
                "optionTxt": "static"
              },
              {
                "optionTxt": "It must extend the enclosing class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which constructs an anonymous inner class instance?",
            "options": [
              {
                "optionTxt": "Runnable r = new Runnable() { };"
              },
              {
                "optionTxt": "Runnable r = new Runnable(public void run() { });"
              },
              {
                "optionTxt": "Runnable r = new Runnable { public void run(){}};"
              },
              {
                "optionTxt": "System.out.println(new Runnable() {public void run() { }});"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "class Foo \n{\n    class Bar{ }\n}\nclass Test \n{\n    public static void main (String [] args) \n    {\n        Foo f = new Foo();\n        /* Line 10: Missing statement ? */\n    }\n}\n\nwhich statement, inserted at line 10, creates an instance of Bar?",
            "options": [
              {
                "optionTxt": "Foo.Bar b = new Foo.Bar();"
              },
              {
                "optionTxt": "Foo.Bar b = f.new Bar();"
              },
              {
                "optionTxt": "Bar b = new f.Bar();"
              },
              {
                "optionTxt": "Bar b = f.new Bar();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "public class MyOuter \n{\n    public static class MyInner \n    {\n        public static void foo() { }\n    }\n}\n\nwhich statement, if placed in a class other than MyOuter or MyInner, instantiates an instance of the nested class?",
            "options": [
              {
                "optionTxt": "MyOuter.MyInner m = new MyOuter.MyInner();"
              },
              {
                "optionTxt": "MyOuter.MyInner mi = new MyInner();"
              },
              {
                "optionTxt": "MyOuter m = new MyOuter();\n\nMyOuter.MyInner mi = m.new MyOuter.MyInner();"
              },
              {
                "optionTxt": "MyInner mi = new MyOuter.MyInner();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          }
        ]
      },
      {
        "topic": "Threads",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the name of the method used to start a thread execution?",
            "options": [
              {
                "optionTxt": "init();"
              },
              {
                "optionTxt": "start();"
              },
              {
                "optionTxt": "run();"
              },
              {
                "optionTxt": "resume();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which two are valid constructors for Thread?\nThread(Runnable r, String name)\nThread()\nThread(int priority)\nThread(Runnable r, ThreadGroup g)\nThread(Runnable r, int priority)",
            "options": [
              {
                "optionTxt": "1 and 3"
              },
              {
                "optionTxt": "2 and 4"
              },
              {
                "optionTxt": "1 and 2"
              },
              {
                "optionTxt": "2 and 5"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which three are methods of the Object class?\nnotify();\nnotifyAll();\nisInterrupted();\nsynchronized();\ninterrupt();\nwait(long msecs);\nsleep(long msecs);\nyield();",
            "options": [
              {
                "optionTxt": "1, 2, 4"
              },
              {
                "optionTxt": "2, 4, 5"
              },
              {
                "optionTxt": "1, 2, 6"
              },
              {
                "optionTxt": "2, 3, 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "class X implements Runnable \n{ \n    public static void main(String args[]) \n    {\n        /* Missing code? */\n    } \n    public void run() {} \n}\n\nWhich of the following line of code is suitable to start a thread ?",
            "options": [
              {
                "optionTxt": "Thread t = new Thread(X);"
              },
              {
                "optionTxt": "Thread t = new Thread(X); t.start();"
              },
              {
                "optionTxt": "X run = new X(); Thread t = new Thread(run); t.start();"
              },
              {
                "optionTxt": "Thread t = new Thread(); x.run();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which cannot directly cause a thread to stop executing?",
            "options": [
              {
                "optionTxt": "SetPriority()"
              },
              {
                "optionTxt": "wait()"
              },
              {
                "optionTxt": "notify()"
              },
              {
                "optionTxt": "read()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which two of the following methods are defined in class Thread?\nstart()\nwait()\nnotify()\nrun()\nterminate()",
            "options": [
              {
                "optionTxt": "1 and 4"
              },
              {
                "optionTxt": "2 and 3"
              },
              {
                "optionTxt": "3 and 4"
              },
              {
                "optionTxt": "2 and 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which three guarantee that a thread will leave the running state?\nyield()\nwait()\nnotify()\nnotifyAll()\nsleep(1000)\naLiveThread.join()\nThread.killThread()",
            "options": [
              {
                "optionTxt": "1, 2 and 4"
              },
              {
                "optionTxt": "2, 5 and 6"
              },
              {
                "optionTxt": "3, 4 and 7"
              },
              {
                "optionTxt": "4, 5 and 7"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which of the following will directly stop the execution of a Thread?",
            "options": [
              {
                "optionTxt": "wait()"
              },
              {
                "optionTxt": "notify()"
              },
              {
                "optionTxt": "notifyall()"
              },
              {
                "optionTxt": "exits synchronized code"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which method must be defined by a class implementing the java.lang.Runnable interface?",
            "options": [
              {
                "optionTxt": "void run()"
              },
              {
                "optionTxt": "public void run()"
              },
              {
                "optionTxt": "public void start()"
              },
              {
                "optionTxt": "void run(int priority)"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which will contain the body of the thread?",
            "options": [
              {
                "optionTxt": "run();"
              },
              {
                "optionTxt": "start();"
              },
              {
                "optionTxt": "stop();"
              },
              {
                "optionTxt": "main();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Which method registers a thread in a thread scheduler?",
            "options": [
              {
                "optionTxt": "run();"
              },
              {
                "optionTxt": "construct();"
              },
              {
                "optionTxt": "start();"
              },
              {
                "optionTxt": "register();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Assume the following method is properly synchronized and called from a thread A on an object B:\n\nwait(2000);\n\nAfter calling this method, when will the thread A become a candidate to get another turn at the CPU?",
            "options": [
              {
                "optionTxt": "A"
              },
              {
                "optionTxt": "B"
              },
              {
                "optionTxt": "A"
              },
              {
                "optionTxt": "B"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which of the following will not directly cause a thread to stop?",
            "options": [
              {
                "optionTxt": "notify()"
              },
              {
                "optionTxt": "wait()"
              },
              {
                "optionTxt": "InputStream access"
              },
              {
                "optionTxt": "sleep()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Which class or interface defines the wait(), notify(),and notifyAll() methods?",
            "options": [
              {
                "optionTxt": "Object"
              },
              {
                "optionTxt": "Thread"
              },
              {
                "optionTxt": "Runnable"
              },
              {
                "optionTxt": "Class"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "public class MyRunnable implements Runnable \n{\n    public void run() \n    {\n        // some code here\n    }\n}\n\nwhich of these will create and start this thread?",
            "options": [
              {
                "optionTxt": "new Runnable(MyRunnable).start();"
              },
              {
                "optionTxt": "new Thread(MyRunnable).run();"
              },
              {
                "optionTxt": "new Thread(new MyRunnable()).start();"
              },
              {
                "optionTxt": "new MyRunnable().start();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          }
        ]
      },
      {
        "topic": "Garbage Collections",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "void start() {  \n    A a = new A(); \n    B b = new B(); \n    a.s(b);  \n    b = null; /* Line 5 */\n    a = null;  /* Line 6 */\n    System.out.println(\"start completed\"); /* Line 7 */\n} \n\nWhen is the B object, created in line 3, eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "after line 5"
              },
              {
                "optionTxt": "after line 6"
              },
              {
                "optionTxt": "after line 7"
              },
              {
                "optionTxt": "There is no way to be absolutely certain."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "class HappyGarbage01 \n{ \n    public static void main(String args[]) \n    {\n        HappyGarbage01 h = new HappyGarbage01(); \n        h.methodA(); /* Line 6 */\n    } \n    Object methodA() \n    {\n        Object obj1 = new Object(); \n        Object [] obj2 = new Object[1]; \n        obj2[0] = obj1; \n        obj1 = null; \n        return obj2[0]; \n    } \n}\n\nWhere will be the most chance of the garbage collector being invoked?",
            "options": [
              {
                "optionTxt": "After line 9"
              },
              {
                "optionTxt": "After line 10"
              },
              {
                "optionTxt": "After line 11"
              },
              {
                "optionTxt": "methodA()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "class Bar { } \nclass Test \n{  \n    Bar doBar() \n    {\n        Bar b = new Bar(); /* Line 6 */\n        return b; /* Line 7 */\n    } \n    public static void main (String args[]) \n    { \n        Test t = new Test();  /* Line 11 */\n        Bar newBar = t.doBar();  /* Line 12 */\n        System.out.println(\"newBar\"); \n        newBar = new Bar(); /* Line 14 */\n        System.out.println(\"finishing\"); /* Line 15 */\n    } \n}\n\nAt what point is the Bar object, created on line 6, eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "after line 12"
              },
              {
                "optionTxt": "after line 14"
              },
              {
                "optionTxt": "doBar()"
              },
              {
                "optionTxt": "main()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "class Test \n{  \n    private Demo d; \n    void start() \n    {  \n        d = new Demo(); \n        this.takeDemo(d); /* Line 7 */\n    } /* Line 8 */\n    void takeDemo(Demo demo) \n    { \n        demo = null;  \n        demo = new Demo(); \n    } \n}\n\nWhen is the Demo object eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "After line 7"
              },
              {
                "optionTxt": "After line 8"
              },
              {
                "optionTxt": "start()"
              },
              {
                "optionTxt": "When the instance running this code is made eligible for garbage collection."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "public class X \n{\n    public static void main(String [] args) \n    {\n        X x = new X();\n        X x2 = m1(x); /* Line 6 */\n        X x4 = new X();\n        x2 = x4; /* Line 8 */\n        doComplexStuff();\n    }\n    static X m1(X mx) \n    {\n        mx = new X();\n        return mx;\n    }\n}\n\nAfter line 8 runs. how many objects are eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "0"
              },
              {
                "optionTxt": "1"
              },
              {
                "optionTxt": "2"
              },
              {
                "optionTxt": "3"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "public Object m() \n{  \n    Object o = new Float(3.14F); \n    Object [] oa = new Object[l];\n    oa[0] = o; /* Line 5 */\n    o = null;  /* Line 6 */\n    oa[0] = null; /* Line 7 */\n    return o; /* Line 8 */\n}\n\nWhen is the Float object, created in line 3, eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "just after line 5"
              },
              {
                "optionTxt": "just after line 6"
              },
              {
                "optionTxt": "just after line 7"
              },
              {
                "optionTxt": "just after line 8"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "class X2 \n{\n    public X2 x;\n    public static void main(String [] args) \n    {\n        X2 x2 = new X2();  /* Line 6 */\n        X2 x3 = new X2();  /* Line 7 */\n        x2.x = x3;\n        x3.x = x2;\n        x2 = new X2();\n        x3 = x2; /* Line 11 */\n        doComplexStuff();\n    }\n}\n\nafter line 11 runs, how many objects are eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "0"
              },
              {
                "optionTxt": "1"
              },
              {
                "optionTxt": "2"
              },
              {
                "optionTxt": "3"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "What allows the programmer to destroy an object x?",
            "options": [
              {
                "optionTxt": "x.delete()"
              },
              {
                "optionTxt": "x.finalize()"
              },
              {
                "optionTxt": "Runtime.getRuntime().gc()"
              },
              {
                "optionTxt": "Only the garbage collection system can destroy an object."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "public Object m() \n{  \n    Object o = new Float(3.14F); \n    Object [] oa = new Object[l];\n    oa[0] = o; /* Line 5 */\n    o = null;  /* Line 6 */\n    oa[0] = null; /* Line 7 */\n    return o; /* Line 8 */\n}\n\nWhen is the Float object, created in line 3, eligible for garbage collection?\nLanguage: java\npublic Object m() \n{  \n    Object o = new Float(3.14F); \n    Object [] oa = new Object[l];\n    oa[0] = o; /* Line 5 */\n    o = null;  /* Line 6 */\n    oa[0] = null; /* Line 7 */\n    return o; /* Line 8 */\n}",
            "options": [
              {
                "optionTxt": "just after line 5"
              },
              {
                "optionTxt": "just after line 6"
              },
              {
                "optionTxt": "just after line 7"
              },
              {
                "optionTxt": "just after line 8"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "class X2 \n{\n    public X2 x;\n    public static void main(String [] args) \n    {\n        X2 x2 = new X2();  /* Line 6 */\n        X2 x3 = new X2();  /* Line 7 */\n        x2.x = x3;\n        x3.x = x2;\n        x2 = new X2();\n        x3 = x2; /* Line 11 */\n        doComplexStuff();\n    }\n}\n\nafter line 11 runs, how many objects are eligible for garbage collection?\nLanguage: java\nclass X2 \n{\n    public X2 x;\n    public static void main(String [] args) \n    {\n        X2 x2 = new X2();  /* Line 6 */\n        X2 x3 = new X2();  /* Line 7 */\n        x2.x = x3;\n        x3.x = x2;\n        x2 = new X2();\n        x3 = x2; /* Line 11 */\n        doComplexStuff();\n    }\n}",
            "options": [
              {
                "optionTxt": "0"
              },
              {
                "optionTxt": "1"
              },
              {
                "optionTxt": "2"
              },
              {
                "optionTxt": "3"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "What allows the programmer to destroy an object x?\nLanguage: \n",
            "options": [
              {
                "optionTxt": "x.delete()"
              },
              {
                "optionTxt": "x.finalize()"
              },
              {
                "optionTxt": "Runtime.getRuntime().gc()"
              },
              {
                "optionTxt": "Only the garbage collection system can destroy an object."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          }
        ]
      }
    ]
  }
]
