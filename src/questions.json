[
  {
    "title": "C++",
    "topics": [
      {
        "topic": "Function",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which of the following function prototype is perfectly acceptable?",
            "options": [
              {
                "optionTxt": "int Function(int Tmp = Show());"
              },
              {
                "optionTxt": "float Function(int Tmp = Show(int, float));"
              },
              {
                "optionTxt": "Both A and B."
              },
              {
                "optionTxt": "float = Show(int, float) Function(Tmp);"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "C++ enables to define functions that take constants as an argument."
              },
              {
                "optionTxt": "We cannot change the argument of the function that that are declared as constant."
              },
              {
                "optionTxt": "Both A and B."
              },
              {
                "optionTxt": "We cannot use the constant while defining the function."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Overloaded functions can have at most one default argument."
              },
              {
                "optionTxt": "An overloaded function cannot have default argument."
              },
              {
                "optionTxt": "All arguments of an overloaded function can be default."
              },
              {
                "optionTxt": "A function if overloaded more than once cannot have default argument."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Two functions having same number of argument, order and type of argument can be overloaded if both functions do not have any default argument."
              },
              {
                "optionTxt": "Overloaded function must have default arguments."
              },
              {
                "optionTxt": "Overloaded function must have default arguments starting from the left of argument list."
              },
              {
                "optionTxt": "A function can be overloaded more than once."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which of the following statement will be correct if the function has three arguments passed to it?",
            "options": [
              {
                "optionTxt": "The trailing argument will be the default argument."
              },
              {
                "optionTxt": "The first argument will be the default argument."
              },
              {
                "optionTxt": "The middle argument will be the default argument."
              },
              {
                "optionTxt": "All the argument will be the default argument."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which of the following statement is incorrect?",
            "options": [
              {
                "optionTxt": "Default arguments can be provided for pointers to functions."
              },
              {
                "optionTxt": "A function can have all its arguments as default."
              },
              {
                "optionTxt": "Default argument cannot be provided for pointers to functions."
              },
              {
                "optionTxt": "A default argument cannot be redefined in later declaration."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Constructors can have default parameters."
              },
              {
                "optionTxt": "Constructors cannot have default parameters."
              },
              {
                "optionTxt": "Constructors cannot have more than one default parameter."
              },
              {
                "optionTxt": "Constructors can have at most five default parameters."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which of the following function / type of function cannot be overloaded?",
            "options": [
              {
                "optionTxt": "Member function"
              },
              {
                "optionTxt": "Static function"
              },
              {
                "optionTxt": "Virtual function"
              },
              {
                "optionTxt": "Both B and C"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which of the following function declaration is/are incorrect?",
            "options": [
              {
                "optionTxt": "int Sum(int a, int b = 2, int c = 3);"
              },
              {
                "optionTxt": "int Sum(int a = 5, int b);"
              },
              {
                "optionTxt": "int Sum(int a = 0, int b, int c = 3);"
              },
              {
                "optionTxt": "Both B and C are incorrect."
              },
              {
                "optionTxt": "All are correct."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which of the following statement is incorrect?",
            "options": [
              {
                "optionTxt": "The default value for an argument can be a global constant."
              },
              {
                "optionTxt": "The default arguments are given in the function prototype."
              },
              {
                "optionTxt": "Compiler uses the prototype information to build a call, not the function definition."
              },
              {
                "optionTxt": "The default arguments are given in the function prototype and should be repeated in the function definition."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Where the default value of parameter have to be specified?",
            "options": [
              {
                "optionTxt": "Function call"
              },
              {
                "optionTxt": "Function definition"
              },
              {
                "optionTxt": "Function prototype"
              },
              {
                "optionTxt": "Both B or C"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "The default value for an argument cannot be function call."
              },
              {
                "optionTxt": "C++ allows the redefinition of a default parameter."
              },
              {
                "optionTxt": "Both A and B."
              },
              {
                "optionTxt": "C++ does not allow the redefinition of a default parameter."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Only one parameter of a function can be a default parameter."
              },
              {
                "optionTxt": "Minimum one parameter of a function must be a default parameter."
              },
              {
                "optionTxt": "All the parameters of a function can be default parameters."
              },
              {
                "optionTxt": "No parameter of a function can be default."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Which of the following statement is incorrect?",
            "options": [
              {
                "optionTxt": "A default argument is checked for type at the time of declaration and evaluated at the time of call."
              },
              {
                "optionTxt": "We can provide a default value to a particular argument in the middle of an argument list."
              },
              {
                "optionTxt": "We cannot provide a default value to a particular argument in the middle of an argument list."
              },
              {
                "optionTxt": "Default arguments are useful in situations where some arguments always have the same value."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Overloaded functions can accept same number of arguments."
              },
              {
                "optionTxt": "Overloaded functions always return value of same data type."
              },
              {
                "optionTxt": "Overloaded functions can accept only same number and same type of arguments."
              },
              {
                "optionTxt": "Overloaded functions can accept only different number and different type of arguments."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "Which of the following function / types of function cannot have default parameters?",
            "options": [
              {
                "optionTxt": "Member function of class"
              },
              {
                "optionTxt": "main()"
              },
              {
                "optionTxt": "Member function of structure"
              },
              {
                "optionTxt": "Both B and C"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "The order of the default argument will be right to left."
              },
              {
                "optionTxt": "The order of the default argument will be left to right."
              },
              {
                "optionTxt": "The order of the default argument will be alternate."
              },
              {
                "optionTxt": "The order of the default argument will be random."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          }
        ]
      },
      {
        "topic": "OOPs Concept",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which of the following type of class allows only one object of it to be created?",
            "options": [
              {
                "optionTxt": "Virtual class"
              },
              {
                "optionTxt": "Abstract class"
              },
              {
                "optionTxt": "Singleton class"
              },
              {
                "optionTxt": "Friend class"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which of the following is not a type of constructor?",
            "options": [
              {
                "optionTxt": "Copy constructor"
              },
              {
                "optionTxt": "Friend constructor"
              },
              {
                "optionTxt": "Default constructor"
              },
              {
                "optionTxt": "Parameterized constructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which of the following statements is correct?",
            "options": [
              {
                "optionTxt": "Base class pointer cannot point to derived class."
              },
              {
                "optionTxt": "Derived class pointer cannot point to base class."
              },
              {
                "optionTxt": "Pointer to derived class cannot be created."
              },
              {
                "optionTxt": "Pointer to base class cannot be created."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which of the following is not the member of class?",
            "options": [
              {
                "optionTxt": "Static function"
              },
              {
                "optionTxt": "Friend function"
              },
              {
                "optionTxt": "Const function"
              },
              {
                "optionTxt": "Virtual function"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which of the following concepts means determining at runtime what method to invoke?",
            "options": [
              {
                "optionTxt": "Data hiding"
              },
              {
                "optionTxt": "Dynamic Typing"
              },
              {
                "optionTxt": "Dynamic binding"
              },
              {
                "optionTxt": "Dynamic loading"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which of the following term is used for a function defined inside a class?",
            "options": [
              {
                "optionTxt": "Member Variable"
              },
              {
                "optionTxt": "Member function"
              },
              {
                "optionTxt": "Class function"
              },
              {
                "optionTxt": "Classic function"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following concept of oops allows compiler to insert arguments in a function call if it is not specified?",
            "options": [
              {
                "optionTxt": "Call by value"
              },
              {
                "optionTxt": "Call by reference"
              },
              {
                "optionTxt": "Default arguments"
              },
              {
                "optionTxt": "Call by pointer"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "How many instances of an abstract class can be created?",
            "options": [
              {
                "optionTxt": "1"
              },
              {
                "optionTxt": "5"
              },
              {
                "optionTxt": "13"
              },
              {
                "optionTxt": "0"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which of the following cannot be friend?",
            "options": [
              {
                "optionTxt": "Function"
              },
              {
                "optionTxt": "Class"
              },
              {
                "optionTxt": "Object"
              },
              {
                "optionTxt": "Operator function"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which of the following concepts of OOPS means exposing only necessary information to client?",
            "options": [
              {
                "optionTxt": "Encapsulation"
              },
              {
                "optionTxt": "Abstraction"
              },
              {
                "optionTxt": "Data hiding"
              },
              {
                "optionTxt": "Data binding"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Why reference is not same as a pointer?",
            "options": [
              {
                "optionTxt": "A reference can never be null."
              },
              {
                "optionTxt": "A reference once established cannot be changed."
              },
              {
                "optionTxt": "Reference doesn't need an explicit dereferencing mechanism."
              },
              {
                "optionTxt": "All of the above."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "cout is a/an __________ .",
            "options": [
              {
                "optionTxt": "operator"
              },
              {
                "optionTxt": "function"
              },
              {
                "optionTxt": "object"
              },
              {
                "optionTxt": "macro"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which of the following concepts provides facility of using object of one class inside another class?",
            "options": [
              {
                "optionTxt": "Encapsulation"
              },
              {
                "optionTxt": "Abstraction"
              },
              {
                "optionTxt": "Composition"
              },
              {
                "optionTxt": "Inheritance"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "How many types of polymorphisms are supported by C++?",
            "options": [
              {
                "optionTxt": "1"
              },
              {
                "optionTxt": "2"
              },
              {
                "optionTxt": "3"
              },
              {
                "optionTxt": "4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "Which of the following is an abstract data type?",
            "options": [
              {
                "optionTxt": "int"
              },
              {
                "optionTxt": "double"
              },
              {
                "optionTxt": "string"
              },
              {
                "optionTxt": "Class"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "Which of the following concepts means adding new components to a program as it runs?",
            "options": [
              {
                "optionTxt": "Data hiding"
              },
              {
                "optionTxt": "Dynamic typing"
              },
              {
                "optionTxt": "Dynamic binding"
              },
              {
                "optionTxt": "Dynamic loading"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A constructor is called at the time of declaration of an object."
              },
              {
                "optionTxt": "A constructor is called at the time of use of an object."
              },
              {
                "optionTxt": "A constructor is called at the time of declaration of a class."
              },
              {
                "optionTxt": "A constructor is called at the time of use of a class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "18.",
            "questionText": "Which of the following correctly describes overloading of functions?",
            "options": [
              {
                "optionTxt": "Virtual polymorphism"
              },
              {
                "optionTxt": "Transient polymorphism"
              },
              {
                "optionTxt": "Ad-hoc polymorphism"
              },
              {
                "optionTxt": "Pseudo polymorphism"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "19.",
            "questionText": "Which of the following approach is adapted by C++?",
            "options": [
              {
                "optionTxt": "Top-down"
              },
              {
                "optionTxt": "Bottom-up"
              },
              {
                "optionTxt": "Right-left"
              },
              {
                "optionTxt": "Left-right"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "20.",
            "questionText": "Which of the following is correct about function overloading?",
            "options": [
              {
                "optionTxt": "The types of arguments are different."
              },
              {
                "optionTxt": "The order of argument is different."
              },
              {
                "optionTxt": "The number of argument is same."
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "21.",
            "questionText": "Which of the following is correct about class and structure?",
            "options": [
              {
                "optionTxt": "class can have member functions while structure cannot."
              },
              {
                "optionTxt": "class data members are public by default while that of structure are private."
              },
              {
                "optionTxt": "Pointer to structure or classes cannot be declared."
              },
              {
                "optionTxt": "class data members are private by default while that of structure are public by default."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "22.",
            "questionText": "Which of the following concepts means wrapping up of data and functions together?",
            "options": [
              {
                "optionTxt": "Abstraction"
              },
              {
                "optionTxt": "Encapsulation"
              },
              {
                "optionTxt": "Inheritance"
              },
              {
                "optionTxt": "Polymorphism"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "23.",
            "questionText": "Which of the following concepts means waiting until runtime to determine which function to call?",
            "options": [
              {
                "optionTxt": "Data hiding"
              },
              {
                "optionTxt": "Dynamic casting"
              },
              {
                "optionTxt": "Dynamic binding"
              },
              {
                "optionTxt": "Dynamic loading"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "24.",
            "questionText": "How \"Late binding\" is implemented in C++?",
            "options": [
              {
                "optionTxt": "Using C++ tables"
              },
              {
                "optionTxt": "Using Virtual tables"
              },
              {
                "optionTxt": "Using Indexed virtual tables"
              },
              {
                "optionTxt": "Using polymorphic tables"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "25.",
            "questionText": "Which of the following operator is overloaded for object cout?",
            "options": [
              {
                "optionTxt": "&gt;&gt;"
              },
              {
                "optionTxt": "&lt;&lt;"
              },
              {
                "optionTxt": "+"
              },
              {
                "optionTxt": "="
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "26.",
            "questionText": "Which of the following is the correct class of the object cout?",
            "options": [
              {
                "optionTxt": "iostream"
              },
              {
                "optionTxt": "istream"
              },
              {
                "optionTxt": "ostream"
              },
              {
                "optionTxt": "ifstream"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "27.",
            "questionText": "Which of the following cannot be used with the keyword virtual?",
            "options": [
              {
                "optionTxt": "class"
              },
              {
                "optionTxt": "member functions"
              },
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "destructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "28.",
            "questionText": "Which of the following functions are performed by a constructor?",
            "options": [
              {
                "optionTxt": "Construct a new class"
              },
              {
                "optionTxt": "Construct a new object"
              },
              {
                "optionTxt": "Construct a new function"
              },
              {
                "optionTxt": "Initialize objects"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "29.",
            "questionText": "Which of the following problem causes an exception?",
            "options": [
              {
                "optionTxt": "main()"
              },
              {
                "optionTxt": "A problem in calling function."
              },
              {
                "optionTxt": "A syntax error."
              },
              {
                "optionTxt": "A run-time error."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "30.",
            "questionText": "Which one of the following options is correct about the statement given below? The compiler checks the type of reference in the object and not the type of object.",
            "options": [
              {
                "optionTxt": "Inheritance"
              },
              {
                "optionTxt": "Polymorphism"
              },
              {
                "optionTxt": "Abstraction"
              },
              {
                "optionTxt": "Encapsulation"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "31.",
            "questionText": "Which of the following is the correct way of declaring a function as constant?",
            "options": [
              {
                "optionTxt": "const int ShowData(void) { /* statements */ }"
              },
              {
                "optionTxt": "int const ShowData(void) { /* statements */ }"
              },
              {
                "optionTxt": "int ShowData(void) const { /* statements */ }"
              },
              {
                "optionTxt": "Both A and B"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "32.",
            "questionText": "Which of the following concepts is used to implement late binding?",
            "options": [
              {
                "optionTxt": "Virtual function"
              },
              {
                "optionTxt": "Operator function"
              },
              {
                "optionTxt": "Const function"
              },
              {
                "optionTxt": "Static function"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "33.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "C++ allows static type checking."
              },
              {
                "optionTxt": "C++ allows dynamic type checking."
              },
              {
                "optionTxt": "C++ allows static member function be of type const."
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "34.",
            "questionText": "Which of the following factors supports the statement that reusability is a desirable feature of a language?",
            "options": [
              {
                "optionTxt": "It decreases the testing time."
              },
              {
                "optionTxt": "It lowers the maintenance cost."
              },
              {
                "optionTxt": "It reduces the compilation time."
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "35.",
            "questionText": "Which of the following ways are legal to access a class data member using this pointer?",
            "options": [
              {
                "optionTxt": "this-&gt;x"
              },
              {
                "optionTxt": "this.x"
              },
              {
                "optionTxt": "*this.x"
              },
              {
                "optionTxt": "*this-x"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "36.",
            "questionText": "Which of the following is a mechanism of static polymorphism?",
            "options": [
              {
                "optionTxt": "Operator overloading"
              },
              {
                "optionTxt": "Function overloading"
              },
              {
                "optionTxt": "Templates"
              },
              {
                "optionTxt": "All of the above"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "37.",
            "questionText": "Which of the following is correct about the statements given below?\nAll operators can be overloaded in C++.\nWe can change the basic meaning of an operator in C++.",
            "options": [
              {
                "optionTxt": "Only I is true."
              },
              {
                "optionTxt": "Both I and II are false."
              },
              {
                "optionTxt": "Only II is true."
              },
              {
                "optionTxt": "Both I and II are true."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "38.",
            "questionText": "What happens if the base and derived class contains definition of a function with same prototype?",
            "options": [
              {
                "optionTxt": "Compiler reports an error on compilation."
              },
              {
                "optionTxt": "Only base class function will get called irrespective of object."
              },
              {
                "optionTxt": "Only derived class function will get called irrespective of object."
              },
              {
                "optionTxt": "Base class object will call base class function and derived class object will call derived class function."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "39.",
            "questionText": "Which of the following are available only in the class hierarchy chain?",
            "options": [
              {
                "optionTxt": "Public data members"
              },
              {
                "optionTxt": "Private data members"
              },
              {
                "optionTxt": "Protected data members"
              },
              {
                "optionTxt": "Member functions"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "40.",
            "questionText": "Which of the following is not a type of inheritance?",
            "options": [
              {
                "optionTxt": "Multiple"
              },
              {
                "optionTxt": "Multilevel"
              },
              {
                "optionTxt": "Distributive"
              },
              {
                "optionTxt": "Hierarchical"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "41.",
            "questionText": "Which of the following operators cannot be overloaded?",
            "options": [
              {
                "optionTxt": "[]"
              },
              {
                "optionTxt": "-&gt;"
              },
              {
                "optionTxt": "?:"
              },
              {
                "optionTxt": "*"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "42.",
            "questionText": "In which of the following a virtual call is resolved at the time of compilation?",
            "options": [
              {
                "optionTxt": "From inside the destructor."
              },
              {
                "optionTxt": "From inside the constructor."
              },
              {
                "optionTxt": "main()"
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "43.",
            "questionText": "Which of the following statements regarding inline functions is correct?",
            "options": [
              {
                "optionTxt": "It speeds up execution."
              },
              {
                "optionTxt": "It slows down execution."
              },
              {
                "optionTxt": "It increases the code size."
              },
              {
                "optionTxt": "Both A and C."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "44.",
            "questionText": "Which one of the following is the correct way to declare a pure virtual function?",
            "options": [
              {
                "optionTxt": "virtual void Display(void){0};"
              },
              {
                "optionTxt": "virtual void Display = 0;"
              },
              {
                "optionTxt": "virtual void Display(void) = 0;"
              },
              {
                "optionTxt": "void Display(void) = 0;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "45.",
            "questionText": "Which of the following header file includes definition of cin and cout?",
            "options": [
              {
                "optionTxt": "istream.h"
              },
              {
                "optionTxt": "ostream.h"
              },
              {
                "optionTxt": "iomanip.h"
              },
              {
                "optionTxt": "iostream.h"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "46.",
            "questionText": "Which of the following keyword is used to overload an operator?",
            "options": [
              {
                "optionTxt": "overload"
              },
              {
                "optionTxt": "operator"
              },
              {
                "optionTxt": "friend"
              },
              {
                "optionTxt": "override"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "47.",
            "questionText": "What will happen if a class is not having any name?",
            "options": [
              {
                "optionTxt": "It cannot have a destructor."
              },
              {
                "optionTxt": "It cannot have a constructor."
              },
              {
                "optionTxt": "It is not allowed."
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "48.",
            "questionText": "Which inheritance type is used in the class given below?\nclass A : public X, public Y\n{}",
            "options": [
              {
                "optionTxt": "Multilevel inheritance"
              },
              {
                "optionTxt": "Multiple inheritance"
              },
              {
                "optionTxt": "Hybrid inheritance"
              },
              {
                "optionTxt": "Hierarchical Inheritance"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "49.",
            "questionText": "Which one of the following is correct about the statements given below?\nAll function calls are resolved at compile-time in Procedure Oriented Programming.\nAll function calls are resolved at compile-time in OOPS.",
            "options": [
              {
                "optionTxt": "Only II is correct."
              },
              {
                "optionTxt": "Both I and II are correct."
              },
              {
                "optionTxt": "Only I is correct."
              },
              {
                "optionTxt": "Both I and II are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "50.",
            "questionText": "Which of the following is an invalid visibility label while inheriting a class?",
            "options": [
              {
                "optionTxt": "public"
              },
              {
                "optionTxt": "private"
              },
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "friend"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "51.",
            "questionText": "Which one of the following options is correct?",
            "options": [
              {
                "optionTxt": "Friend function can access public data members of the class."
              },
              {
                "optionTxt": "Friend function can access protected data members of the class."
              },
              {
                "optionTxt": "Friend function can access private data members of the class."
              },
              {
                "optionTxt": "All of the above."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "52.",
            "questionText": "Which of the following statements is correct in C++?",
            "options": [
              {
                "optionTxt": "Classes cannot have data as protected members."
              },
              {
                "optionTxt": "Structures can have functions as members."
              },
              {
                "optionTxt": "Class members are public by default."
              },
              {
                "optionTxt": "Structure members are private by default."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "53.",
            "questionText": "Which of the following is used to make an abstract class?",
            "options": [
              {
                "optionTxt": "Declaring it abstract using static keyword."
              },
              {
                "optionTxt": "Declaring it abstract using virtual keyword."
              },
              {
                "optionTxt": "Making at least one member function as virtual function."
              },
              {
                "optionTxt": "Making at least one member function as pure virtual function."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "54.",
            "questionText": "Which of the following access specifier is used as a default in a class definition?",
            "options": [
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "public"
              },
              {
                "optionTxt": "private"
              },
              {
                "optionTxt": "friend"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "55.",
            "questionText": "What is correct about the static data member of a class?",
            "options": [
              {
                "optionTxt": "A static member function can access only static data members of a class."
              },
              {
                "optionTxt": "A static data member is shared among all the object of the class."
              },
              {
                "optionTxt": "main()"
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "56.",
            "questionText": "Which of the following provides a reuse mechanism?",
            "options": [
              {
                "optionTxt": "Abstraction"
              },
              {
                "optionTxt": "Inheritance"
              },
              {
                "optionTxt": "Dynamic binding"
              },
              {
                "optionTxt": "Encapsulation"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "57.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Class is an instance of object."
              },
              {
                "optionTxt": "Object is an instance of a class."
              },
              {
                "optionTxt": "Class is an instance of data type."
              },
              {
                "optionTxt": "Object is an instance of data type."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          }
        ]
      },
      {
        "topic": "Objects and Classes",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What happens when we try to compile the class definition in following code snippet?\nclass Birds {};\nclass Peacock : protected Birds {};",
            "options": [
              {
                "optionTxt": "It will not compile because class body of Birds is not defined."
              },
              {
                "optionTxt": "It will not compile because class body of Peacock is not defined."
              },
              {
                "optionTxt": "It will not compile because a class cannot be protectedly inherited from other class."
              },
              {
                "optionTxt": "It will compile succesfully."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which of the following statements is incorrect?",
            "options": [
              {
                "optionTxt": "Friend keyword can be used in the class to allow access to another class."
              },
              {
                "optionTxt": "Friend keyword can be used for a function in the public section of a class."
              },
              {
                "optionTxt": "Friend keyword can be used for a function in the private section of a class."
              },
              {
                "optionTxt": "main()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which of the following statement is correct regarding destructor of base class?",
            "options": [
              {
                "optionTxt": "Destructor of base class should always be static."
              },
              {
                "optionTxt": "Destructor of base class should always be virtual."
              },
              {
                "optionTxt": "Destructor of base class should not be virtual."
              },
              {
                "optionTxt": "Destructor of base class should always be private."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which of the following two entities (reading from Left to Right) can be connected by the dot operator?",
            "options": [
              {
                "optionTxt": "A class member and a class object."
              },
              {
                "optionTxt": "A class object and a class."
              },
              {
                "optionTxt": "A class and a member of that class."
              },
              {
                "optionTxt": "A class object and a member of that class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "How can we make a class abstract?",
            "options": [
              {
                "optionTxt": "By making all member functions constant."
              },
              {
                "optionTxt": "By making at least one member function as pure virtual function."
              },
              {
                "optionTxt": "By declaring it abstract using the static keyword."
              },
              {
                "optionTxt": "By declaring it abstract using the virtual keyword."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which of the following statements is correct when a class is inherited publicly?",
            "options": [
              {
                "optionTxt": "Public members of the base class become protected members of derived class."
              },
              {
                "optionTxt": "Public members of the base class become private members of derived class."
              },
              {
                "optionTxt": "Private members of the base class become protected members of derived class."
              },
              {
                "optionTxt": "Public members of the base class become public members of derived class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following statements is correct about the constructors and destructors?",
            "options": [
              {
                "optionTxt": "Destructors can take arguments but constructors cannot."
              },
              {
                "optionTxt": "Constructors can take arguments but destructors cannot."
              },
              {
                "optionTxt": "Destructors can be overloaded but constructors cannot be overloaded."
              },
              {
                "optionTxt": "Constructors and destructors can both return a value."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which of the following access specifies is used in a class definition by default?",
            "options": [
              {
                "optionTxt": "Protected"
              },
              {
                "optionTxt": "Public"
              },
              {
                "optionTxt": "Private"
              },
              {
                "optionTxt": "Friend"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which of the following statement is correct with respect to the use of friend keyword inside a class?",
            "options": [
              {
                "optionTxt": "A private data member can be declared as a friend."
              },
              {
                "optionTxt": "A class may be declared as a friend."
              },
              {
                "optionTxt": "An object may be declared as a friend."
              },
              {
                "optionTxt": "We can use friend keyword as a class name."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which of the following keywords is used to control access to a class member?",
            "options": [
              {
                "optionTxt": "Default"
              },
              {
                "optionTxt": "Break"
              },
              {
                "optionTxt": "Protected"
              },
              {
                "optionTxt": "Asm"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Which of the following can access private data members or member functions of a class?",
            "options": [
              {
                "optionTxt": "Any function in the program."
              },
              {
                "optionTxt": "All global functions in the program."
              },
              {
                "optionTxt": "Any member function of that class."
              },
              {
                "optionTxt": "Only public member functions of that class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Which of the following type of data member can be shared by all instances of its class?",
            "options": [
              {
                "optionTxt": "Public"
              },
              {
                "optionTxt": "Inherited"
              },
              {
                "optionTxt": "Static"
              },
              {
                "optionTxt": "Friend"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which of the following also known as an instance of a class?",
            "options": [
              {
                "optionTxt": "Friend Functions"
              },
              {
                "optionTxt": "Object"
              },
              {
                "optionTxt": "Member Functions"
              },
              {
                "optionTxt": "Member Variables"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Constructor is executed when _____.",
            "options": [
              {
                "optionTxt": "an object is created"
              },
              {
                "optionTxt": "an object is used"
              },
              {
                "optionTxt": "a class is declared"
              },
              {
                "optionTxt": "an object goes out of scope."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "Which of the following statements about virtual base classes is correct?",
            "options": [
              {
                "optionTxt": "It is used to provide multiple inheritance."
              },
              {
                "optionTxt": "It is used to avoid multiple copies of base class in derived class."
              },
              {
                "optionTxt": "It is used to allow multiple copies of base class in a derived class."
              },
              {
                "optionTxt": "It allows private members of the base class to be inherited in the derived class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "How many objects can be created from an abstract class?",
            "options": [
              {
                "optionTxt": "Zero"
              },
              {
                "optionTxt": "One"
              },
              {
                "optionTxt": "Two"
              },
              {
                "optionTxt": "As many as we want"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "What does the class definitions in following code represent?\nclass Bike\n{\n    Engine objEng;\n};\nclass Engine\n{\n    float CC;\n};",
            "options": [
              {
                "optionTxt": "kind of relationship"
              },
              {
                "optionTxt": "has a relationship"
              },
              {
                "optionTxt": "Inheritance"
              },
              {
                "optionTxt": "Both A and B"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "18.",
            "questionText": "Which of the following statements is correct when a class is inherited privately?",
            "options": [
              {
                "optionTxt": "Public members of the base class become protected members of derived class."
              },
              {
                "optionTxt": "Public members of the base class become private members of derived class."
              },
              {
                "optionTxt": "Private members of the base class become private members of derived class."
              },
              {
                "optionTxt": "Public members of the base class become public members of derived class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "19.",
            "questionText": "Which of the following statements is correct?",
            "options": [
              {
                "optionTxt": "Data items in a class must be private."
              },
              {
                "optionTxt": "Both data and functions can be either private or public."
              },
              {
                "optionTxt": "Member functions of a class must be private."
              },
              {
                "optionTxt": "Constructor of a class cannot be private."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "20.",
            "questionText": "What does a class hierarchy depict?",
            "options": [
              {
                "optionTxt": "It shows the relationships between the classes in the form of an organization chart."
              },
              {
                "optionTxt": "It describes \"has a\" relationships."
              },
              {
                "optionTxt": "It describes \"kind of\" relationships."
              },
              {
                "optionTxt": "It shows the same relationship as a family tree."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "21.",
            "questionText": "Which of the following can be overloaded?",
            "options": [
              {
                "optionTxt": "Object"
              },
              {
                "optionTxt": "Functions"
              },
              {
                "optionTxt": "Operators"
              },
              {
                "optionTxt": "Both B and C"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "22.",
            "questionText": "Which of the following means \"The use of an object of one class in definition of another class\"?",
            "options": [
              {
                "optionTxt": "Encapsulation"
              },
              {
                "optionTxt": "Inheritance"
              },
              {
                "optionTxt": "Composition"
              },
              {
                "optionTxt": "Abstraction"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "23.",
            "questionText": "Which of the following is the only technical difference between structures and classes in C++?",
            "options": [
              {
                "optionTxt": "Member function and data are by default protected in structures but private in classes."
              },
              {
                "optionTxt": "Member function and data are by default private in structures but public in classes."
              },
              {
                "optionTxt": "Member function and data are by default public in structures but private in classes."
              },
              {
                "optionTxt": "Member function and data are by default public in structures but protected in classes."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "24.",
            "questionText": "Which of the following statements is correct about the program given below?\nclass Bix\n{\n    public:\n    static void MyFunction();\n};\nint main()\n{\n    void(*ptr)() = &Bix::MyFunction;\n    return 0; \n}",
            "options": [
              {
                "optionTxt": "The program reports an error as pointer to member function cannot be defined outside the definition of class."
              },
              {
                "optionTxt": "The program reports an error as pointer to static member function cannot be defined."
              },
              {
                "optionTxt": "The program reports an error as pointer to member function cannot be defined without object."
              },
              {
                "optionTxt": "The program reports linker error."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "25.",
            "questionText": "Which of the following statements are correct for a static member function?\nIt can access only other static members of its class.\nIt can be called using the class name, instead of objects.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          }
        ]
      },
      {
        "topic": "Constructors and Destructors",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "A constructor that accepts __________ parameters is called the default constructor.",
            "options": [
              {
                "optionTxt": "one"
              },
              {
                "optionTxt": "two"
              },
              {
                "optionTxt": "no"
              },
              {
                "optionTxt": "three"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "What happens when a class with parameterized constructors and having no default constructor is used in a program and we create an object that needs a zero-argument constructor?",
            "options": [
              {
                "optionTxt": "Compile-time error."
              },
              {
                "optionTxt": "Preprocessing error."
              },
              {
                "optionTxt": "Runtime error."
              },
              {
                "optionTxt": "Runtime exception."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Can a class have virtual destructor?",
            "options": [
              {
                "optionTxt": "Yes"
              },
              {
                "optionTxt": "No"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Destructor has the same name as the constructor and it is preceded by ______ .",
            "options": [
              {
                "optionTxt": "!"
              },
              {
                "optionTxt": "?"
              },
              {
                "optionTxt": "~"
              },
              {
                "optionTxt": "$"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "For automatic objects, constructors and destructors are called each time the objects",
            "options": [
              {
                "optionTxt": "enter and leave scope"
              },
              {
                "optionTxt": "inherit parent class"
              },
              {
                "optionTxt": "are constructed"
              },
              {
                "optionTxt": "are destroyed"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which constructor function is designed to copy objects of the same class type?",
            "options": [
              {
                "optionTxt": "Create constructor"
              },
              {
                "optionTxt": "Object constructor"
              },
              {
                "optionTxt": "Dynamic constructor"
              },
              {
                "optionTxt": "Copy constructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Constructor has the same name as that of the class."
              },
              {
                "optionTxt": "Destructor has the same name as that of the class with a tilde symbol at the beginning."
              },
              {
                "optionTxt": "Both A and B."
              },
              {
                "optionTxt": "Destructor has the same name as the first member function of the class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which of the following statement is incorrect?",
            "options": [
              {
                "optionTxt": "Constructor is a member function of the class."
              },
              {
                "optionTxt": "The compiler always provides a zero argument constructor."
              },
              {
                "optionTxt": "It is necessary that a constructor in a class should always be public."
              },
              {
                "optionTxt": "Both B and C."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "When are the Global objects destroyed?",
            "options": [
              {
                "optionTxt": "When the control comes out of the block in which they are being used."
              },
              {
                "optionTxt": "When the program terminates."
              },
              {
                "optionTxt": "When the control comes out of the function in which they are being used."
              },
              {
                "optionTxt": "As soon as local objects die."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Copy constructor must receive its arguments by __________ .",
            "options": [
              {
                "optionTxt": "either pass-by-value or pass-by-reference"
              },
              {
                "optionTxt": "only pass-by-value"
              },
              {
                "optionTxt": "only pass-by-reference"
              },
              {
                "optionTxt": "only pass by address"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "A function with the same name as the class, but preceded with a tilde character (~) is called __________ of that class.",
            "options": [
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "function"
              },
              {
                "optionTxt": "object"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "A union that has no constructor can be initialized with another union of __________ type.",
            "options": [
              {
                "optionTxt": "different"
              },
              {
                "optionTxt": "same"
              },
              {
                "optionTxt": "virtual"
              },
              {
                "optionTxt": "class"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which of the following gets called when an object goes out of scope?",
            "options": [
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "main"
              },
              {
                "optionTxt": "virtual function"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Destructor destroys only integer data members of the object."
              },
              {
                "optionTxt": "Destructor destroys only float data members of the object."
              },
              {
                "optionTxt": "Destructor destroys only pointer data members of the object."
              },
              {
                "optionTxt": "Destructor destroys the complete object."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "__________ used to make a copy of one class object from another class object of the same class type.",
            "options": [
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "copy constructor"
              },
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "default constructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "Constructors __________ to allow different approaches of object construction.",
            "options": [
              {
                "optionTxt": "cannot overloaded"
              },
              {
                "optionTxt": "can be overloaded"
              },
              {
                "optionTxt": "can be called"
              },
              {
                "optionTxt": "can be nested"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A destructor has the same name as the class in which it is present."
              },
              {
                "optionTxt": "A destructor has a different name than the class in which it is present."
              },
              {
                "optionTxt": "A destructor always returns an integer."
              },
              {
                "optionTxt": "A destructor can be overloaded."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "18.",
            "questionText": "Which of the following cannot be declared as virtual?",
            "options": [
              {
                "optionTxt": "Constructor"
              },
              {
                "optionTxt": "Destructor"
              },
              {
                "optionTxt": "Data Members"
              },
              {
                "optionTxt": "Both A and C"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "19.",
            "questionText": "If the copy constructor receives its arguments by value, the copy constructor would",
            "options": [
              {
                "optionTxt": "call one-argument constructor of the class"
              },
              {
                "optionTxt": "work without any problem"
              },
              {
                "optionTxt": "call itself recursively"
              },
              {
                "optionTxt": "call zero-argument constructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "20.",
            "questionText": "Which of the following are NOT provided by the compiler by default?",
            "options": [
              {
                "optionTxt": "Zero-argument Constructor"
              },
              {
                "optionTxt": "Destructor"
              },
              {
                "optionTxt": "Copy Constructor"
              },
              {
                "optionTxt": "Copy Destructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "21.",
            "questionText": "It is a __________ error to pass arguments to a destructor.",
            "options": [
              {
                "optionTxt": "logical"
              },
              {
                "optionTxt": "virtual"
              },
              {
                "optionTxt": "syntax"
              },
              {
                "optionTxt": "linker"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "22.",
            "questionText": "If the programmer does not explicitly provide a destructor, then which of the following creates an empty destructor?",
            "options": [
              {
                "optionTxt": "Preprocessor"
              },
              {
                "optionTxt": "Compiler"
              },
              {
                "optionTxt": "Linker"
              },
              {
                "optionTxt": "main()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "23.",
            "questionText": "A __________ is a constructor that either has no parameters, or if it has parameters, all the parameters have default values.",
            "options": [
              {
                "optionTxt": "default constructor"
              },
              {
                "optionTxt": "copy constructor"
              },
              {
                "optionTxt": "Both A and B"
              },
              {
                "optionTxt": "None of these"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "24.",
            "questionText": "How many default constructors per class are possible?",
            "options": [
              {
                "optionTxt": "Only one"
              },
              {
                "optionTxt": "Two"
              },
              {
                "optionTxt": "Three"
              },
              {
                "optionTxt": "Unlimited"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "25.",
            "questionText": "Which of the following statement is correct about destructors?",
            "options": [
              {
                "optionTxt": "A destructor has void return type."
              },
              {
                "optionTxt": "A destructor has integer return type."
              },
              {
                "optionTxt": "A destructor has no return type."
              },
              {
                "optionTxt": "A destructors return type is always same as that of main()."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "26.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A constructor has the same name as the class in which it is present."
              },
              {
                "optionTxt": "A constructor has a different name than the class in which it is present."
              },
              {
                "optionTxt": "A constructor always returns an integer."
              },
              {
                "optionTxt": "A constructor cannot be overloaded."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "27.",
            "questionText": "Which of the following implicitly creates a default constructor when the programmer does not explicitly define at least one constructor for a class?",
            "options": [
              {
                "optionTxt": "Preprocessor"
              },
              {
                "optionTxt": "Linker"
              },
              {
                "optionTxt": "Loader"
              },
              {
                "optionTxt": "Compiler"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "28.",
            "questionText": "A destructor takes __________ arguments.",
            "options": [
              {
                "optionTxt": "one"
              },
              {
                "optionTxt": "two"
              },
              {
                "optionTxt": "three"
              },
              {
                "optionTxt": "no"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "29.",
            "questionText": "Destructor calls are made in which order of the corresponding constructor calls?",
            "options": [
              {
                "optionTxt": "Reverse order"
              },
              {
                "optionTxt": "Forward order"
              },
              {
                "optionTxt": "Depends on how the object is constructed"
              },
              {
                "optionTxt": "Depends on how many objects are constructed"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "30.",
            "questionText": "Which of the following never requires any arguments?",
            "options": [
              {
                "optionTxt": "Member function"
              },
              {
                "optionTxt": "Friend function"
              },
              {
                "optionTxt": "Default constructor"
              },
              {
                "optionTxt": "const"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "31.",
            "questionText": "A class's __________ is called when an object is destroyed.",
            "options": [
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "assignment function"
              },
              {
                "optionTxt": "copy constructor"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "32.",
            "questionText": "Destructors __________ for automatic objects if the program terminates with a call to function exit or function abort.",
            "options": [
              {
                "optionTxt": "are called"
              },
              {
                "optionTxt": "are inherited"
              },
              {
                "optionTxt": "are not called"
              },
              {
                "optionTxt": "are created"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "33.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A constructor of a derived class can access any public and protected member of the base class."
              },
              {
                "optionTxt": "Constructor cannot be inherited but the derived class can call them."
              },
              {
                "optionTxt": "A constructor of a derived class cannot access any public and protected member of the base class."
              },
              {
                "optionTxt": "Both A and B."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "34.",
            "questionText": "Which of the following statements are correct?",
            "options": [
              {
                "optionTxt": "Constructor is always called explicitly."
              },
              {
                "optionTxt": "Constructor is called either implicitly or explicitly, whereas destructor is always called implicitly."
              },
              {
                "optionTxt": "Destructor is always called explicitly."
              },
              {
                "optionTxt": "Constructor and destructor functions are not called at all as they are always inline."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "35.",
            "questionText": "How many times a constructor is called in the life-time of an object?",
            "options": [
              {
                "optionTxt": "Only once"
              },
              {
                "optionTxt": "Twice"
              },
              {
                "optionTxt": "Thrice"
              },
              {
                "optionTxt": "Depends on the way of creation of object"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "36.",
            "questionText": "Which of the following gets called when an object is being created?",
            "options": [
              {
                "optionTxt": "constructor"
              },
              {
                "optionTxt": "virtual function"
              },
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "main"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "37.",
            "questionText": "To ensure that every object in the array receives a destructor call, always delete memory allocated as an array with operator __________ .",
            "options": [
              {
                "optionTxt": "destructor"
              },
              {
                "optionTxt": "delete"
              },
              {
                "optionTxt": "delete[]"
              },
              {
                "optionTxt": "kill[]"
              },
              {
                "optionTxt": "free[]"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "38.",
            "questionText": "Which of the following statement is correct about constructors?",
            "options": [
              {
                "optionTxt": "A constructor has a return type."
              },
              {
                "optionTxt": "A constructor cannot contain a function call."
              },
              {
                "optionTxt": "A constructor has no return type."
              },
              {
                "optionTxt": "A constructor has a void return type."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "39.",
            "questionText": "Which of the following statement is correct whenever an object goes out of scope?",
            "options": [
              {
                "optionTxt": "The default constructor of the object is called."
              },
              {
                "optionTxt": "The parameterized destructor is called."
              },
              {
                "optionTxt": "The default destructor of the object is called."
              },
              {
                "optionTxt": "None of the above."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          }
        ]
      },
      {
        "topic": "References",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A reference is stored on heap."
              },
              {
                "optionTxt": "A reference is stored on stack."
              },
              {
                "optionTxt": "A reference is stored in a queue."
              },
              {
                "optionTxt": "A reference is stored in a binary tree."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which of the following statements is correct?\nOnce a reference variable has been defined to refer to a particular variable it can refer to any other variable.\nA reference is not a constant pointer.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Functions can be declared to return a reference type. There are reasons to make such a declaration/Which of the following reasons are correct?\nThe information being returned is a large enough object that returning a reference is more efficient than returning a copy.\nThe type of the function must be a R-value.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which of the following statements is correct?\nChange a reference changes the referent.\nWe can create an array of references.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which of the following statement is correct about the references?",
            "options": [
              {
                "optionTxt": "A reference must always be initialized within functions."
              },
              {
                "optionTxt": "A reference must always be initialized outside all functions."
              },
              {
                "optionTxt": "A reference must always be initialized."
              },
              {
                "optionTxt": "Both A and C."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "A reference is declared using the _____ symbol.",
            "options": [
              {
                "optionTxt": "&amp;&amp;"
              },
              {
                "optionTxt": "&amp;"
              },
              {
                "optionTxt": "||"
              },
              {
                "optionTxt": "!"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "Once a reference variable has been defined to refer to a particular variable it can refer to any other variable."
              },
              {
                "optionTxt": "A reference is indicated by using && operator."
              },
              {
                "optionTxt": "Once a reference variable has been defined to refer to a particular variable it cannot refer to any other variable."
              },
              {
                "optionTxt": "A reference can be declared beforehand and initialized later."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which of the following statements is correct?\nA reference is not a constant pointer.\nA referenced is automatically de-referenced.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which of the following statements is correct?\nAn array of references is acceptable.\nWe can also create a reference to a reference.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A referenced has to be de-referenced to access a value."
              },
              {
                "optionTxt": "A referenced does not need to be de-referenced to access a value."
              },
              {
                "optionTxt": "A referenced has to be double de-referenced to access a value."
              },
              {
                "optionTxt": "Whether a reference should be de-referenced or not depends on the type of the reference."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Which of the following statements is correct?\nOnce the variable and the reference are linked they are tied together.\nOnce the reference of a variable is declared another reference of that variable is not allowed.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Which of the following statements is correct?\nWe can return a global variable by reference.\nWe cannot return a local variable by reference.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Reference is like a _____.",
            "options": [
              {
                "optionTxt": "Pointer"
              },
              {
                "optionTxt": "Structure"
              },
              {
                "optionTxt": "Macro"
              },
              {
                "optionTxt": "Enum"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "A reference is a constant pointer."
              },
              {
                "optionTxt": "A reference is not a constant pointer."
              },
              {
                "optionTxt": "An array of references is acceptable."
              },
              {
                "optionTxt": "It is possible to create a reference to a reference."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "*"
              },
              {
                "optionTxt": "Once a reference variable has been defined to refer to a particular variable it can refer to any other variable."
              },
              {
                "optionTxt": "A reference must always be initialized within classes."
              },
              {
                "optionTxt": "A variable can have multiple references."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "Which of the following statement is correct?",
            "options": [
              {
                "optionTxt": "An array of references is acceptable."
              },
              {
                "optionTxt": "Once a reference variable has been defined to refer to a particular variable it can refer to any other variable."
              },
              {
                "optionTxt": "An array of references is not acceptable."
              },
              {
                "optionTxt": "Reference is like a structure."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "Which of the following statements is correct?\nPointer to a reference and reference to a pointer both are valid.\nWhen we use reference, we are actually referring to a referent.",
            "options": [
              {
                "optionTxt": "Only 1 is correct."
              },
              {
                "optionTxt": "Only 2 is correct."
              },
              {
                "optionTxt": "Both 1 and 2 are correct."
              },
              {
                "optionTxt": "Both 1 and 2 are incorrect."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          }
        ]
      }
    ]
  },
  {
    "title": "Java",
    "topics": [
      {
        "topic": "Language Fundamentals",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which four options describe the correct default values for array elements of the types indicated?\nint -> 0\nString -> \"null\"\nDog -> null\nchar -> '\\u0000'\nfloat -> 0.0f\nboolean -> true",
            "options": [
              {
                "optionTxt": "1, 2, 3, 4"
              },
              {
                "optionTxt": "1, 3, 4, 5"
              },
              {
                "optionTxt": "2, 4, 5, 6"
              },
              {
                "optionTxt": "3, 4, 5, 6"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which one of these lists contains only Java programming language keywords?",
            "options": [
              {
                "optionTxt": "class, if, void, long, Int, continue"
              },
              {
                "optionTxt": "goto, instanceof, native, finally, default, throws"
              },
              {
                "optionTxt": "try, virtual, throw, final, volatile, transient"
              },
              {
                "optionTxt": "strictfp, constant, super, implements, do"
              },
              {
                "optionTxt": "byte, break, assert, switch, include"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which will legally declare, construct, and initialize an array?",
            "options": [
              {
                "optionTxt": "int [] myList = {\"1\", \"2\", \"3\"};"
              },
              {
                "optionTxt": "int [] myList = (5, 8, 2);"
              },
              {
                "optionTxt": "int myList [] [] = {4,9,7,0};"
              },
              {
                "optionTxt": "int myList [] = {4, 3, 7};"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which is a reserved word in the Java programming language?",
            "options": [
              {
                "optionTxt": "method"
              },
              {
                "optionTxt": "native"
              },
              {
                "optionTxt": "subclasses"
              },
              {
                "optionTxt": "reference"
              },
              {
                "optionTxt": "array"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which is a valid keyword in java?",
            "options": [
              {
                "optionTxt": "interface"
              },
              {
                "optionTxt": "string"
              },
              {
                "optionTxt": "Float"
              },
              {
                "optionTxt": "unsigned"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which three are legal array declarations?\nint [] myScores [];\nchar [] myChars;\nint [6] myScores;\nDog myDogs [];\nDog myDogs [7];",
            "options": [
              {
                "optionTxt": "1, 2, 4"
              },
              {
                "optionTxt": "2, 4, 5"
              },
              {
                "optionTxt": "2, 3, 4"
              },
              {
                "optionTxt": "All are correct."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "public interface Foo \n{ \n    int k = 4; /* Line 3 */\n}\n\nWhich three piece of codes are equivalent to line 3?\nfinal int k = 4;\npublic int k = 4;\nstatic int k = 4;\nabstract int k = 4;\nvolatile int k = 4;\nprotected int k = 4;",
            "options": [
              {
                "optionTxt": "1, 2 and 3"
              },
              {
                "optionTxt": "2, 3 and 4"
              },
              {
                "optionTxt": "3, 4 and 5"
              },
              {
                "optionTxt": "4, 5 and 6"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which one of the following will declare an array and initialize it with five numbers?",
            "options": [
              {
                "optionTxt": "Array a = new Array(5);"
              },
              {
                "optionTxt": "int [] a = {23,22,21,20,19};"
              },
              {
                "optionTxt": "int a [] = new int[5];"
              },
              {
                "optionTxt": "int [5] array;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which three are valid declarations of a char?\nchar c1 = 064770;\nchar c2 = 'face';\nchar c3 = 0xbeef;\nchar c4 = \\u0022;\nchar c5 = '\\iface';\nchar c6 = '\\uface';",
            "options": [
              {
                "optionTxt": "1, 2, 4"
              },
              {
                "optionTxt": "1, 3, 6"
              },
              {
                "optionTxt": "3, 5"
              },
              {
                "optionTxt": "5 only"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which is the valid declarations within an interface definition?",
            "options": [
              {
                "optionTxt": "public double methoda();"
              },
              {
                "optionTxt": "public final double methoda();"
              },
              {
                "optionTxt": "static void methoda(double d1);"
              },
              {
                "optionTxt": "protected void methoda(double d1);"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Which one is a valid declaration of a boolean?",
            "options": [
              {
                "optionTxt": "boolean b1 = 0;"
              },
              {
                "optionTxt": "boolean b2 = 'false';"
              },
              {
                "optionTxt": "boolean b3 = false;"
              },
              {
                "optionTxt": "boolean b4 = Boolean.false();"
              },
              {
                "optionTxt": "boolean b5 = no;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Which three are valid declarations of a float?\nfloat f1 = -343;\nfloat f2 = 3.14;\nfloat f3 = 0x12345;\nfloat f4 = 42e7;\nfloat f5 = 2001.0D;\nfloat f6 = 2.81F;",
            "options": [
              {
                "optionTxt": "1, 2, 4"
              },
              {
                "optionTxt": "2, 3, 5"
              },
              {
                "optionTxt": "1, 3, 6"
              },
              {
                "optionTxt": "2, 4, 6"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which is a valid declarations of a String?",
            "options": [
              {
                "optionTxt": "String s1 = null;"
              },
              {
                "optionTxt": "String s2 = 'null';"
              },
              {
                "optionTxt": "String s3 = (String) 'abc';"
              },
              {
                "optionTxt": "String s4 = (String) '\\ufeed';"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "What is the numerical range of a char?",
            "options": [
              {
                "optionTxt": "-128 to 127"
              },
              {
                "optionTxt": "-(215) to (215) - 1"
              },
              {
                "optionTxt": "0 to 32767"
              },
              {
                "optionTxt": "0 to 65535"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          }
        ]
      },
      {
        "topic": "Declarations and Access Control",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "You want subclasses in any package to have access to members of a superclass. Which is the most restrictive access that accomplishes this objective?",
            "options": [
              {
                "optionTxt": "public"
              },
              {
                "optionTxt": "private"
              },
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "transient"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "public class Outer \n{ \n    public void someOuterMethod() \n    {\n        //Line 5 \n    } \n    public class Inner { } \n    \n    public static void main(String[] argv) \n    {\n        Outer ot = new Outer(); \n        //Line 10\n    } \n} \n\n\nWhich of the following code fragments inserted, will allow to compile?",
            "options": [
              {
                "optionTxt": "new Inner(); //At line 5"
              },
              {
                "optionTxt": "new Inner(); //At line 10"
              },
              {
                "optionTxt": "new ot.Inner(); //At line 10"
              },
              {
                "optionTxt": "new Outer.Inner(); //At line 10"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "interface Base \n{\n    boolean m1 ();\n    byte m2(short s);\n}\n\nwhich two code fragments will compile?\ninterface Base2 implements Base {}\nabstract class Class2 extends Base\n{ public boolean m1(){ return true; }}\nabstract class Class2 implements Base {}\nabstract class Class2 implements Base\n{ public boolean m1(){ return (7 > 4); }}\nabstract class Class2 implements Base\n{ protected boolean m1(){ return (5 > 7) }}",
            "options": [
              {
                "optionTxt": "1 and 2"
              },
              {
                "optionTxt": "2 and 3"
              },
              {
                "optionTxt": "3 and 4"
              },
              {
                "optionTxt": "1 and 5"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which three form part of correct array declarations?\npublic int a [ ]\nstatic int [ ] a\npublic [ ] int a\nprivate int a [3]\nprivate int [3] a [ ]\npublic final int [ ] a",
            "options": [
              {
                "optionTxt": "1, 3, 4"
              },
              {
                "optionTxt": "2, 4, 5"
              },
              {
                "optionTxt": "1, 2, 6"
              },
              {
                "optionTxt": "2, 5, 6"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "public class Test { }\n\nWhat is the prototype of the default constructor?",
            "options": [
              {
                "optionTxt": "Test( )"
              },
              {
                "optionTxt": "Test(void)"
              },
              {
                "optionTxt": "public Test( )"
              },
              {
                "optionTxt": "public Test(void)"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "What is the most restrictive access modifier that will allow members of one class to have access to members of another class in the same package?",
            "options": [
              {
                "optionTxt": "public"
              },
              {
                "optionTxt": "abstract"
              },
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "synchronized"
              },
              {
                "optionTxt": "default access"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "E"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which of the following is/are legal method declarations?\nprotected abstract void m1();\nstatic final void m1(){}\nsynchronized public final void m1() {}\nprivate native void m1();",
            "options": [
              {
                "optionTxt": "1 and 3"
              },
              {
                "optionTxt": "2 and 4"
              },
              {
                "optionTxt": "1 only"
              },
              {
                "optionTxt": "All of them are legal declarations."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which cause a compiler error?",
            "options": [
              {
                "optionTxt": "int[ ] scores = {3, 5, 7};"
              },
              {
                "optionTxt": "int [ ][ ] scores = {2,7,6}, {9,3,45};"
              },
              {
                "optionTxt": "String cats[ ] = {\"Fluffy\", \"Spot\", \"Zeus\"};"
              },
              {
                "optionTxt": "boolean results[ ] = new boolean [] {true, false, true};"
              },
              {
                "optionTxt": "Integer results[ ] = {new Integer(3), new Integer(5), new Integer(8)};"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which three are valid method signatures in an interface?\nprivate int getArea();\npublic float getVol(float x);\npublic void main(String [] args);\npublic static void main(String [] args);\nboolean setFlag(Boolean [] test);",
            "options": [
              {
                "optionTxt": "1 and 2"
              },
              {
                "optionTxt": "2, 3 and 5"
              },
              {
                "optionTxt": "3, 4, and 5"
              },
              {
                "optionTxt": "2 and 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "You want a class to have access to members of another class in the same package. Which is the most restrictive access that accomplishes this objective?",
            "options": [
              {
                "optionTxt": "public"
              },
              {
                "optionTxt": "private"
              },
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "default access"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "What is the widest valid returnType for methodA in line 3?\npublic class ReturnIt \n{ \n    returnType methodA(byte x, double y) /* Line 3 */\n    { \n        return (long)x / y * 2; \n    } \n}",
            "options": [
              {
                "optionTxt": "int"
              },
              {
                "optionTxt": "byte"
              },
              {
                "optionTxt": "long"
              },
              {
                "optionTxt": "double"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "class A \n{  \n    protected int method1(int a, int b) \n    {\n        return 0; \n    } \n}\n\nWhich is valid in a class that extends class A?",
            "options": [
              {
                "optionTxt": "public int method1(int a, int b) {return 0; }"
              },
              {
                "optionTxt": "private int method1(int a, int b) { return 0; }"
              },
              {
                "optionTxt": "public short method1(int a, int b) { return 0; }"
              },
              {
                "optionTxt": "static protected int method1(int a, int b) { return 0; }"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which one creates an instance of an array?",
            "options": [
              {
                "optionTxt": "int[ ] ia = new int[15];"
              },
              {
                "optionTxt": "float fa = new float[20];"
              },
              {
                "optionTxt": "char[ ] ca = \"Some String\";"
              },
              {
                "optionTxt": "int ia[ ] [ ] = { 4, 5, 6 }, { 1,2,3 };"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Which two of the following are legal declarations for nonnested classes and interfaces?\nfinal abstract class Test {}\npublic static interface Test {}\nfinal public class Test {}\nprotected abstract class Test {}\nprotected interface Test {}\nabstract public class Test {}",
            "options": [
              {
                "optionTxt": "1 and 4"
              },
              {
                "optionTxt": "2 and 5"
              },
              {
                "optionTxt": "3 and 6"
              },
              {
                "optionTxt": "4 and 6"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "Which of the following class level (nonlocal) variable declarations will not compile?",
            "options": [
              {
                "optionTxt": "protected int a;"
              },
              {
                "optionTxt": "transient int b = 3;"
              },
              {
                "optionTxt": "private synchronized int e;"
              },
              {
                "optionTxt": "volatile int d;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "16.",
            "questionText": "Which two cause a compiler error?\nfloat[ ] f = new float(3);\nfloat f2[ ] = new float[ ];\nfloat[ ]f1 = new float[3];\nfloat f3[ ] = new float[3];\nfloat f5[ ] = {1.0f, 2.0f, 2.0f};",
            "options": [
              {
                "optionTxt": "2, 4"
              },
              {
                "optionTxt": "3, 5"
              },
              {
                "optionTxt": "4, 5"
              },
              {
                "optionTxt": "1, 2"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "17.",
            "questionText": "Given a method in a protected class, what access modifier do you use to restrict access to that method to only the other members of the same class?",
            "options": [
              {
                "optionTxt": "final"
              },
              {
                "optionTxt": "static"
              },
              {
                "optionTxt": "private"
              },
              {
                "optionTxt": "protected"
              },
              {
                "optionTxt": "volatile"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "18.",
            "questionText": "Which is a valid declaration within an interface?",
            "options": [
              {
                "optionTxt": "public static short stop = 23;"
              },
              {
                "optionTxt": "protected short stop = 23;"
              },
              {
                "optionTxt": "transient short stop = 23;"
              },
              {
                "optionTxt": "final void madness(short stop);"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          }
        ]
      },
      {
        "topic": "Operators and Assignments",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What will be the output of the program?\nclass PassA \n{\n    public static void main(String [] args) \n    {\n        PassA p = new PassA();\n        p.start();\n    }\n\n    void start() \n    {\n        long [] a1 = {3,4,5};\n        long [] a2 = fix(a1);\n        System.out.print(a1[0] + a1[1] + a1[2] + \" \");\n        System.out.println(a2[0] + a2[1] + a2[2]);\n    }\n\n    long [] fix(long [] a3) \n    {\n        a3[1] = 7;\n        return a3;\n    }\n}",
            "options": [
              {
                "optionTxt": "12 15"
              },
              {
                "optionTxt": "15 15"
              },
              {
                "optionTxt": "3 4 5 3 7 5"
              },
              {
                "optionTxt": "3 7 5 3 7 5"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "What will be the output of the program?\nclass Test \n{\n    public static void main(String [] args) \n    {\n        Test p = new Test();\n        p.start();\n    }\n\n    void start() \n    {\n        boolean b1 = false;\n        boolean b2 = fix(b1);\n        System.out.println(b1 + \" \" + b2);\n    }\n\n    boolean fix(boolean b1) \n    {\n        b1 = true;\n        return b1;\n    }\n}",
            "options": [
              {
                "optionTxt": "true true"
              },
              {
                "optionTxt": "false true"
              },
              {
                "optionTxt": "true false"
              },
              {
                "optionTxt": "false false"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "What will be the output of the program?\nclass PassS \n{\n    public static void main(String [] args) \n    {\n        PassS p = new PassS();\n        p.start();\n    }\n\n    void start() \n    {\n        String s1 = \"slip\";\n        String s2 = fix(s1);\n        System.out.println(s1 + \" \" + s2);\n    }\n\n    String fix(String s1) \n    {\n        s1 = s1 + \"stream\";\n        System.out.print(s1 + \" \");\n        return \"stream\";\n    }\n}",
            "options": [
              {
                "optionTxt": "slip stream"
              },
              {
                "optionTxt": "slipstream stream"
              },
              {
                "optionTxt": "stream slip stream"
              },
              {
                "optionTxt": "slipstream slip stream"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "What will be the output of the program?\nclass BitShift \n{\n    public static void main(String [] args) \n    {\n        int x = 0x80000000;\n        System.out.print(x + \" and  \");\n        x = x >>> 31;\n        System.out.println(x);\n    }\n}",
            "options": [
              {
                "optionTxt": "-2147483648 and 1"
              },
              {
                "optionTxt": "0x80000000 and 0x00000001"
              },
              {
                "optionTxt": "-2147483648 and -1"
              },
              {
                "optionTxt": "1 and -2147483648"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "What will be the output of the program?\nclass Equals \n{\n    public static void main(String [] args) \n    {\n        int x = 100;\n        double y = 100.1;\n        boolean b = (x = y); /* Line 7 */\n        System.out.println(b);\n    }\n}",
            "options": [
              {
                "optionTxt": "true"
              },
              {
                "optionTxt": "false"
              },
              {
                "optionTxt": "Compilation fails"
              },
              {
                "optionTxt": "An exception is thrown at runtime"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "What will be the output of the program?\nclass Test \n{\n    public static void main(String [] args) \n    {\n        int x=20;\n        String sup = (x < 15) ? \"small\" : (x < 22)? \"tiny\" : \"huge\";\n        System.out.println(sup);\n    }\n}",
            "options": [
              {
                "optionTxt": "small"
              },
              {
                "optionTxt": "tiny"
              },
              {
                "optionTxt": "huge"
              },
              {
                "optionTxt": "Compilation fails"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "What will be the output of the program?\nclass Test \n{\n    public static void main(String [] args) \n    {\n        int x= 0;\n        int y= 0;\n        for (int z = 0; z < 5; z++) \n        {\n            if (( ++x > 2 ) && (++y > 2)) \n            {\n                x++;\n            }\n        }\n        System.out.println(x + \" \" + y);\n    }\n}",
            "options": [
              {
                "optionTxt": "5 2"
              },
              {
                "optionTxt": "5 3"
              },
              {
                "optionTxt": "6 3"
              },
              {
                "optionTxt": "6 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "What will be the output of the program?\nclass Test \n{\n    public static void main(String [] args) \n    {\n        int x= 0;\n        int y= 0;\n        for (int z = 0; z < 5; z++) \n        {\n            if (( ++x > 2 ) || (++y > 2)) \n            {\n                x++;\n            }\n        }\n    System.out.println(x + \" \" + y);\n    }\n}",
            "options": [
              {
                "optionTxt": "5 3"
              },
              {
                "optionTxt": "8 2"
              },
              {
                "optionTxt": "8 3"
              },
              {
                "optionTxt": "8 5"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "What will be the output of the program?\nclass Bitwise \n{\n    public static void main(String [] args) \n    {\n        int x = 11 & 9;\n        int y = x ^ 3;\n        System.out.println( y | 12 );\n    }\n}",
            "options": [
              {
                "optionTxt": "0"
              },
              {
                "optionTxt": "7"
              },
              {
                "optionTxt": "8"
              },
              {
                "optionTxt": "14"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "What will be the output of the program?\nclass SSBool \n{\n    public static void main(String [] args) \n    {\n        boolean b1 = true;\n        boolean b2 = false;\n        boolean b3 = true;\n        if ( b1 & b2 | b2 & b3 | b2 ) /* Line 8 */\n            System.out.print(\"ok \");\n        if ( b1 & b2 | b2 & b3 | b2 | b1 ) /*Line 10*/\n            System.out.println(\"dokey\");\n    }\n}",
            "options": [
              {
                "optionTxt": "ok"
              },
              {
                "optionTxt": "dokey"
              },
              {
                "optionTxt": "ok dokey"
              },
              {
                "optionTxt": "No output is produced"
              },
              {
                "optionTxt": "Compilation error"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "What will be the output of the program?\nclass SC2 \n{\n    public static void main(String [] args) \n    {\n        SC2 s = new SC2();\n        s.start();\n    }\n\n    void start() \n    {\n        int a = 3;\n        int b = 4;\n        System.out.print(\" \" + 7 + 2 + \" \");\n        System.out.print(a + b);\n        System.out.print(\" \" + a + b + \" \");\n        System.out.print(foo() + a + b + \" \");\n        System.out.println(a + b + foo());\n    }\n\n    String foo() \n    {\n        return \"foo\";\n    }\n}",
            "options": [
              {
                "optionTxt": "9 7 7 foo 7 7foo"
              },
              {
                "optionTxt": "72 34 34 foo34 34foo"
              },
              {
                "optionTxt": "9 7 7 foo34 34foo"
              },
              {
                "optionTxt": "72 7 34 foo34 7foo"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "What will be the output of the program?\nclass Test \n{\n    static int s;\n    public static void main(String [] args) \n    {\n        Test p = new Test();\n        p.start();\n        System.out.println(s);\n    }\n\n    void start() \n    {\n        int x = 7;\n        twice(x);\n        System.out.print(x + \" \");\n    }\n\n    void twice(int x) \n    {\n        x = x*2;\n        s = x;\n    }\n}",
            "options": [
              {
                "optionTxt": "7 7"
              },
              {
                "optionTxt": "7 14"
              },
              {
                "optionTxt": "14 0"
              },
              {
                "optionTxt": "14 14"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "What will be the output of the program?\nclass Two \n{\n    byte x;\n}\n\nclass PassO \n{\n    public static void main(String [] args) \n    {\n        PassO p = new PassO();\n        p.start();\n    }\n\n    void start() \n    {\n        Two t = new Two();\n        System.out.print(t.x + \" \");\n        Two t2 = fix(t);\n        System.out.println(t.x + \" \" + t2.x);\n    }\n\n    Two fix(Two tt) \n    {\n        tt.x = 42;\n        return tt;\n    }\n}",
            "options": [
              {
                "optionTxt": "null null 42"
              },
              {
                "optionTxt": "0 0 42"
              },
              {
                "optionTxt": "0 42 42"
              },
              {
                "optionTxt": "0 0 0"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "What will be the output of the program?\nclass BoolArray \n{\n    boolean [] b = new boolean[3];\n    int count = 0;\n\n    void set(boolean [] x, int i) \n    {\n        x[i] = true;\n        ++count;\n    }\n\n    public static void main(String [] args) \n    {\n        BoolArray ba = new BoolArray();\n        ba.set(ba.b, 0);\n        ba.set(ba.b, 2);\n        ba.test();\n    }\n\n    void test() \n    {\n        if ( b[0] && b[1] | b[2] )\n            count++;\n        if ( b[1] && b[(++count - 2)] )\n            count += 7;\n        System.out.println(\"count = \" + count);\n    }\n}",
            "options": [
              {
                "optionTxt": "count = 0"
              },
              {
                "optionTxt": "count = 2"
              },
              {
                "optionTxt": "count = 3"
              },
              {
                "optionTxt": "count = 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "What will be the output of the program?\npublic class Test \n{ \n    public static void leftshift(int i, int j) \n    {\n        i <<= j; \n    } \n    public static void main(String args[]) \n    {\n        int i = 4, j = 2; \n        leftshift(i, j); \n        System.out.println(i); \n    } \n}",
            "options": [
              {
                "optionTxt": "2"
              },
              {
                "optionTxt": "4"
              },
              {
                "optionTxt": "8"
              },
              {
                "optionTxt": "16"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          }
        ]
      },
      {
        "topic": "Exceptions",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What will be the output of the program?\npublic class Foo \n{  \n    public static void main(String[] args) \n    {\n        try \n        { \n            return; \n        } \n        finally \n        {\n            System.out.println( \"Finally\" ); \n        } \n    } \n}",
            "options": [
              {
                "optionTxt": "Finally"
              },
              {
                "optionTxt": "Compilation fails."
              },
              {
                "optionTxt": "The code runs with no output."
              },
              {
                "optionTxt": "An exception is thrown at runtime."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "What will be the output of the program?\ntry \n{ \n    int x = 0; \n    int y = 5 / x; \n} \ncatch (Exception e) \n{\n    System.out.println(\"Exception\"); \n} \ncatch (ArithmeticException ae) \n{\n    System.out.println(\" Arithmetic Exception\"); \n} \nSystem.out.println(\"finished\");",
            "options": [
              {
                "optionTxt": "finished"
              },
              {
                "optionTxt": "Exception"
              },
              {
                "optionTxt": "Compilation fails."
              },
              {
                "optionTxt": "Arithmetic Exception"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "What will be the output of the program?\npublic class X \n{  \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod();  \n            System.out.print(\"A\"); \n        }  \n        catch (Exception ex) \n        {\n            System.out.print(\"B\");  \n        } \n        finally \n        {\n            System.out.print(\"C\"); \n        } \n        System.out.print(\"D\"); \n    }  \n    public static void badMethod() \n    {\n        throw new Error(); /* Line 22 */\n    } \n}",
            "options": [
              {
                "optionTxt": "ABCD"
              },
              {
                "optionTxt": "Compilation fails."
              },
              {
                "optionTxt": "C is printed before exiting with an error message."
              },
              {
                "optionTxt": "BC is printed before exiting with an error message."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "What will be the output of the program?\npublic class X \n{  \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod();  \n            System.out.print(\"A\");  \n        } \n        catch (RuntimeException ex) /* Line 10 */\n        { \n            System.out.print(\"B\"); \n        } \n        catch (Exception ex1) \n        { \n            System.out.print(\"C\"); \n        } \n        finally \n        {\n            System.out.print(\"D\"); \n        } \n        System.out.print(\"E\"); \n    } \n    public static void badMethod() \n    { \n        throw new RuntimeException(); \n    } \n}",
            "options": [
              {
                "optionTxt": "BD"
              },
              {
                "optionTxt": "BCD"
              },
              {
                "optionTxt": "BDE"
              },
              {
                "optionTxt": "BCDE"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "What will be the output of the program?\npublic class RTExcept \n{\n    public static void throwit () \n    {\n        System.out.print(\"throwit \");\n        throw new RuntimeException();\n    }\n    public static void main(String [] args) \n    {\n        try \n        {\n            System.out.print(\"hello \");\n            throwit();\n        }\n        catch (Exception re ) \n        {\n            System.out.print(\"caught \");\n        }\n        finally \n        {\n            System.out.print(\"finally \");\n        }\n        System.out.println(\"after \");\n    }\n}",
            "options": [
              {
                "optionTxt": "hello throwit caught"
              },
              {
                "optionTxt": "Compilation fails"
              },
              {
                "optionTxt": "RuntimeException"
              },
              {
                "optionTxt": "hello throwit caught finally after"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "What will be the output of the program?\npublic class Test \n{  \n    public static void aMethod() throws Exception \n    {\n        try /* Line 5 */\n        {\n            throw new Exception(); /* Line 7 */\n        } \n        finally /* Line 9 */\n        {\n            System.out.print(\"finally \"); /* Line 11 */\n        } \n    } \n    public static void main(String args[]) \n    {\n        try \n        {\n            aMethod();  \n        } \n        catch (Exception e) /* Line 20 */\n        {\n            System.out.print(\"exception \"); \n        } \n        System.out.print(\"finished\"); /* Line 24 */\n    } \n}",
            "options": [
              {
                "optionTxt": "finally"
              },
              {
                "optionTxt": "exception finished"
              },
              {
                "optionTxt": "finally exception finished"
              },
              {
                "optionTxt": "Compilation fails"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "What will be the output of the program?\npublic class X \n{ \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod();  \n            System.out.print(\"A\"); \n        }  \n        catch (Exception ex) \n        {\n            System.out.print(\"B\"); \n        }  \n        finally \n        {\n            System.out.print(\"C\"); \n        }  \n        System.out.print(\"D\"); \n    }  \n    public static void badMethod() {} \n}",
            "options": [
              {
                "optionTxt": "AC"
              },
              {
                "optionTxt": "BC"
              },
              {
                "optionTxt": "ACD"
              },
              {
                "optionTxt": "ABCD"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "What will be the output of the program?\npublic class X \n{  \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod(); /* Line 7 */\n            System.out.print(\"A\"); \n        } \n        catch (Exception ex) /* Line 10 */\n        {\n            System.out.print(\"B\"); /* Line 12 */\n        } \n        finally /* Line 14 */\n        {\n            System.out.print(\"C\"); /* Line 16 */\n        }  \n        System.out.print(\"D\"); /* Line 18 */\n    } \n    public static void badMethod() \n    {\n        throw new RuntimeException(); \n    } \n}",
            "options": [
              {
                "optionTxt": "AB"
              },
              {
                "optionTxt": "BC"
              },
              {
                "optionTxt": "ABC"
              },
              {
                "optionTxt": "BCD"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "What will be the output of the program?\npublic class MyProgram \n{\n    public static void main(String args[])\n    {\n        try \n        {\n            System.out.print(\"Hello world \");\n        }\n        finally \n        {\n            System.out.println(\"Finally executing \");\n        }\n    }\n}",
            "options": [
              {
                "optionTxt": "Nothing. The program will not compile because no exceptions are specified."
              },
              {
                "optionTxt": "Nothing. The program will not compile because no catch clauses are specified."
              },
              {
                "optionTxt": "Hello world."
              },
              {
                "optionTxt": "Hello world Finally executing"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "What will be the output of the program?\nclass Exc0 extends Exception { } \nclass Exc1 extends Exc0 { } /* Line 2 */\npublic class Test \n{  \n    public static void main(String args[]) \n    { \n        try \n        {  \n            throw new Exc1(); /* Line 9 */\n        } \n        catch (Exc0 e0) /* Line 11 */\n        {\n            System.out.println(\"Ex0 caught\"); \n        } \n        catch (Exception e) \n        {\n            System.out.println(\"exception caught\");  \n        } \n    } \n}",
            "options": [
              {
                "optionTxt": "Ex0"
              },
              {
                "optionTxt": "exception caught"
              },
              {
                "optionTxt": "Compilation fails because of an error at line 2."
              },
              {
                "optionTxt": "Compilation fails because of an error at line 9."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          }
        ]
      },
      {
        "topic": "Objects and Collections",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Suppose that you would like to create an instance of a new Map that has an iteration order that is the same as the iteration order of an existing instance of a Map. Which concrete implementation of the Map interface should be used for the new instance?",
            "options": [
              {
                "optionTxt": "TreeMap"
              },
              {
                "optionTxt": "HashMap"
              },
              {
                "optionTxt": "LinkedHashMap"
              },
              {
                "optionTxt": "The answer depends on the implementation of the existing instance."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which class does not override the equals() and hashCode() methods, inheriting them directly from class Object?",
            "options": [
              {
                "optionTxt": "java.lang.String"
              },
              {
                "optionTxt": "java.lang.Double"
              },
              {
                "optionTxt": "java.lang.StringBuffer"
              },
              {
                "optionTxt": "java.lang.Character"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which collection class allows you to grow or shrink its size and provides indexed access to its elements, but whose methods are not synchronized?",
            "options": [
              {
                "optionTxt": "java.util.HashSet"
              },
              {
                "optionTxt": "java.util.LinkedHashSet"
              },
              {
                "optionTxt": "java.util.List"
              },
              {
                "optionTxt": "java.util.ArrayList"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "You need to store elements in a collection that guarantees that no duplicates are stored and all elements can be accessed in natural order. Which interface provides that capability?",
            "options": [
              {
                "optionTxt": "java.util.Map"
              },
              {
                "optionTxt": "java.util.Set"
              },
              {
                "optionTxt": "java.util.List"
              },
              {
                "optionTxt": "java.util.Collection"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which interface does java.util.Hashtable implement?",
            "options": [
              {
                "optionTxt": "Java.util.Map"
              },
              {
                "optionTxt": "Java.util.List"
              },
              {
                "optionTxt": "Java.util.HashTable"
              },
              {
                "optionTxt": "Java.util.Collection"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which interface provides the capability to store objects using a key-value pair?",
            "options": [
              {
                "optionTxt": "Java.util.Map"
              },
              {
                "optionTxt": "Java.util.Set"
              },
              {
                "optionTxt": "Java.util.List"
              },
              {
                "optionTxt": "Java.util.Collection"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which collection class allows you to associate its elements with key values, and allows you to retrieve objects in FIFO (first-in, first-out) sequence?",
            "options": [
              {
                "optionTxt": "java.util.ArrayList"
              },
              {
                "optionTxt": "java.util.LinkedHashMap"
              },
              {
                "optionTxt": "java.util.HashMap"
              },
              {
                "optionTxt": "java.util.TreeMap"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which collection class allows you to access its elements by associating a key with an element's value, and provides synchronization?",
            "options": [
              {
                "optionTxt": "java.util.SortedMap"
              },
              {
                "optionTxt": "java.util.TreeMap"
              },
              {
                "optionTxt": "java.util.TreeSet"
              },
              {
                "optionTxt": "java.util.Hashtable"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which is valid declaration of a float?",
            "options": [
              {
                "optionTxt": "float f = 1F;"
              },
              {
                "optionTxt": "float f = 1.0;"
              },
              {
                "optionTxt": "float f = \"1\";"
              },
              {
                "optionTxt": "float f = 1.0d;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "/* Missing Statement ? */\npublic class foo \n{\n    public static void main(String[]args)throws Exception \n    {\n        java.io.PrintWriter out = new java.io.PrintWriter(); \n        new java.io.OutputStreamWriter(System.out,true); \n        out.println(\"Hello\"); \n    } \n}\n\nWhat line of code should replace the missing statement to make this program compile?",
            "options": [
              {
                "optionTxt": "No statement required."
              },
              {
                "optionTxt": "import java.io.*;"
              },
              {
                "optionTxt": "include java.io.*;"
              },
              {
                "optionTxt": "import java.io.PrintWriter;"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "What is the numerical range of char?",
            "options": [
              {
                "optionTxt": "0 to 32767"
              },
              {
                "optionTxt": "0 to 65535"
              },
              {
                "optionTxt": "-256 to 255"
              },
              {
                "optionTxt": "-32768 to 32767"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Which of the following are Java reserved words?\nrun\nimport\ndefault\nimplement",
            "options": [
              {
                "optionTxt": "1 and 2"
              },
              {
                "optionTxt": "2 and 3"
              },
              {
                "optionTxt": "3 and 4"
              },
              {
                "optionTxt": "2 and 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          }
        ]
      },
      {
        "topic": "Inner Classes",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which is true about an anonymous inner class?",
            "options": [
              {
                "optionTxt": "It can extend exactly one class and implement exactly one interface."
              },
              {
                "optionTxt": "It can extend exactly one class and can implement multiple interfaces."
              },
              {
                "optionTxt": "It can extend exactly one class or implement exactly one interface."
              },
              {
                "optionTxt": "It can implement multiple interfaces regardless of whether it also extends a class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "class Boo \n{\n    Boo(String s) { }\n    Boo() { }\n}\nclass Bar extends Boo \n{\n    Bar() { }\n    Bar(String s) {super(s);}\n    void zoo() \n    {\n    // insert code here\n    }\n}\n\nwhich one create an anonymous inner class from within class Bar?",
            "options": [
              {
                "optionTxt": "Boo f = new Boo(24) { };"
              },
              {
                "optionTxt": "Boo f = new Bar() { };"
              },
              {
                "optionTxt": "Bar f = new Boo(String s) { };"
              },
              {
                "optionTxt": "Boo f = new Boo.Bar(String s) { };"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which is true about a method-local inner class?",
            "options": [
              {
                "optionTxt": "It must be marked final."
              },
              {
                "optionTxt": "It can be marked abstract."
              },
              {
                "optionTxt": "It can be marked public."
              },
              {
                "optionTxt": "It can be marked static."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "Which statement is true about a static nested class?",
            "options": [
              {
                "optionTxt": "You must have a reference to an instance of the enclosing class in order to instantiate it."
              },
              {
                "optionTxt": "It does not have access to nonstatic members of the enclosing class."
              },
              {
                "optionTxt": "static"
              },
              {
                "optionTxt": "It must extend the enclosing class."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which constructs an anonymous inner class instance?",
            "options": [
              {
                "optionTxt": "Runnable r = new Runnable() { };"
              },
              {
                "optionTxt": "Runnable r = new Runnable(public void run() { });"
              },
              {
                "optionTxt": "Runnable r = new Runnable { public void run(){}};"
              },
              {
                "optionTxt": "System.out.println(new Runnable() {public void run() { }});"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "class Foo \n{\n    class Bar{ }\n}\nclass Test \n{\n    public static void main (String [] args) \n    {\n        Foo f = new Foo();\n        /* Line 10: Missing statement ? */\n    }\n}\n\nwhich statement, inserted at line 10, creates an instance of Bar?",
            "options": [
              {
                "optionTxt": "Foo.Bar b = new Foo.Bar();"
              },
              {
                "optionTxt": "Foo.Bar b = f.new Bar();"
              },
              {
                "optionTxt": "Bar b = new f.Bar();"
              },
              {
                "optionTxt": "Bar b = f.new Bar();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "public class MyOuter \n{\n    public static class MyInner \n    {\n        public static void foo() { }\n    }\n}\n\nwhich statement, if placed in a class other than MyOuter or MyInner, instantiates an instance of the nested class?",
            "options": [
              {
                "optionTxt": "MyOuter.MyInner m = new MyOuter.MyInner();"
              },
              {
                "optionTxt": "MyOuter.MyInner mi = new MyInner();"
              },
              {
                "optionTxt": "MyOuter m = new MyOuter();\n\nMyOuter.MyInner mi = m.new MyOuter.MyInner();"
              },
              {
                "optionTxt": "MyInner mi = new MyOuter.MyInner();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          }
        ]
      },
      {
        "topic": "Threads",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the name of the method used to start a thread execution?",
            "options": [
              {
                "optionTxt": "init();"
              },
              {
                "optionTxt": "start();"
              },
              {
                "optionTxt": "run();"
              },
              {
                "optionTxt": "resume();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "Which two are valid constructors for Thread?\nThread(Runnable r, String name)\nThread()\nThread(int priority)\nThread(Runnable r, ThreadGroup g)\nThread(Runnable r, int priority)",
            "options": [
              {
                "optionTxt": "1 and 3"
              },
              {
                "optionTxt": "2 and 4"
              },
              {
                "optionTxt": "1 and 2"
              },
              {
                "optionTxt": "2 and 5"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which three are methods of the Object class?\nnotify();\nnotifyAll();\nisInterrupted();\nsynchronized();\ninterrupt();\nwait(long msecs);\nsleep(long msecs);\nyield();",
            "options": [
              {
                "optionTxt": "1, 2, 4"
              },
              {
                "optionTxt": "2, 4, 5"
              },
              {
                "optionTxt": "1, 2, 6"
              },
              {
                "optionTxt": "2, 3, 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "class X implements Runnable \n{ \n    public static void main(String args[]) \n    {\n        /* Missing code? */\n    } \n    public void run() {} \n}\n\nWhich of the following line of code is suitable to start a thread ?",
            "options": [
              {
                "optionTxt": "Thread t = new Thread(X);"
              },
              {
                "optionTxt": "Thread t = new Thread(X); t.start();"
              },
              {
                "optionTxt": "X run = new X(); Thread t = new Thread(run); t.start();"
              },
              {
                "optionTxt": "Thread t = new Thread(); x.run();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "Which cannot directly cause a thread to stop executing?",
            "options": [
              {
                "optionTxt": "SetPriority()"
              },
              {
                "optionTxt": "wait()"
              },
              {
                "optionTxt": "notify()"
              },
              {
                "optionTxt": "read()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which two of the following methods are defined in class Thread?\nstart()\nwait()\nnotify()\nrun()\nterminate()",
            "options": [
              {
                "optionTxt": "1 and 4"
              },
              {
                "optionTxt": "2 and 3"
              },
              {
                "optionTxt": "3 and 4"
              },
              {
                "optionTxt": "2 and 4"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "Which three guarantee that a thread will leave the running state?\nyield()\nwait()\nnotify()\nnotifyAll()\nsleep(1000)\naLiveThread.join()\nThread.killThread()",
            "options": [
              {
                "optionTxt": "1, 2 and 4"
              },
              {
                "optionTxt": "2, 5 and 6"
              },
              {
                "optionTxt": "3, 4 and 7"
              },
              {
                "optionTxt": "4, 5 and 7"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "Which of the following will directly stop the execution of a Thread?",
            "options": [
              {
                "optionTxt": "wait()"
              },
              {
                "optionTxt": "notify()"
              },
              {
                "optionTxt": "notifyall()"
              },
              {
                "optionTxt": "exits synchronized code"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "9.",
            "questionText": "Which method must be defined by a class implementing the java.lang.Runnable interface?",
            "options": [
              {
                "optionTxt": "void run()"
              },
              {
                "optionTxt": "public void run()"
              },
              {
                "optionTxt": "public void start()"
              },
              {
                "optionTxt": "void run(int priority)"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "10.",
            "questionText": "Which will contain the body of the thread?",
            "options": [
              {
                "optionTxt": "run();"
              },
              {
                "optionTxt": "start();"
              },
              {
                "optionTxt": "stop();"
              },
              {
                "optionTxt": "main();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "11.",
            "questionText": "Which method registers a thread in a thread scheduler?",
            "options": [
              {
                "optionTxt": "run();"
              },
              {
                "optionTxt": "construct();"
              },
              {
                "optionTxt": "start();"
              },
              {
                "optionTxt": "register();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "12.",
            "questionText": "Assume the following method is properly synchronized and called from a thread A on an object B:\n\nwait(2000);\n\nAfter calling this method, when will the thread A become a candidate to get another turn at the CPU?",
            "options": [
              {
                "optionTxt": "A"
              },
              {
                "optionTxt": "B"
              },
              {
                "optionTxt": "A"
              },
              {
                "optionTxt": "B"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "13.",
            "questionText": "Which of the following will not directly cause a thread to stop?",
            "options": [
              {
                "optionTxt": "notify()"
              },
              {
                "optionTxt": "wait()"
              },
              {
                "optionTxt": "InputStream access"
              },
              {
                "optionTxt": "sleep()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "14.",
            "questionText": "Which class or interface defines the wait(), notify(),and notifyAll() methods?",
            "options": [
              {
                "optionTxt": "Object"
              },
              {
                "optionTxt": "Thread"
              },
              {
                "optionTxt": "Runnable"
              },
              {
                "optionTxt": "Class"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "15.",
            "questionText": "public class MyRunnable implements Runnable \n{\n    public void run() \n    {\n        // some code here\n    }\n}\n\nwhich of these will create and start this thread?",
            "options": [
              {
                "optionTxt": "new Runnable(MyRunnable).start();"
              },
              {
                "optionTxt": "new Thread(MyRunnable).run();"
              },
              {
                "optionTxt": "new Thread(new MyRunnable()).start();"
              },
              {
                "optionTxt": "new MyRunnable().start();"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          }
        ]
      },
      {
        "topic": "Garbage Collections",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "void start() {  \n    A a = new A(); \n    B b = new B(); \n    a.s(b);  \n    b = null; /* Line 5 */\n    a = null;  /* Line 6 */\n    System.out.println(\"start completed\"); /* Line 7 */\n} \n\nWhen is the B object, created in line 3, eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "after line 5"
              },
              {
                "optionTxt": "after line 6"
              },
              {
                "optionTxt": "after line 7"
              },
              {
                "optionTxt": "There is no way to be absolutely certain."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "class HappyGarbage01 \n{ \n    public static void main(String args[]) \n    {\n        HappyGarbage01 h = new HappyGarbage01(); \n        h.methodA(); /* Line 6 */\n    } \n    Object methodA() \n    {\n        Object obj1 = new Object(); \n        Object [] obj2 = new Object[1]; \n        obj2[0] = obj1; \n        obj1 = null; \n        return obj2[0]; \n    } \n}\n\nWhere will be the most chance of the garbage collector being invoked?",
            "options": [
              {
                "optionTxt": "After line 9"
              },
              {
                "optionTxt": "After line 10"
              },
              {
                "optionTxt": "After line 11"
              },
              {
                "optionTxt": "methodA()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "class Bar { } \nclass Test \n{  \n    Bar doBar() \n    {\n        Bar b = new Bar(); /* Line 6 */\n        return b; /* Line 7 */\n    } \n    public static void main (String args[]) \n    { \n        Test t = new Test();  /* Line 11 */\n        Bar newBar = t.doBar();  /* Line 12 */\n        System.out.println(\"newBar\"); \n        newBar = new Bar(); /* Line 14 */\n        System.out.println(\"finishing\"); /* Line 15 */\n    } \n}\n\nAt what point is the Bar object, created on line 6, eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "after line 12"
              },
              {
                "optionTxt": "after line 14"
              },
              {
                "optionTxt": "doBar()"
              },
              {
                "optionTxt": "main()"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "class Test \n{  \n    private Demo d; \n    void start() \n    {  \n        d = new Demo(); \n        this.takeDemo(d); /* Line 7 */\n    } /* Line 8 */\n    void takeDemo(Demo demo) \n    { \n        demo = null;  \n        demo = new Demo(); \n    } \n}\n\nWhen is the Demo object eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "After line 7"
              },
              {
                "optionTxt": "After line 8"
              },
              {
                "optionTxt": "start()"
              },
              {
                "optionTxt": "When the instance running this code is made eligible for garbage collection."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "public class X \n{\n    public static void main(String [] args) \n    {\n        X x = new X();\n        X x2 = m1(x); /* Line 6 */\n        X x4 = new X();\n        x2 = x4; /* Line 8 */\n        doComplexStuff();\n    }\n    static X m1(X mx) \n    {\n        mx = new X();\n        return mx;\n    }\n}\n\nAfter line 8 runs. how many objects are eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "0"
              },
              {
                "optionTxt": "1"
              },
              {
                "optionTxt": "2"
              },
              {
                "optionTxt": "3"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "public Object m() \n{  \n    Object o = new Float(3.14F); \n    Object [] oa = new Object[l];\n    oa[0] = o; /* Line 5 */\n    o = null;  /* Line 6 */\n    oa[0] = null; /* Line 7 */\n    return o; /* Line 8 */\n}\n\nWhen is the Float object, created in line 3, eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "just after line 5"
              },
              {
                "optionTxt": "just after line 6"
              },
              {
                "optionTxt": "just after line 7"
              },
              {
                "optionTxt": "just after line 8"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "class X2 \n{\n    public X2 x;\n    public static void main(String [] args) \n    {\n        X2 x2 = new X2();  /* Line 6 */\n        X2 x3 = new X2();  /* Line 7 */\n        x2.x = x3;\n        x3.x = x2;\n        x2 = new X2();\n        x3 = x2; /* Line 11 */\n        doComplexStuff();\n    }\n}\n\nafter line 11 runs, how many objects are eligible for garbage collection?",
            "options": [
              {
                "optionTxt": "0"
              },
              {
                "optionTxt": "1"
              },
              {
                "optionTxt": "2"
              },
              {
                "optionTxt": "3"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "What allows the programmer to destroy an object x?",
            "options": [
              {
                "optionTxt": "x.delete()"
              },
              {
                "optionTxt": "x.finalize()"
              },
              {
                "optionTxt": "Runtime.getRuntime().gc()"
              },
              {
                "optionTxt": "Only the garbage collection system can destroy an object."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "public Object m() \n{  \n    Object o = new Float(3.14F); \n    Object [] oa = new Object[l];\n    oa[0] = o; /* Line 5 */\n    o = null;  /* Line 6 */\n    oa[0] = null; /* Line 7 */\n    return o; /* Line 8 */\n}\n\nWhen is the Float object, created in line 3, eligible for garbage collection?\nLanguage: java\npublic Object m() \n{  \n    Object o = new Float(3.14F); \n    Object [] oa = new Object[l];\n    oa[0] = o; /* Line 5 */\n    o = null;  /* Line 6 */\n    oa[0] = null; /* Line 7 */\n    return o; /* Line 8 */\n}",
            "options": [
              {
                "optionTxt": "just after line 5"
              },
              {
                "optionTxt": "just after line 6"
              },
              {
                "optionTxt": "just after line 7"
              },
              {
                "optionTxt": "just after line 8"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "class X2 \n{\n    public X2 x;\n    public static void main(String [] args) \n    {\n        X2 x2 = new X2();  /* Line 6 */\n        X2 x3 = new X2();  /* Line 7 */\n        x2.x = x3;\n        x3.x = x2;\n        x2 = new X2();\n        x3 = x2; /* Line 11 */\n        doComplexStuff();\n    }\n}\n\nafter line 11 runs, how many objects are eligible for garbage collection?\nLanguage: java\nclass X2 \n{\n    public X2 x;\n    public static void main(String [] args) \n    {\n        X2 x2 = new X2();  /* Line 6 */\n        X2 x3 = new X2();  /* Line 7 */\n        x2.x = x3;\n        x3.x = x2;\n        x2 = new X2();\n        x3 = x2; /* Line 11 */\n        doComplexStuff();\n    }\n}",
            "options": [
              {
                "optionTxt": "0"
              },
              {
                "optionTxt": "1"
              },
              {
                "optionTxt": "2"
              },
              {
                "optionTxt": "3"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "C"
            }
          },
          {
            "questionNo": "8.",
            "questionText": "What allows the programmer to destroy an object x?\nLanguage: \n",
            "options": [
              {
                "optionTxt": "x.delete()"
              },
              {
                "optionTxt": "x.finalize()"
              },
              {
                "optionTxt": "Runtime.getRuntime().gc()"
              },
              {
                "optionTxt": "Only the garbage collection system can destroy an object."
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "D"
            }
          }
        ]
      }
    ]
  },
  {
    "title": "Python",
    "topics": [
      {
        "topic": "Syntax and Semantics",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which of the following is the correct way to define a function in Python?",
            "options": [
              {
                "optionTxt": "function myFunc():"
              },
              {
                "optionTxt": "def myFunc():"
              },
              {
                "optionTxt": "func myFunc(){}"
              },
              {
                "optionTxt": "def myFunc[]:"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "2.",
            "questionText": "What is the correct way to create a list in Python?",
            "options": [
              {
                "optionTxt": "list1 = list(1, 2, 3)"
              },
              {
                "optionTxt": "list1 = [1, 2, 3]"
              },
              {
                "optionTxt": "list1 = list[1, 2, 3]"
              },
              {
                "optionTxt": "list1 = {1, 2, 3}"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "3.",
            "questionText": "Which keyword is used to define a block of code in Python that does nothing?",
            "options": [
              {
                "optionTxt": "null"
              },
              {
                "optionTxt": "pass"
              },
              {
                "optionTxt": "void"
              },
              {
                "optionTxt": "skip"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "4.",
            "questionText": "What will be the output of the following code snippet?\n\n```python\na = True\nb = False\nc = False\n\nif a or b and c:\n    print(\"GEEKS\")\nelse:\n    print(\"FOR GEEKS\")\n```",
            "options": [
              {
                "optionTxt": "\"GEEKS\""
              },
              {
                "optionTxt": "\"FOR GEEKS\""
              },
              {
                "optionTxt": "SyntaxError"
              },
              {
                "optionTxt": "None"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "5.",
            "questionText": "In Python, how do you capture all additional arguments passed to a function?",
            "options": [
              {
                "optionTxt": "Using the *args syntax"
              },
              {
                "optionTxt": "By declaring a list argument"
              },
              {
                "optionTxt": "Using the **kwargs syntax"
              },
              {
                "optionTxt": "By declaring a dictionary argument"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "A"
            }
          },
          {
            "questionNo": "6.",
            "questionText": "Which of the following is not a valid variable name in Python?",
            "options": [
              {
                "optionTxt": "my_var"
              },
              {
                "optionTxt": "my-var"
              },
              {
                "optionTxt": "_myvar"
              },
              {
                "optionTxt": "myVar"
              }
            ],
            "answer": {
              "text": "Answer: Option",
              "Letter": "B"
            }
          },
          {
            "questionNo": "7.",
            "questionText": "In Python, what is the correct way to handle multiple exceptions?",
            "options": [
              { "optionTxt": "except ExceptionType1, ExceptionType2:" },
              { "optionTxt": "except (ExceptionType1, ExceptionType2):" },
              { "optionTxt": "except ExceptionType1 or ExceptionType2:" },
              { "optionTxt": "except ExceptionType1 and ExceptionType2:" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "B" }
          },
          {
            "questionNo": "8.",
            "questionText": "Which of the following is the correct operator for power(xy)?",
            "options": [
              { "optionTxt": "X^y" },
              { "optionTxt": "X**y" },
              { "optionTxt": "X^^y" },
              { "optionTxt": "None of the above" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "B" }
          },
          {
            "questionNo": "9.",
            "questionText": "What does the following expression return in Python: 'not (True and False)'?",
            "options": [
              { "optionTxt": "True" },
              { "optionTxt": "False" },
              { "optionTxt": "None" },
              { "optionTxt": "SyntaxError" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "A" }
          },
          {
            "questionNo": "10.",
            "questionText": "What is the output of len([1, 2, 3, 4, 5]) in Python?",
            "options": [
              { "optionTxt": "5" },
              { "optionTxt": "4" },
              { "optionTxt": "TypeError" },
              { "optionTxt": "None" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "A" }
          },
          {
            "questionNo": "11.",
            "questionText": "Which keyword in Python is used to create an iterator containing numbers that increment from 0 to a specified number?",
            "options": [
              { "optionTxt": "range" },
              { "optionTxt": "xrange" },
              { "optionTxt": "enumerate" },
              { "optionTxt": "iter" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "A" }
          },
          {
            "questionNo": "12.",
            "questionText": "What is the result of this Python code snippet: '5 // 2'?",
            "options": [
              { "optionTxt": "2" },
              { "optionTxt": "2.5" },
              { "optionTxt": "3" },
              { "optionTxt": "SyntaxError" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "A" }
          },
          {
            "questionNo": "13.",
            "questionText": "In Python, what is the output of 'isinstance(\"hello\", str)'?",
            "options": [
              { "optionTxt": "True" },
              { "optionTxt": "False" },
              { "optionTxt": "TypeError" },
              { "optionTxt": "ValueError" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "A" }
          },
          {
            "questionNo": "14.",
            "questionText": "What is the result of the following expression in Python: 3 ** 2 // 2?",
            "options": [
              { "optionTxt": "4.5" },
              { "optionTxt": "4" },
              { "optionTxt": "5" },
              { "optionTxt": "8" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "B" }
          },
          {
            "questionNo": "15.",
            "questionText": "In Python 3, what is type of the result returned by function `range(5)`?",
            "options": [
              { "optionTxt": "list" },
              { "optionTxt": "dict" },
              { "optionTxt": "range object" },
              { "optionTxt": "tuple" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "C" }
          },
          {
            "questionNo": "16.",
            "questionText": "Which of these in not a core data type in Python programming?",
            "options": [
              { "optionTxt": "Lists" },
              { "optionTxt": "Dictionary" },
              { "optionTxt": "Tuples" },
              { "optionTxt": "Class" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "D" }
          },
          {
            "questionNo": "17.",
            "questionText": "In Python, which keyword is used to begin a class definition?",
            "options": [
              { "optionTxt": "class" },
              { "optionTxt": "Class" },
              { "optionTxt": "def" },
              { "optionTxt": "define" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "A" }
          },
          {
            "questionNo": "18.",
            "questionText": "What does the `break` keyword do in Python?",
            "options": [
              { "optionTxt": "Pauses the execution of the loop" },
              { "optionTxt": "Stops the execution of the loop and exits it" },
              { "optionTxt": "Indicates the end of the loop block" },
              { "optionTxt": "Skips the rest of the current loop iteration" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "B" }
          },
          {
            "questionNo": "19.",
            "questionText": "What does the `continue` keyword do in Python?",
            "options": [
              { "optionTxt": "Pauses the execution of the loop" },
              { "optionTxt": "Stops the execution of the loop and exits it" },
              { "optionTxt": "Indicates the end of the loop block" },
              {
                "optionTxt": "Skips the rest of the current loop iteration and moves to the next iteration"
              }
            ],
            "answer": { "text": "Answer: Option", "Letter": "D" }
          },
          {
            "questionNo": "20.",
            "questionText": "In Python, how is a multiline string created?",
            "options": [
              { "optionTxt": "Using a semicolon (;) at the end of each line" },
              { "optionTxt": "Using triple quotes (\"\"\" or ''')" },
              { "optionTxt": "By ending each line with a backslash (\\)" },
              {
                "optionTxt": "By starting and ending with double or single quotes (\" or ')"
              }
            ],
            "answer": { "text": "Answer: Option", "Letter": "B" }
          },
          {
            "questionNo": "21.",
            "questionText": "Which of the following is a valid variable assignment in Python?",
            "options": [
              { "optionTxt": "_my_var = 10" },
              { "optionTxt": "2myVar = 'Hello'" },
              { "optionTxt": "my-var = True" },
              { "optionTxt": "'var' = 123" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "A" }
          },
          {
            "questionNo": "22.",
            "questionText": "Which statement about indentation in Python is correct?",
            "options": [
              { "optionTxt": "Indentation is optional in Python." },
              { "optionTxt": "Python uses indentation to define blocks of code." },
              {
                "optionTxt": "You can mix tabs and spaces in Python for indentation."
              },
              {
                "optionTxt": "As long as code blocks are aligned, the amount of indentation doesn't matter."
              }
            ],
            "answer": { "text": "Answer: Option", "Letter": "B" }
          },
          {
            "questionNo": "23.",
            "questionText": "What is the output of the following code?\n\nx = 'foo'\ny = 2\nprint(x + y)",
            "options": [
              { "optionTxt": "foo2" },
              { "optionTxt": "'TypeError' will be raised" },
              { "optionTxt": "2foo" },
              { "optionTxt": "None of the above" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "B" }
          },
          {
            "questionNo": "24.",
            "questionText": "How can you generate a list of numbers from 1 to 10 in Python?",
            "options": [
              { "optionTxt": "list(1, 10)" },
              { "optionTxt": "[1, 10]" },
              { "optionTxt": "list(range(1, 11))" },
              { "optionTxt": "[1..10]" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "C" }
          },
          {
            "questionNo": "25.",
            "questionText": "What is the correct syntax for defining a dictionary called 'my_dict' with keys 'id', 'name', and 'age'?",
            "options": [
              { "optionTxt": "my_dict = {'id': 1, 'name': 'John', 'age': 25}" },
              { "optionTxt": "my_dict = [id: 1, name: 'John', age: 25]" },
              { "optionTxt": "my_dict = (id=1, name='John', age=25)" },
              { "optionTxt": "my_dict = dict('id'=1, 'name'='John', 'age'=25)" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "A" }
          },
          {
            "questionNo": "26.",
            "questionText": "Which of the following lines of code correctly creates a function in Python that calculates the square of a number?",
            "options": [
              { "optionTxt": "def square(num) return num ** 2" },
              { "optionTxt": "def square(num): return num * num" },
              { "optionTxt": "square = lambda num: num ** 2" },
              { "optionTxt": "All of the above" }
            ],
            "answer": { "text": "Answer: Option", "Letter": "D" }
          },
          {
            "questionNo": "27.",
            "questionText": "What is the use of the 'elif' keyword in Python?",
            "options": [
              {
                "optionTxt": "It's a shorthand for 'else if' and is used to specify a new condition to test if the previous condition was false."
              },
              { "optionTxt": "It's a special method to terminate the program." },
              {
                "optionTxt": "It's used to create an else block that runs regardless of the previous conditions."
              },
              {
                "optionTxt": "It's an alias for the 'else' keyword and has no difference in functionality."
              }
            ],
            "answer": { "text": "Answer: Option", "Letter": "A" }
          }
        ]
      },
      {
        "topic": "Data Types and Variables",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the data type of the variable `a` after the following assignment: `a = 42`?",
            "options": [
                {"optionTxt": "int"},
                {"optionTxt": "float"},
                {"optionTxt": "str"},
                {"optionTxt": "bool"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "2.",
            "questionText": "Which of the following is not a Python primitive data structure?",
            "options": [
                {"optionTxt": "Lists"},
                {"optionTxt": "Dictionaries"},
                {"optionTxt": "Tuples"},
                {"optionTxt": "Classes"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "3.",
            "questionText": "Which of these is the correct way to initialize a variable `length` with an integer value?",
            "options": [
                {"optionTxt": "int length = 5"},
                {"optionTxt": "length := 5"},
                {"optionTxt": "length = int(5)"},
                {"optionTxt": "length = 5"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "4.",
            "questionText": "What will be the type of variable `b` after this assignment: `b = 3.14`?",
            "options": [
                {"optionTxt": "int"},
                {"optionTxt": "float"},
                {"optionTxt": "str"},
                {"optionTxt": "bool"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "5.",
            "questionText": "How do you convert the string `'123'` to an integer in Python?",
            "options": [
                {"optionTxt": "int('123')"},
                {"optionTxt": "str(123)"},
                {"optionTxt": "'123'.toInt()"},
                {"optionTxt": "parseInt('123')"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "6.",
            "questionText": "Which of the following variables is incorrectly named in Python?",
            "options": [
                {"optionTxt": "my_var"},
                {"optionTxt": "myVar"},
                {"optionTxt": "2myVar"},
                {"optionTxt": "_myVar"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "7.",
            "questionText": "In Python, which of the following statements about mutable and immutable data types is true?",
            "options": [
                {"optionTxt": "Lists are immutable, and tuples are mutable."},
                {"optionTxt": "Strings are mutable, and lists are immutable."},
                {"optionTxt": "Tuples are immutable, and lists are mutable."},
                {"optionTxt": "All data types in Python are mutable."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
          "questionNo": "8.",
          "questionText": "What is the output of the following code? `print(type([1, 2, 3]))`",
          "options": [
              {"optionTxt": "<class 'list'>"},
              {"optionTxt": "<class 'tuple'>"},
              {"optionTxt": "<class 'set'>"},
              {"optionTxt": "<class 'dict'>"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "9.",
          "questionText": "Which function in Python can be used to determine the number of items in a list named 'data'?",
          "options": [
              {"optionTxt": "count(data)"},
              {"optionTxt": "len(data)"},
              {"optionTxt": "sizeof(data)"},
              {"optionTxt": "length(data)"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "10.",
          "questionText": "Which data type would be used to store a numeric value that represents the total population of a city?",
          "options": [
              {"optionTxt": "String"},
              {"optionTxt": "Boolean"},
              {"optionTxt": "Integer"},
              {"optionTxt": "Float"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "11.",
          "questionText": "What is the result of the following operation in Python: `bool('False')`?",
          "options": [
              {"optionTxt": "True"},
              {"optionTxt": "False"},
              {"optionTxt": "SyntaxError"},
              {"optionTxt": "None"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "12.",
          "questionText": "Which of the following ways can you correctly create a dictionary in Python?",
          "options": [
              {"optionTxt": "x = {'key1': 'value1', 'key2': 'value2'}"},
              {"optionTxt": "x = dict(key1='value1', key2='value2')"},
              {"optionTxt": "x = dict('key1': 'value1', 'key2': 'value2')"},
              {"optionTxt": "Both A and B are correct"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "13.",
          "questionText": "In Python, how can you convert a float to an integer?",
          "options": [
              {"optionTxt": "int('3.5')"},
              {"optionTxt": "float(3.5)"},
              {"optionTxt": "int(3.5)"},
              {"optionTxt": "convert(3.5, 'int')"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "14.",
          "questionText": "What is the correct way to create a set containing elements 1, 2, and 3 in Python?",
          "options": [
              {"optionTxt": "set(1, 2, 3)"},
              {"optionTxt": "{1, 2, 3}"},
              {"optionTxt": "[1, 2, 3]"},
              {"optionTxt": "(1, 2, 3)"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "15.",
        "questionText": "Which of the following is not a valid way to define a tuple in Python?",
        "options": [
            {"optionTxt": "a = (1, 2, 3)"},
            {"optionTxt": "b = 1, 2, 3"},
            {"optionTxt": "c = tuple([1, 2, 3])"},
            {"optionTxt": "d = [1, 2, 3]"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "16.",
        "questionText": "How do you check the type of an object in Python?",
        "options": [
            {"optionTxt": "typeOf(object)"},
            {"optionTxt": "typeof(object)"},
            {"optionTxt": "type(object)"},
            {"optionTxt": "getType(object)"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "17.",
        "questionText": "What does the `del` keyword do in Python when used with variable names?",
        "options": [
            {"optionTxt": "Deletes the variable and frees up the associated memory"},
            {"optionTxt": "Marks the variable for garbage collection"},
            {"optionTxt": "Clears the value of the variable"},
            {"optionTxt": "Deletes the variable from the local scope only"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "18.",
        "questionText": "What is the output of the following code snippet: `print(8 == 8.0)`?",
        "options": [
            {"optionTxt": "True"},
            {"optionTxt": "False"},
            {"optionTxt": "TypeError"},
            {"optionTxt": "None"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "19.",
        "questionText": "What is the default value of variables declared in Python?",
        "options": [
            {"optionTxt": "Depends on the data type"},
            {"optionTxt": "0 or equivalent"},
            {"optionTxt": "None"},
            {"optionTxt": "Variables must be initialized when declared"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "20.",
        "questionText": "In Python, which keyword is used to declare a global variable inside a function?",
        "options": [
            {"optionTxt": "global"},
            {"optionTxt": "public"},
            {"optionTxt": "extern"},
            {"optionTxt": "nonlocal"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      }
      
        ]
      },
      {
        "topic": "Control Structures",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What will the following Python code output? \n\nif 10 > 5:\n    print('Ten is greater than five!')",
            "options": [
                {"optionTxt": "Ten is greater than five!"},
                {"optionTxt": "False"},
                {"optionTxt": "True"},
                {"optionTxt": "No output"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "2.",
            "questionText": "Which Python keyword is used to start a loop?",
            "options": [
                {"optionTxt": "iterate"},
                {"optionTxt": "repeat"},
                {"optionTxt": "for"},
                {"optionTxt": "loop"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "3.",
            "questionText": "Which type of loop is best when the number of iterations is known?",
            "options": [
                {"optionTxt": "while loop"},
                {"optionTxt": "do-while loop"},
                {"optionTxt": "for loop"},
                {"optionTxt": "repeat-until loop"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "4.",
            "questionText": "What does the 'break' keyword do in a loop?",
            "options": [
                {"optionTxt": "Pauses the loop"},
                {"optionTxt": "Terminates the loop immediately"},
                {"optionTxt": "Skips one iteration of the loop"},
                {"optionTxt": "None of the above"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "5.",
            "questionText": "How do you print numbers 1 through 5 in Python using a loop?",
            "options": [
                {"optionTxt": "for i in range(1, 6): print(i)"},
                {"optionTxt": "for i in range(5): print(i + 1)"},
                {"optionTxt": "for i in range(5): print(i)"},
                {"optionTxt": "Both A and B are correct"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "6.",
            "questionText": "What will the following code print?\n\nx = 0\nwhile x < 10:\n    x += 3\n    print(x)",
            "options": [
                {"optionTxt": "3, 6, 9, 12"},
                {"optionTxt": "0, 3, 6, 9"},
                {"optionTxt": "3, 6, 9"},
                {"optionTxt": "0, 3, 6, 9, 12"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "7.",
            "questionText": "Which keyword is used to check a condition after the loop has executed in Python?",
            "options": [
                {"optionTxt": "check"},
                {"optionTxt": "for"},
                {"optionTxt": "while"},
                {"optionTxt": "do-while"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
          "questionNo": "8.",
          "questionText": "What is the output of the following Python code snippet?\n\ni = 5\nwhile i > 0:\n    i -= 1\n    if i == 2:\n        break\n    print(i)",
          "options": [
              {"optionTxt": "4, 3, 2"},
              {"optionTxt": "4, 3"},
              {"optionTxt": "4, 3, 1, 0"},
              {"optionTxt": "4, 3, 1"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "9.",
          "questionText": "What does the 'continue' keyword do within a loop?",
          "options": [
              {"optionTxt": "It terminates the loop immediately."},
              {"optionTxt": "It skips the rest of the code inside the loop for the current iteration."},
              {"optionTxt": "It exits the program."},
              {"optionTxt": "It restarts the loop from the first iteration."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "10.",
          "questionText": "Which loop structure would you use when you want the loop to run at least once regardless of the condition on subsequent iterations?",
          "options": [
              {"optionTxt": "for loop"},
              {"optionTxt": "while loop"},
              {"optionTxt": "do-while loop"},
              {"optionTxt": "None of the above"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "11.",
          "questionText": "How do you create a nested loop to print each pair of numbers from two lists `a = [1, 2]` and `b = [3, 4]`?",
          "options": [
              {"optionTxt": "for i in a: for j in b: print(i, j)"},
              {"optionTxt": "for i in a and j in b: print(i, j)"},
              {"optionTxt": "for i in a: for j in b print(i, j)"},
              {"optionTxt": "for i in a: \n    for j in b: \n        print(i, j)"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "12.",
          "questionText": "How can the range function be used to iterate over a sequence of numbers in reverse order starting from 10 and ending at 1?",
          "options": [
              {"optionTxt": "range(10, 0)"},
              {"optionTxt": "range(10, 1, -1)"},
              {"optionTxt": "range(1, 10)"},
              {"optionTxt": "range(10, 0, -1)"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "13.",
          "questionText": "What will happen if an `else` block is written after a `for` loop in Python?",
          "options": [
              {"optionTxt": "The `else` block executes after the loop completes normally without a `break`."},
              {"optionTxt": "The `else` block executes at the start of each iteration."},
              {"optionTxt": "The `else` block executes only if the loop didn't execute at all."},
              {"optionTxt": "SyntaxError will be raised."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "14.",
          "questionText": "In a nested `if` statement, what does the `elif` keyword represent?",
          "options": [
              {"optionTxt": "An alternate if statement that is checked if the previous if or elif was false."},
              {"optionTxt": "An early exit point that stops checking further conditions if the previous one was true."},
              {"optionTxt": "A repetitive if that executes multiple times."},
              {"optionTxt": "None of the above"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "15.",
        "questionText": "Identify the error in the following code snippet:\n\nfor i in range(10)\n    print(i)",
        "options": [
            {"optionTxt": "The range function is used incorrectly."},
            {"optionTxt": "The print statement should not be indented."},
            {"optionTxt": "There is a missing colon at the end of the for statement."},
            {"optionTxt": "No error in the code."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "16.",
        "questionText": "What is the output of the following code snippet?\n\nx = 1\nwhile x < 5:\n    x += 1\n    if x % 2 == 0:\n        continue\n    print(x)",
        "options": [
            {"optionTxt": "1, 3, 5"},
            {"optionTxt": "2, 4"},
            {"optionTxt": "3, 5"},
            {"optionTxt": "1, 2, 3, 4, 5"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "17.",
        "questionText": "Which of the following will not cause an infinite loop?",
        "options": [
            {"optionTxt": "while True: pass"},
            {"optionTxt": "for i in range(10): continue"},
            {"optionTxt": "x = 10\nwhile x > 0: x += 1"},
            {"optionTxt": "x = 10\nwhile x > 0: x -= 1"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "18.",
        "questionText": "What is the purpose of the `pass` statement in Python loops?",
        "options": [
            {"optionTxt": "To indicate that a block of code is intentionally left empty."},
            {"optionTxt": "To pass control to the next iteration of the loop."},
            {"optionTxt": "To terminate the loop immediately."},
            {"optionTxt": "To check if the loop condition still holds true."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "19.",
        "questionText": "What is the output of the following code snippet?\n\nnumbers = [1, 2, 3, 4]\nfor num in numbers:\n    if num % 2 == 0:\n        break\n    print(num)",
        "options": [
            {"optionTxt": "1"},
            {"optionTxt": "1, 2"},
            {"optionTxt": "1, 3"},
            {"optionTxt": "None of the above"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "20.",
        "questionText": "Examine the following loop structure. What does it do?\n\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num % 2 == 0:\n        print(num * 2)",
        "options": [
            {"optionTxt": "Prints double the value of all numbers in the list."},
            {"optionTxt": "Prints double the value of even numbers in the list."},
            {"optionTxt": "Prints all even numbers from the list."},
            {"optionTxt": "Prints double the value of odd numbers in the list."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      }
      
        ]
      },
      {
        "topic": "Functions and Modules",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the correct syntax to define a function in Python that calculates the square of a number?",
            "options": [
                {"optionTxt": "function square(num): return num * num"},
                {"optionTxt": "def square(num): return num ** 2"},
                {"optionTxt": "func square(num) -> num * num"},
                {"optionTxt": "square(num) { return num * num; }"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "2.",
            "questionText": "What will happen if you try to call a function before its definition in Python?",
            "options": [
                {"optionTxt": "The function will execute without any issues."},
                {"optionTxt": "Python will raise a NameError."},
                {"optionTxt": "The function will return None."},
                {"optionTxt": "The script will fail silently without an error."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "3.",
            "questionText": "How do you import the 'sqrt' function from the 'math' module?",
            "options": [
                {"optionTxt": "import sqrt from math"},
                {"optionTxt": "include math.sqrt"},
                {"optionTxt": "from math import sqrt"},
                {"optionTxt": "import math.sqrt"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "4.",
            "questionText": "Which of the following is true about the arguments passed to a function in Python?",
            "options": [
                {"optionTxt": "Functions in Python cannot have arguments."},
                {"optionTxt": "Arguments are passed by reference by default."},
                {"optionTxt": "Arguments are passed by value by default."},
                {"optionTxt": "Python supports both positional and keyword arguments."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "5.",
            "questionText": "What is the purpose of the 'return' statement in a Python function?",
            "options": [
                {"optionTxt": "It exits the program."},
                {"optionTxt": "It prints the expression to the console."},
                {"optionTxt": "It terminates the function and optionally returns a value."},
                {"optionTxt": "It is used to declare the return type of the function."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "6.",
            "questionText": "How do you create a function with an arbitrary number of arguments in Python?",
            "options": [
                {"optionTxt": "def func(*args):"},
                {"optionTxt": "def func(**args):"},
                {"optionTxt": "def func(args*):"},
                {"optionTxt": "def func(args**):"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "7.",
            "questionText": "What does the '*args' parameter in a function definition allow?",
            "options": [
                {"optionTxt": "It allows the function to accept any number of keyword arguments."},
                {"optionTxt": "It allows the function to accept any number of positional arguments."},
                {"optionTxt": "It allows the function to access external variables."},
                {"optionTxt": "It allows the function to retain values between calls."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
          "questionNo": "8.",
          "questionText": "What will be the output of the following Python function call?\n\ndef greet(name):\n    return 'Hello, ' + name\n\ngreet('Alice')",
          "options": [
              {"optionTxt": "'Hello, Alice'"},
              {"optionTxt": "'Alice, Hello'"},
              {"optionTxt": "Hello, Alice"},
              {"optionTxt": "SyntaxError"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "9.",
          "questionText": "In Python, what does the '**kwargs' in a function signature mean?",
          "options": [
              {"optionTxt": "It collects extra positional arguments as a tuple."},
              {"optionTxt": "It specifies an exact number of keyword arguments."},
              {"optionTxt": "It collects extra keyword arguments as a dictionary."},
              {"optionTxt": "It forces all function arguments to be named explicitly."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "10.",
          "questionText": "Which statement about default parameter values in Python function definitions is true?",
          "options": [
              {"optionTxt": "Default parameters can be set for any function, regardless of other parameters."},
              {"optionTxt": "Default parameter values can only be used with keyword arguments."},
              {"optionTxt": "A non-default parameter cannot follow a default parameter."},
              {"optionTxt": "Default parameters can store changes between function calls."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "11.",
          "questionText": "Identify the error in this Python function definition:\n\ndef print_values(a, b=5, c):\n    print(a, b, c)",
          "options": [
              {"optionTxt": "Default parameters must be placed at the end."},
              {"optionTxt": "You cannot mix default and non-default parameters."},
              {"optionTxt": "The function should explicitly return a value."},
              {"optionTxt": "No error in the function definition."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "12.",
          "questionText": "How can you import only the `pi` constant from the `math` module?",
          "options": [
              {"optionTxt": "import math.pi"},
              {"optionTxt": "from math import pi"},
              {"optionTxt": "import pi from math"},
              {"optionTxt": "include math.pi"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "13.",
          "questionText": "What does the following code print?\n\ndef add(a, b):\n    return a + b\n\nresult = add(b=2, a=3)\nprint(result)",
          "options": [
              {"optionTxt": "5"},
              {"optionTxt": "Error"},
              {"optionTxt": "None"},
              {"optionTxt": "2"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "14.",
          "questionText": "What is the use of the 'global' keyword inside a function?",
          "options": [
              {"optionTxt": "It imports global variables from the main Python environment."},
              {"optionTxt": "It declares that a function's variable refers to the globally defined variable."},
              {"optionTxt": "It makes a local variable accessible outside the function."},
              {"optionTxt": "It is used to create global constants."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "15.",
        "questionText": "What is the purpose of the 'return' statement in a function without any arguments, like 'return'?",
        "options": [
            {"optionTxt": "It exits the program."},
            {"optionTxt": "It returns None."},
            {"optionTxt": "It causes a runtime error."},
            {"optionTxt": "It restarts the function."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "16.",
        "questionText": "How does Python handle recursive function calls?",
        "options": [
            {"optionTxt": "Python automatically optimizes recursive calls to iterative loops."},
            {"optionTxt": "Python supports recursive functions but has a limit on recursion depth."},
            {"optionTxt": "Recursive functions in Python run faster than their iterative counterparts."},
            {"optionTxt": "Python does not support recursion."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "17.",
        "questionText": "Which of the following statements about importing modules in Python is correct?",
        "options": [
            {"optionTxt": "You must always import the entire module and cannot select specific elements."},
            {"optionTxt": "Using 'import *' is recommended for all modules to simplify syntax."},
            {"optionTxt": "You can import modules using a nickname with the 'as' keyword."},
            {"optionTxt": "Modules once imported in a program cannot be re-imported or reloaded."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "18.",
        "questionText": "What does the following Python code output?\n\ndef make_multiplier(x):\n    def multiplier(n):\n        return x * n\n    return multiplier\n\ntimes3 = make_multiplier(3)\ntimes5 = make_multiplier(5)\n\nprint(times3(9), times5(3))",
        "options": [
            {"optionTxt": "27 15"},
            {"optionTxt": "18 9"},
            {"optionTxt": "30 15"},
            {"optionTxt": "None of the above"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "19.",
        "questionText": "Identify the error in this Python code:\n\ndef compute_area(radius):\n    pi = 3.14\n    area = pi * (radius ** 2)\nprint(area)",
        "options": [
            {"optionTxt": "The variable 'pi' should be defined outside the function."},
            {"optionTxt": "The print statement should be inside the function."},
            {"optionTxt": "The radius should be defined as a global variable."},
            {"optionTxt": "There is no error in the code."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "20.",
        "questionText": "What is the difference between parameters and arguments in Python functions?",
        "options": [
            {"optionTxt": "Parameters are the values provided to functions, while arguments are the variables in function definitions."},
            {"optionTxt": "Parameters are the variables in function definitions, while arguments are the values provided to functions."},
            {"optionTxt": "Parameters and arguments are terms that can be used interchangeably."},
            {"optionTxt": "There is no distinction; Python treats both as global variables."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      }
        ]
      },
      {
        "topic": "Data Collections",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "How do you add an item to the end of a list named 'items'?",
            "options": [
                {"optionTxt": "items.add(5)"},
                {"optionTxt": "items.append(5)"},
                {"optionTxt": "items.insert(len(items), 5)"},
                {"optionTxt": "Both B and C are correct"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "2.",
            "questionText": "What will the following code return? `{'apple', 'banana', 'cherry'} & {'google', 'microsoft', 'apple'}`",
            "options": [
                {"optionTxt": "{'apple'}"},
                {"optionTxt": "{'apple', 'banana', 'cherry', 'google', 'microsoft'}"},
                {"optionTxt": "{'banana', 'cherry'}"},
                {"optionTxt": "TypeError"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "3.",
            "questionText": "Which method can be used to remove an item from a set in Python?",
            "options": [
                {"optionTxt": "remove()"},
                {"optionTxt": "discard()"},
                {"optionTxt": "pop()"},
                {"optionTxt": "Both A and B are correct"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "4.",
            "questionText": "What is the correct way to access the value associated with the key 'color' in a dictionary named 'details'?",
            "options": [
                {"optionTxt": "details(color)"},
                {"optionTxt": "details['color']"},
                {"optionTxt": "details.get('color')"},
                {"optionTxt": "Both B and C are correct"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "5.",
            "questionText": "Which of the following is a mutable data type in Python?",
            "options": [
                {"optionTxt": "String"},
                {"optionTxt": "Tuple"},
                {"optionTxt": "List"},
                {"optionTxt": "All of the above"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "6.",
            "questionText": "How do you create a new set in Python?",
            "options": [
                {"optionTxt": "new_set = set()"},
                {"optionTxt": "new_set = {}"},
                {"optionTxt": "new_set = []"},
                {"optionTxt": "new_set = set([])"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "7.",
            "questionText": "What is the output of the following list operation? `len([1, 2, 3, [4, 5]])`",
            "options": [
                {"optionTxt": "4"},
                {"optionTxt": "5"},
                {"optionTxt": "None"},
                {"optionTxt": "TypeError"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
          "questionNo": "8.",
          "questionText": "What happens if you try to access a key that doesn't exist in a dictionary using the following syntax? `dictionary['key']`",
          "options": [
              {"optionTxt": "Returns None"},
              {"optionTxt": "Adds the key with a default None value"},
              {"optionTxt": "Raises a KeyError"},
              {"optionTxt": "Prints a warning message"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "9.",
          "questionText": "How can you convert a list to a tuple in Python?",
          "options": [
              {"optionTxt": "tuple(list)"},
              {"optionTxt": "list(to_tuple)"},
              {"optionTxt": "tuple([list])"},
              {"optionTxt": "convert(list, tuple)"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "10.",
          "questionText": "Which operation on a list is more time-efficient, appending an item to the end or inserting an item at the beginning?",
          "options": [
              {"optionTxt": "Appending"},
              {"optionTxt": "Inserting"},
              {"optionTxt": "Both are equally efficient"},
              {"optionTxt": "Depends on the size of the list"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "11.",
          "questionText": "Which Python data type would be best for implementing a phone book (i.e., mapping people's names to their phone numbers)?",
          "options": [
              {"optionTxt": "List"},
              {"optionTxt": "Set"},
              {"optionTxt": "Dictionary"},
              {"optionTxt": "Tuple"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "12.",
          "questionText": "How can you remove all items from a list in Python?",
          "options": [
              {"optionTxt": "list.remove()"},
              {"optionTxt": "del list[:"},
              {"optionTxt": "list.delete()"},
              {"optionTxt": "list.clear()"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "13.",
          "questionText": "What does the `zip()` function do in Python?",
          "options": [
              {"optionTxt": "Compresses the contents of iterables into a zip file"},
              {"optionTxt": "Creates an iterator that aggregates elements from each of the iterables"},
              {"optionTxt": "Unzips a zip file into a list"},
              {"optionTxt": "Converts multiple lists into a single dictionary"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "14.",
          "questionText": "What will the expression `set('hello')` yield in Python?",
          "options": [
              {"optionTxt": "{'h', 'e', 'l', 'o'}"},
              {"optionTxt": "{'hello'}"},
              {"optionTxt": "{'h', 'e', 'l', 'l', 'o'}"},
              {"optionTxt": "SyntaxError"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "15.",
        "questionText": "What is the result of the following dictionary operation? `{'a': 1, 'b': 2}.get('c', 3)`",
        "options": [
            {"optionTxt": "1"},
            {"optionTxt": "2"},
            {"optionTxt": "3"},
            {"optionTxt": "None"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "16.",
        "questionText": "How can you check if a list contains a particular item in Python?",
        "options": [
            {"optionTxt": "list.contains(item)"},
            {"optionTxt": "item in list"},
            {"optionTxt": "list.has(item)"},
            {"optionTxt": "list.find(item) != -1"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "17.",
        "questionText": "Which of the following code snippets will correctly merge two sets in Python, `set1` and `set2`?",
        "options": [
            {"optionTxt": "set1.join(set2)"},
            {"optionTxt": "set1 + set2"},
            {"optionTxt": "set1.update(set2)"},
            {"optionTxt": "set1.merge(set2)"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "18.",
        "questionText": "What is the output of the following code snippet? `print([1, 2, 3] + [4, 5, 6])`",
        "options": [
            {"optionTxt": "[1, 2, 3, 4, 5, 6]"},
            {"optionTxt": "[5, 7, 9]"},
            {"optionTxt": "TypeError"},
            {"optionTxt": "[[1, 2, 3], [4, 5, 6]]"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "19.",
        "questionText": "Which method should you use to add multiple items to a set in Python?",
        "options": [
            {"optionTxt": "add()"},
            {"optionTxt": "insert()"},
            {"optionTxt": "extend()"},
            {"optionTxt": "update()"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "20.",
        "questionText": "What will be the output of the following list comprehension? `[x**2 for x in range(5)]`",
        "options": [
            {"optionTxt": "[0, 1, 4, 9, 16]"},
            {"optionTxt": "[1, 2, 3, 4, 5]"},
            {"optionTxt": "[1, 4, 9, 16, 25]"},
            {"optionTxt": "[0, 1, 2, 3, 4]"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      }
        ]
      },
      {
        "topic": "Object-Oriented Programming",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the correct way to define a class in Python named 'Vehicle'?",
            "options": [
                {"optionTxt": "class Vehicle():"},
                {"optionTxt": "class Vehicle:"},
                {"optionTxt": "class vehicle:"},
                {"optionTxt": "Vehicle class {}"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "2.",
            "questionText": "How do you create an instance of a class named 'Car'?",
            "options": [
                {"optionTxt": "Car car = new Car()"},
                {"optionTxt": "Car = new Car()"},
                {"optionTxt": "Car()"},
                {"optionTxt": "car = Car()"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "3.",
            "questionText": "Which keyword is used in Python to inherit a class?",
            "options": [
                {"optionTxt": "extends"},
                {"optionTxt": "inherits"},
                {"optionTxt": "super"},
                {"optionTxt": "class Child(Parent):"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "4.",
            "questionText": "What is polymorphism in the context of object-oriented programming?",
            "options": [
                {"optionTxt": "The ability of different classes to provide different implementations of the same method"},
                {"optionTxt": "The ability of a subclass to form shapes with many sides"},
                {"optionTxt": "The ability of different classes to use operators like + and *"},
                {"optionTxt": "The ability of a class to derive methods from multiple parent classes"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "5.",
            "questionText": "In Python, how do you explicitly call a method from a parent class in a subclass?",
            "options": [
                {"optionTxt": "Parent.method(self)"},
                {"optionTxt": "super().method()"},
                {"optionTxt": "super.method(self)"},
                {"optionTxt": "Parent::method()"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "6.",
            "questionText": "What is the output of the following code?\n\nclass Animal:\n    def make_sound(self):\n        print('Some sound')\n\nclass Dog(Animal):\n    def make_sound(self):\n        print('Bark')\n\na = Dog()\na.make_sound()",
            "options": [
                {"optionTxt": "'Some sound'"},
                {"optionTxt": "'Bark'"},
                {"optionTxt": "SyntaxError"},
                {"optionTxt": "No output"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "7.",
            "questionText": "How is a class method different from a static method in Python?",
            "options": [
                {"optionTxt": "A class method takes a 'cls' parameter that points to the class and not the object instance."},
                {"optionTxt": "A static method cannot modify object state or class state."},
                {"optionTxt": "Static methods are free functions and do not receive any reference to object or class."},
                {"optionTxt": "All of the above"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
          "questionNo": "8.",
          "questionText": "Which method in a Python class is called when an object is created?",
          "options": [
              {"optionTxt": "__init__()"},
              {"optionTxt": "__start__()"},
              {"optionTxt": "__create__()"},
              {"optionTxt": "__new__()"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "9.",
          "questionText": "What is encapsulation in Python?",
          "options": [
              {"optionTxt": "The inclusion of multiple classes in a single module"},
              {"optionTxt": "The practice of restricting access to methods and variables to prevent data from being modified by accident"},
              {"optionTxt": "The ability of a class to inherit methods and attributes from multiple classes"},
              {"optionTxt": "The process of transforming a series of statements into a function"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "10.",
          "questionText": "What does the '@staticmethod' decorator do in Python?",
          "options": [
              {"optionTxt": "It makes a method accessible without the need for creating a class instance."},
              {"optionTxt": "It restricts a method to be called only on a class instance."},
              {"optionTxt": "It converts a method into a method that automatically receives the instance as the first argument."},
              {"optionTxt": "It allows a method to be called on the class without any arguments related to class or instance."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "11.",
          "questionText": "Consider the following Python classes:\n\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)\n        self.breed = breed\n\nWhat does the 'super()' function do in the 'Dog' class?",
          "options": [
              {"optionTxt": "It calls the constructor of the parent class 'Animal' to initialize the 'name' attribute."},
              {"optionTxt": "It initializes all methods from the parent class."},
              {"optionTxt": "It sends the 'Dog' class to the superclass."},
              {"optionTxt": "It prevents further inheritance."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "12.",
          "questionText": "Which of the following is NOT true about abstract classes in Python?",
          "options": [
              {"optionTxt": "Abstract classes can contain both abstract and regular methods."},
              {"optionTxt": "Abstract classes cannot be instantiated."},
              {"optionTxt": "You must import the ABC module to create an abstract class."},
              {"optionTxt": "All methods in an abstract class must be abstract."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "13.",
          "questionText": "In Python, which function helps you determine whether an object 'o' is an instance of class 'C'?",
          "options": [
              {"optionTxt": "type(o) == C"},
              {"optionTxt": "o.instance(C)"},
              {"optionTxt": "C.type(o)"},
              {"optionTxt": "isinstance(o, C)"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "14.",
          "questionText": "What is the result of the following code snippet?\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\np1 = Point(1, 2)\np2 = Point(1, 2)\nprint(p1 == p2)",
          "options": [
              {"optionTxt": "True"},
              {"optionTxt": "False"},
              {"optionTxt": "SyntaxError"},
              {"optionTxt": "TypeError"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "15.",
        "questionText": "Which of the following best describes the concept of a 'mixin' in Python?",
        "options": [
            {"optionTxt": "A mixin is a class that provides methods to multiple classes through multiple inheritance."},
            {"optionTxt": "A mixin is a module that mixes the capabilities of two classes into a new one."},
            {"optionTxt": "A mixin is a tool for mixing different types of variables."},
            {"optionTxt": "A mixin is a function that can be dynamically added to a class."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "16.",
        "questionText": "How do you declare a private attribute in a Python class?",
        "options": [
            {"optionTxt": "Using the private keyword before the attribute name"},
            {"optionTxt": "By starting the attribute name with a double underscore (__)"},
            {"optionTxt": "By starting the attribute name with a single underscore (_)"},
            {"optionTxt": "Private attributes are not supported in Python."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "17.",
        "questionText": "What will be the output of the following Python code?\n\nclass Vehicle:\n    def __init__(self, name):\n        self.name = name\n    def drive(self):\n        return f'{self.name} drives!'\n\nclass Car(Vehicle):\n    def drive(self):\n        return super().drive() + ' Fast!'\n\ncar = Car('Ferrari')\nprint(car.drive())",
        "options": [
            {"optionTxt": "'Ferrari drives!'"},
            {"optionTxt": "'Ferrari drives! Fast!'"},
            {"optionTxt": "'Ferrari Fast! drives!'"},
            {"optionTxt": "TypeError"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "18.",
        "questionText": "What does overriding a method in Python allow a subclass to do?",
        "options": [
            {"optionTxt": "Prevent any superclass methods from being called."},
            {"optionTxt": "Execute different code than that of the same method in the superclass."},
            {"optionTxt": "Only extend the behavior of a superclass method, not change it."},
            {"optionTxt": "Increase the efficiency of a superclass method."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "19.",
        "questionText": "In Python, what does the __str__ method do for a class?",
        "options": [
            {"optionTxt": "It defines the class's approach to string manipulation."},
            {"optionTxt": "It provides a human-readable representation of the class objects, used by the print() and str() functions."},
            {"optionTxt": "It converts the class into a string data type."},
            {"optionTxt": "It is used for string comparison operations within class methods."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "20.",
        "questionText": "How do you ensure a method in a Python class is only callable from within the class itself and not from instances of the class?",
        "options": [
            {"optionTxt": "Declare the method outside of the class."},
            {"optionTxt": "Start the method name with a double underscore (__)."},
            {"optionTxt": "Start the method name with a single underscore (_) and a warning comment."},
            {"optionTxt": "Define the method as static and private."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      }
        ]
      },
      {
        "topic": "Decorators and Generators",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is a decorator in Python?",
            "options": [
                {"optionTxt": "A function that modifies the functionality of another function."},
                {"optionTxt": "A tool used to add decoration to Python syntax."},
                {"optionTxt": "A data type similar to lists and dictionaries."},
                {"optionTxt": "A module that adds aesthetic elements to Python code outputs."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "2.",
            "questionText": "What does the 'yield' keyword do in Python?",
            "options": [
                {"optionTxt": "It is used to exit a function similar to 'return'."},
                {"optionTxt": "It generates a new list each time it is called."},
                {"optionTxt": "It produces a generator object that can be iterated over."},
                {"optionTxt": "It pauses function execution and saves state for resumption."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "3.",
            "questionText": "How do you use a decorator on a function in Python?",
            "options": [
                {"optionTxt": "@decorate"},
                {"optionTxt": "#decorate"},
                {"optionTxt": "@decorator"},
                {"optionTxt": "@decorate\nfunction_name()"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "4.",
            "questionText": "What is the output of the following generator function?\n\ndef count_down(num):\n    while num > 0:\n        yield num\n        num -= 1\n\nfor x in count_down(3):\n    print(x)",
            "options": [
                {"optionTxt": "3, 2, 1"},
                {"optionTxt": "1, 2, 3"},
                {"optionTxt": "3, 2"},
                {"optionTxt": "None of the above"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "5.",
            "questionText": "Which of the following statements is true about Python decorators?",
            "options": [
                {"optionTxt": "Decorators can only be used with functions, not methods."},
                {"optionTxt": "Decorators run after the function they decorate."},
                {"optionTxt": "Decorators can modify the behavior of a function or method."},
                {"optionTxt": "Decorators are used to remove features from a function dynamically."}
                ],
                "answer": {"text": "Answer: Option", "Letter": "C"}
                },
                {
                "questionNo": "6.",
                "questionText": "What are the benefits of using generators in Python?",
                "options": [
                {"optionTxt": "Generators allow for quicker execution of code."},
                {"optionTxt": "Generators help in maintaining backward compatibility."},
                {"optionTxt": "Generators consume less memory when working with large data sets."},
                {"optionTxt": "Generators can automatically generate data without any input."}
                ],
                "answer": {"text": "Answer: Option", "Letter": "C"}
                },
                {
                "questionNo": "7.",
                "questionText": "Consider the following Python code snippet:\n\n\ndef make_multiplier_of(n):\n def multiplier(x):\n return x * n\n return multiplier\n\ntimes3 = make_multiplier_of(3)\nprint(times3(10))\n\n\nWhat concept does this example illustrate?",
                "options": [
                {"optionTxt": "Polymorphism"},
                {"optionTxt": "Encapsulation"},
                {"optionTxt": "Closure"},
                {"optionTxt": "Inheritance"}
                ],
                "answer": {"text": "Answer: Option", "Letter": "C"}
                },
                {
                "questionNo": "8.",
                "questionText": "How can a decorator be applied to a class method in Python?",
                "options": [
                {"optionTxt": "By defining the decorator inside the class"},
                {"optionTxt": "By using the decorator syntax before the method definition"},
                {"optionTxt": "Decorators cannot be applied to class methods."},
                {"optionTxt": "By passing the class method as an argument to another function"}
                ],
                "answer": {"text": "Answer: Option", "Letter": "B"}
                },
                {
                "questionNo": "9.",
                "questionText": "What is the difference between 'return' and 'yield' in Python?",
                "options": [
                {"optionTxt": "'Return' exits a function entirely, while 'yield' pauses the function saving its state and later continues from there."},
                {"optionTxt": "'Return' and 'yield' can be used interchangeably in Python."},
                {"optionTxt": "'Yield' can only return a single value, whereas 'return' can return multiple values."},
                {"optionTxt": "'Return' generates values on the fly, and 'yield' stores them in memory."}
                ],
                "answer": {"text": "Answer: Option", "Letter": "A"}
                },
                {
                "questionNo": "10.",
                "questionText": "What happens if a decorator itself has arguments?",
                "options": [
                {"optionTxt": "It cannot be used to decorate any functions."},
                {"optionTxt": "It becomes a decorator factory, returning a decorator that can then be applied to a function."},
                {"optionTxt": "It causes a runtime error unless wrapped within another function."},
                {"optionTxt": "The function it decorates must also accept those arguments."}
                ],
                "answer": {"text": "Answer: Option", "Letter": "B"}
                },
                {
                  "questionNo": "11.",
                  "questionText": "What is the output of the following generator expression?\n\n`gen = (x**2 for x in range(3))\nfor num in gen:\n    print(num)`",
                  "options": [
                      {"optionTxt": "0, 1, 2"},
                      {"optionTxt": "0, 1, 4"},
                      {"optionTxt": "1, 2, 3"},
                      {"optionTxt": "None of these"}
                  ],
                  "answer": {"text": "Answer: Option", "Letter": "B"}
              },
              {
                  "questionNo": "12.",
                  "questionText": "In Python, how can you use multiple decorators on a single function?",
                  "options": [
                      {"optionTxt": "Stack the decorators above the function definition."},
                      {"optionTxt": "Only one decorator is allowed per function."},
                      {"optionTxt": "Combine all decorators into a single new decorator."},
                      {"optionTxt": "Apply decorators sequentially as function arguments."}
                  ],
                  "answer": {"text": "Answer: Option", "Letter": "A"}
              },
              {
                  "questionNo": "13.",
                  "questionText": "How do you ensure that a generator resumes execution after yielding in Python?",
                  "options": [
                      {"optionTxt": "Using the 'continue' statement"},
                      {"optionTxt": "Generators automatically resume where they left off."},
                      {"optionTxt": "Call the generator function again."},
                      {"optionTxt": "Use the 'next()' function on the generator."}
                  ],
                  "answer": {"text": "Answer: Option", "Letter": "D"}
              },
              {
                  "questionNo": "14.",
                  "questionText": "What is the benefit of using a generator for handling large data sets in Python?",
                  "options": [
                      {"optionTxt": "Generators enhance data security."},
                      {"optionTxt": "Generators execute faster than list comprehensions."},
                      {"optionTxt": "Generators yield items one at a time and consume less memory."},
                      {"optionTxt": "Generators can access data without any network delay."}
                  ],
                  "answer": {"text": "Answer: Option", "Letter": "C"}
              },
              {
                  "questionNo": "15.",
                  "questionText": "What is required to create a custom decorator that takes arguments in Python?",
                  "options": [
                      {"optionTxt": "A decorator must be defined with at least two nested functions."},
                      {"optionTxt": "A function must accept only keyword arguments."},
                      {"optionTxt": "The outermost function must accept the decorator arguments."},
                      {"optionTxt": "Use a class-based approach with a constructor."}
                  ],
                  "answer": {"text": "Answer: Option", "Letter": "C"}
              },
              {
                  "questionNo": "16.",
                  "questionText": "Which statement is true about the relationship between 'yield' and 'return' in Python?",
                  "options": [
                      {"optionTxt": "A function can use both 'yield' and 'return'."},
                      {"optionTxt": "If 'yield' is used, 'return' cannot be used to return a value."},
                      {"optionTxt": "A function with 'yield' will ignore any 'return' statement."},
                      {"optionTxt": "'Yield' can return multiple values at once, while 'return' cannot."}
                  ],
                  "answer": {"text": "Answer: Option", "Letter": "B"}
              },
              {
                  "questionNo": "17.",
                  "questionText": "What does the `@property` decorator do in a Python class?",
                  "options": [
                      {"optionTxt": "It converts a method to behave like an attribute."},
                      {"optionTxt": "It protects the method from being overridden in subclasses."},
                      {"optionTxt": "It makes the method static, requiring no instance for calling."},
                      {"optionTxt": "It prevents the method from modifying any class attributes."}
                  ],
                  "answer": {"text": "Answer: Option", "Letter": "A"}
              },
              {
                "questionNo": "18.",
                "questionText": "Which of the following is true about using the `@staticmethod` decorator in Python?",
                "options": [
                    {"optionTxt": "It turns an instance method into a method that does not operate on an instance of the class."},
                    {"optionTxt": "It allows a method to be called on an uncreated instance of the class."},
                    {"optionTxt": "It is used to declare a method that does not modify any state in the class."},
                    {"optionTxt": "All of the above"}
                ],
                "answer": {"text": "Answer: Option", "Letter": "D"}
            },
            {
                "questionNo": "19.",
                "questionText": "What is the output of the following code using a generator?\n\ndef simple_gen():\n    yield 'Python'\n    yield 'Rocks'\n    yield '!' \n\ngenerator = simple_gen()\nprint(next(generator))\nprint(next(generator))\nprint(next(generator))",
                "options": [
                    {"optionTxt": "Python Rocks !"},
                    {"optionTxt": "'Python', 'Rocks', '!'"},
                    {"optionTxt": "Python\nRocks\n!"},
                    {"optionTxt": "SyntaxError"}
                ],
                "answer": {"text": "Answer: Option", "Letter": "C"}
            },
            {
                "questionNo": "20.",
                "questionText": "How can you use a decorator to time the execution of a function in Python?",
                "options": [
                    {"optionTxt": "By using the `@timer` decorator from the Python standard library."},
                    {"optionTxt": "By creating a custom decorator that records the time before and after the function call."},
                    {"optionTxt": "By using the `@time` decorator provided by the time module."},
                    {"optionTxt": "Decorators cannot be used for timing functions."}
                ],
                "answer": {"text": "Answer: Option", "Letter": "B"}
            },
            {
                "questionNo": "21.",
                "questionText": "What does the following generator function do?\n\ndef fibonacci(n):\n    a, b = 0, 1\n    while a < n:\n        yield a\n        a, b = b, a + b",
                "options": [
                    {"optionTxt": "Generates the first `n` numbers of the Fibonacci sequence."},
                    {"optionTxt": "Generates the Fibonacci sequence up to the value `n`."},
                    {"optionTxt": "Generates `n` random numbers."},
                    {"optionTxt": "Returns the nth Fibonacci number."}
                ],
                "answer": {"text": "Answer: Option", "Letter": "B"}
            },
            {
                "questionNo": "22.",
                "questionText": "In Python, what is the benefit of a generator over a list when iterating over large data sets?",
                "options": [
                    {"optionTxt": "Generators provide faster access times."},
                    {"optionTxt": "Generators consume more memory efficiently."},
                    {"optionTxt": "Generators consume less memory because they yield items one at a time rather than holding the entire list in memory."},
                    {"optionTxt": "Generators support multithreading."}
                ],
                "answer": {"text": "Answer: Option", "Letter": "C"}
            },
            {
                "questionNo": "23.",
                "questionText": "How can you make a generator that yields the squares of numbers up to a given number `n`?",
                "options": [
                    {"optionTxt": "Use a for loop inside the generator function to yield n^2."},
                    {"optionTxt": "Use a list comprehension inside the generator function to yield n^2."},
                    {"optionTxt": "Use a while loop in the generator function, calculating squares to yield."},
                    {"optionTxt": "Use the map function inside the generator function to yield squares."}
                ],
                "answer": {"text": "Answer: Option", "Letter": "C"}
            }              
        ]
      },
      {
        "topic": "File Handling",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the correct way to open a file for reading as a text file in Python?",
            "options": [
                {"optionTxt": "open('file.txt', 'r')"},
                {"optionTxt": "open('file.txt', 'read')"},
                {"optionTxt": "open('file.txt', 'rb')"},
                {"optionTxt": "open('file.txt', 'rt')"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "2.",
            "questionText": "What does the 'w+' mode do when opening a file?",
            "options": [
                {"optionTxt": "Opens the file for writing only."},
                {"optionTxt": "Opens the file for reading and writing, overwriting the existing file."},
                {"optionTxt": "Opens the file for reading and writing, appending to the end."},
                {"optionTxt": "Opens the file in binary mode for reading and writing."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "3.",
            "questionText": "How do you read every line in a file in Python?",
            "options": [
                {"optionTxt": "Using the readlines() method."},
                {"optionTxt": "Using the readline() method in a loop."},
                {"optionTxt": "Using a for loop iterating over the file object."},
                {"optionTxt": "All of the above"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "4.",
            "questionText": "Which method would you use to write a list of strings to a file in Python?",
            "options": [
                {"optionTxt": "file.write(list_of_strings)"},
                {"optionTxt": "file.writelines(list_of_strings)"},
                {"optionTxt": "file.writeLines(list_of_strings)"},
                {"optionTxt": "file.write(list_of_strings.join('\\n'))"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "5.",
            "questionText": "How do you ensure that a file is properly closed after opening it, even if an error occurs during processing?",
            "options": [
                {"optionTxt": "By manually closing the file using the close() method at the end of the script."},
                {"optionTxt": "By using the with statement."},
                {"optionTxt": "By using the try and finally blocks where the file close() method is called in finally."},
                {"optionTxt": "B and C are correct."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "6.",
            "questionText": "What is the purpose of the 'flush()' method in Python file operations?",
            "options": [
                {"optionTxt": "It clears the content of the file."},
                {"optionTxt": "It forces the internal buffer to write out to the file."},
                {"optionTxt": "It resets the file's read and write position to the beginning."},
                {"optionTxt": "It deletes the file from the filesystem."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "7.",
            "questionText": "Which mode should you use to open a file for binary writing in Python?",
            "options": [
                {"optionTxt": "wb"},
                {"optionTxt": "w"},
                {"optionTxt": "wb+"},
                {"optionTxt": "w+b"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
          "questionNo": "8.",
          "questionText": "What is the difference between the 'r+' and 'w+' modes when opening a file in Python?",
          "options": [
              {"optionTxt": "'r+' opens a file for reading and writing without truncating it, whereas 'w+' truncates the file."},
              {"optionTxt": "'r+' opens a file only for reading, while 'w+' allows for both reading and writing."},
              {"optionTxt": "There is no difference; both 'r+' and 'w+' behave the same way."},
              {"optionTxt": "'w+' creates the file if it does not exist, while 'r+' will not create a new file."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "9.",
          "questionText": "How do you move the read/write position to the beginning of a file?",
          "options": [
              {"optionTxt": "file.rewind()"},
              {"optionTxt": "file.seek(0)"},
              {"optionTxt": "file.reset()"},
              {"optionTxt": "file.restart()"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "10.",
          "questionText": "What does the 'a+' mode do when opening a file?",
          "options": [
              {"optionTxt": "Opens the file for appending; any data written to the file is automatically added to the end."},
              {"optionTxt": "Opens the file for both appending and reading from anywhere in the file."},
              {"optionTxt": "Opens the file in append mode, and 'plus' indicates that the file will be truncated."},
              {"optionTxt": "Opens the file for reading only; the '+' allows for reading additional file metadata."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "11.",
          "questionText": "How do you check if a file is closed in Python?",
          "options": [
              {"optionTxt": "Check the file.closed attribute."},
              {"optionTxt": "Use file.isOpen() to see if it's open; otherwise, it's closed."},
              {"optionTxt": "Use the isClosed() method of the file object."},
              {"optionTxt": "Files do not have a specific attribute or method to check if they are closed."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "12.",
          "questionText": "In Python, how can you read a specific line from a file without loading the entire file into memory?",
          "options": [
              {"optionTxt": "By iterating over each line using readline() until you reach the desired line."},
              {"optionTxt": "By using the readlines() method and accessing the line by index."},
              {"optionTxt": "By setting the file cursor to the line number with seek() and then reading the line."},
              {"optionTxt": "Iterate with a for loop directly on the file object until you reach the desired line number."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "13.",
          "questionText": "What is the purpose of using the 'b' character in file modes, such as 'rb' or 'wb'?",
          "options": [
              {"optionTxt": "It specifies that the file should be treated as a binary file."},
              {"optionTxt": "It stands for 'buffer', which enhances file reading and writing speeds."},
              {"optionTxt": "It indicates that the file is to be backed up automatically."},
              {"optionTxt": "It is a deprecated mode for backward compatibility with older Python versions."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "14.",
        "questionText": "What happens when you use the 'x' mode to open a file?",
        "options": [
            {"optionTxt": "It opens a file for exclusive creation, failing if the file already exists."},
            {"optionTxt": "It opens a file for executing as a script."},
            {"optionTxt": "It extracts content from a file and deletes the original file."},
            {"optionTxt": "It opens a file for external sharing with other programs."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "15.",
        "questionText": "Which Python function is used to delete a file?",
        "options": [
            {"optionTxt": "file.delete()"},
            {"optionTxt": "delete('filename.txt')"},
            {"optionTxt": "os.remove('filename.txt')"},
            {"optionTxt": "os.delete('filename.txt')"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "16.",
        "questionText": "How can you ensure that data is written to the file, or to check for errors during file operation?",
        "options": [
            {"optionTxt": "By using the flush() method after writing data."},
            {"optionTxt": "By checking the file size after every write operation."},
            {"optionTxt": "By periodically reopening the file in write mode."},
            {"optionTxt": "By using the verify() method on the file object."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "17.",
        "questionText": "How do you append data to a file without overwriting the existing data?",
        "options": [
            {"optionTxt": "Open the file in 'a' or 'a+' mode and use the write() method."},
            {"optionTxt": "Open the file in 'w+' mode and move the cursor to the end before writing."},
            {"optionTxt": "Open the file in 'r+' mode and seek to the end of the file."},
            {"optionTxt": "Open the file in 'w' mode and use the append() method."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "18.",
        "questionText": "What is the best practice for managing files when handling exceptions during file operations?",
        "options": [
            {"optionTxt": "Use try-except to catch and handle exceptions, and close the file in the finally block."},
            {"optionTxt": "Use a while loop to ensure the file operation completes without errors."},
            {"optionTxt": "Ignore exceptions as Python automatically handles file errors."},
            {"optionTxt": "Use the pass statement in the exception block to ensure the file closes smoothly."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "19.",
        "questionText": "In file handling, what does the 'tell()' function do?",
        "options": [
            {"optionTxt": "It tells the operating system to allocate space for the file."},
            {"optionTxt": "It returns the current position of the file cursor within the file."},
            {"optionTxt": "It informs the user about the file type."},
            {"optionTxt": "It displays the total number of lines in the file."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "20.",
        "questionText": "Which of the following is NOT a valid file opening mode in Python?",
        "options": [
            {"optionTxt": "rb+"},
            {"optionTxt": "wr"},
            {"optionTxt": "ab+"},
            {"optionTxt": "xx"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      }
        ]
      },
      {
        "topic": "Error and Exceptions",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the purpose of a try-except block in Python?",
            "options": [
                {"optionTxt": "To try a new piece of code and accept any errors it produces."},
                {"optionTxt": "To handle potential errors by catching exceptions that may be thrown."},
                {"optionTxt": "To test code efficiency."},
                {"optionTxt": "To check all possible outcomes of a function."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "2.",
            "questionText": "Which keyword allows you to clean up resources in a try-except block, regardless of whether an exception was thrown?",
            "options": [
                {"optionTxt": "clean"},
                {"optionTxt": "finally"},
                {"optionTxt": "except"},
                {"optionTxt": "else"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "3.",
            "questionText": "How do you raise a custom exception in Python?",
            "options": [
                {"optionTxt": "throw new Exception('Error!')"},
                {"optionTxt": "raise Exception('Error!')"},
                {"optionTxt": "error Exception('Error!')"},
                {"optionTxt": "emit Exception('Error!')"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "4.",
            "questionText": "What is the correct way to handle multiple exceptions in a single try block?",
            "options": [
                {"optionTxt": "except TypeError, ValueError:"},
                {"optionTxt": "except (TypeError, ValueError):"},
                {"optionTxt": "except TypeError or ValueError:"},
                {"optionTxt": "except TypeError and ValueError:"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "5.",
            "questionText": "What does the 'else' clause do in a try-except block?",
            "options": [
                {"optionTxt": "It runs if no exceptions are raised in the try block."},
                {"optionTxt": "It runs if an exception is raised but not caught."},
                {"optionTxt": "It runs immediately after any exception is caught."},
                {"optionTxt": "It replaces all except blocks as a catch-all."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "6.",
            "questionText": "Which exception is thrown by Python when accessing an index that is out of bounds for a list?",
            "options": [
                {"optionTxt": "IndexError"},
                {"optionTxt": "ValueError"},
                {"optionTxt": "TypeError"},
                {"optionTxt": "OutOfBoundsException"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "7.",
            "questionText": "What is the primary reason to define a custom exception class in Python?",
            "options": [
                {"optionTxt": "To make code syntax more complex."},
                {"optionTxt": "To provide detailed error information specific to an application's domain."},
                {"optionTxt": "To increase the execution speed of exception handling."},
                {"optionTxt": "To comply with Python's syntax requirements."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
          "questionNo": "8.",
          "questionText": "In Python, how can you ensure that an exception is logged with a custom message?",
          "options": [
              {"optionTxt": "Use print() in the except block."},
              {"optionTxt": "Use logging.exception('Custom Message') within the except block."},
              {"optionTxt": "Add a comment with the custom message in the except block."},
              {"optionTxt": "It's not possible to add custom messages to exceptions."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "9.",
          "questionText": "Which statement about the 'finally' clause is true?",
          "options": [
              {"optionTxt": "The 'finally' clause is optional and executes only if an exception is not caught."},
              {"optionTxt": "The 'finally' clause executes under all circumstances, whether an exception is raised or not."},
              {"optionTxt": "The 'finally' clause is used to finalize the values of variables before exiting a function."},
              {"optionTxt": "The 'finally' clause will not execute if the program exits abruptly in a try block."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "10.",
          "questionText": "How do you capture and print the message of an exception in Python?",
          "options": [
              {"optionTxt": "except Exception as e: print(e.message)"},
              {"optionTxt": "except Exception as e: print(str(e))"},
              {"optionTxt": "except Exception as e: print(e)"},
              {"optionTxt": "Both B and C are correct"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "11.",
          "questionText": "Which function would you use to manually generate an exception during debugging?",
          "options": [
              {"optionTxt": "debug.raise('DebugException')"},
              {"optionTxt": "error('DebugException')"},
              {"optionTxt": "raise Exception('DebugException')"},
              {"optionTxt": "throw('DebugException')"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "12.",
          "questionText": "What happens if you do not handle a raised exception?",
          "options": [
              {"optionTxt": "The exception causes the application to enter a paused state until the exception is handled."},
              {"optionTxt": "The application continues execution after logging the exception."},
              {"optionTxt": "The exception causes the application to print an error message and terminate."},
              {"optionTxt": "The exception is ignored by Python's runtime environment."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "13.",
          "questionText": "What is the advantage of using custom exceptions in Python?",
          "options": [
              {"optionTxt": "Custom exceptions provide a way to separate Python's built-in exceptions from user-defined ones."},
              {"optionTxt": "They allow for better control over exception handling logic specific to your application."},
              {"optionTxt": "Custom exceptions run faster than built-in exceptions."},
              {"optionTxt": "They automatically log errors to an external file."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "14.",
          "questionText": "How can you chain exceptions in Python to handle multiple related errors?",
          "options": [
              {"optionTxt": "Using the 'chain' keyword in the except block."},
              {"optionTxt": "By raising a new exception in the except block of another exception."},
              {"optionTxt": "Exceptions in Python cannot be chained; they must be handled individually."},
              {"optionTxt": "Using the 'link' method from the exceptions module."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "15.",
        "questionText": "What is the output of the following code when a `ValueError` occurs?\n\n```python\ndef func():\n    try:\n        int('abc')\n    except ValueError as e:\n        print('Error:', str(e))\n        raise TypeError('Invalid type') from e\n\ntry:\n    func()\nexcept TypeError as e:\n    print('Type error:', str(e))\n```\n",
        "options": [
            {"optionTxt": "Error: invalid literal for int() with base 10: 'abc'\nType error: Invalid type"},
            {"optionTxt": "Error: ValueError occurred\nType error: TypeError occurred"},
            {"optionTxt": "invalid literal for int() with base 10: 'abc'\nInvalid type"},
            {"optionTxt": "The program crashes with a ValueError."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "16.",
        "questionText": "How does the `assert` statement work in Python?",
        "options": [
            {"optionTxt": "It terminates the program immediately if a condition is True."},
            {"optionTxt": "It raises an AssertionError if a condition is False."},
            {"optionTxt": "It checks conditions and logs them to a file without raising exceptions."},
            {"optionTxt": "It silently passes if a condition is False."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "17.",
        "questionText": "Which keyword is used to define a custom exception in Python?",
        "options": [
            {"optionTxt": "def"},
            {"optionTxt": "class"},
            {"optionTxt": "raise"},
            {"optionTxt": "exception"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "18.",
        "questionText": "What is the correct way to handle an exception without handling it explicitly by exception type?",
        "options": [
            {"optionTxt": "except TypeError:"},
            {"optionTxt": "except Exception:"},
            {"optionTxt": "except All:"},
            {"optionTxt": "except:"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "19.",
        "questionText": "What is the benefit of including an `else` clause in a try-except block?",
        "options": [
            {"optionTxt": "It runs code that should execute if the try block raises an exception."},
            {"optionTxt": "It runs code that should execute if the try block does not raise an exception."},
            {"optionTxt": "It catches exceptions that are not caught by the except blocks."},
            {"optionTxt": "It serves as a backup for any unhandled exceptions."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "20.",
        "questionText": "What does using `raise from` accomplish in exception handling?",
        "options": [
            {"optionTxt": "It raises an exception directly from the currently active exception."},
            {"optionTxt": "It is used to elevate the severity of the current exception."},
            {"optionTxt": "It creates a new exception as a direct cause of another exception, linking their traces."},
            {"optionTxt": "It suppresses the original exception and raises a new one."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      }
        ]
      },
      {
        "topic": "Libraries and Frameworks",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is NumPy primarily used for in Python?",
            "options": [
                {"optionTxt": "Web development"},
                {"optionTxt": "Statistical analysis"},
                {"optionTxt": "Numerical computations"},
                {"optionTxt": "Text processing"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "2.",
            "questionText": "Which Python library would you use for data manipulation and analysis?",
            "options": [
                {"optionTxt": "Flask"},
                {"optionTxt": "TensorFlow"},
                {"optionTxt": "pandas"},
                {"optionTxt": "matplotlib"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "3.",
            "questionText": "What is Django best known for?",
            "options": [
                {"optionTxt": "Its numerical computation capabilities"},
                {"optionTxt": "Its ability to create complex, data-driven websites"},
                {"optionTxt": "Its plotting and visualization tools"},
                {"optionTxt": "Its machine learning algorithms"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "4.",
            "questionText": "Which library would you use to send HTTP/1.1 requests easily in Python?",
            "options": [
                {"optionTxt": "BeautifulSoup"},
                {"optionTxt": "SciPy"},
                {"optionTxt": "requests"},
                {"optionTxt": "aiohttp"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "5.",
            "questionText": "Flask is classified as which type of framework?",
            "options": [
                {"optionTxt": "A full-stack web development framework"},
                {"optionTxt": "A micro-framework for web applications"},
                {"optionTxt": "A data analysis framework"},
                {"optionTxt": "A network programming framework"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "6.",
            "questionText": "Which statement about the pandas DataFrame is true?",
            "options": [
                {"optionTxt": "It is primarily used for 3D visualizations."},
                {"optionTxt": "It can only handle numerical data."},
                {"optionTxt": "It is a 2D size-mutable, potentially heterogeneous tabular data structure."},
                {"optionTxt": "It is immutable and cannot be modified once created."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "7.",
            "questionText": "How would you install a library like NumPy using pip?",
            "options": [
                {"optionTxt": "npm install numpy"},
                {"optionTxt": "pip install numpy"},
                {"optionTxt": "python -m install numpy"},
                {"optionTxt": "install numpy"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
          "questionNo": "8.",
          "questionText": "What is the primary use of the `matplotlib` library in Python?",
          "options": [
              {"optionTxt": "Creating web applications"},
              {"optionTxt": "Building desktop GUI applications"},
              {"optionTxt": "Data visualization"},
              {"optionTxt": "Network programming"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "9.",
          "questionText": "Which of the following is a feature of Django?",
          "options": [
              {"optionTxt": "Built-in support for WebSockets"},
              {"optionTxt": "Object-relational mapping (ORM)"},
              {"optionTxt": "Native support for asynchronous programming"},
              {"optionTxt": "Real-time data processing"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "10.",
          "questionText": "How can you improve performance when working with large data sets using pandas?",
          "options": [
              {"optionTxt": "Using multi-threading modules"},
              {"optionTxt": "By reducing the data precision with astype"},
              {"optionTxt": "Implementing data queries in SQL rather than pandas"},
              {"optionTxt": "Use vectorized operations instead of iterating over DataFrame rows"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "11.",
          "questionText": "What functionality does the `SciPy` library add to NumPy's capabilities?",
          "options": [
              {"optionTxt": "Real-time data analysis"},
              {"optionTxt": "Advanced machine learning models"},
              {"optionTxt": "Additional algorithms for optimization, stats, and signal processing"},
              {"optionTxt": "Graphical user interface components"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "12.",
          "questionText": "Which Flask extension is used for handling form data in web applications?",
          "options": [
              {"optionTxt": "Flask-WTF"},
              {"optionTxt": "Flask-Script"},
              {"optionTxt": "Flask-SQLAlchemy"},
              {"optionTxt": "Flask-Login"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "13.",
          "questionText": "What is a primary advantage of using the `requests` library over `urllib` in Python?",
          "options": [
              {"optionTxt": "It can handle more types of requests."},
              {"optionTxt": "It is written purely in Python for easier modification."},
              {"optionTxt": "It provides a simpler and more human-friendly API."},
              {"optionTxt": "It supports older versions of Python exclusively."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "14.",
          "questionText": "In the context of web development, why might you choose Flask over Django for a project?",
          "options": [
              {"optionTxt": "Flask provides more out-of-the-box features than Django."},
              {"optionTxt": "Flask is more suitable for smaller, simpler applications where fine-grained control is needed."},
              {"optionTxt": "Flask inherently supports asynchronous request handling."},
              {"optionTxt": "Flask is better for large-scale, high-traffic applications."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "15.",
        "questionText": "Which library would you use for asynchronous web programming in Python?",
        "options": [
            {"optionTxt": "Django"},
            {"optionTxt": "Flask"},
            {"optionTxt": "aiohttp"},
            {"optionTxt": "requests"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "16.",
        "questionText": "What is the purpose of the `seaborn` library in Python?",
        "options": [
            {"optionTxt": "To enhance web application security"},
            {"optionTxt": "To manage database connections"},
            {"optionTxt": "To perform data visualization based on matplotlib"},
            {"optionTxt": "To streamline HTTP session management"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "17.",
        "questionText": "In Flask, what is the role of the 'Blueprint' feature?",
        "options": [
            {"optionTxt": "It is used to generate templates automatically."},
            {"optionTxt": "It is used for creating reusable components of an application."},
            {"optionTxt": "It serves as a database migration tool."},
            {"optionTxt": "It is a built-in script for data encryption."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "18.",
        "questionText": "How do you save a NumPy array to a file?",
        "options": [
            {"optionTxt": "np.savetxt('array.txt', arr)"},
            {"optionTxt": "arr.save('array.txt')"},
            {"optionTxt": "np.save('array.npy', arr)"},
            {"optionTxt": "arr.to_file('array.txt')"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "19.",
        "questionText": "What function from the `pandas` library is typically used to read a CSV file into a DataFrame?",
        "options": [
            {"optionTxt": "pandas.read_csv('file.csv')"},
            {"optionTxt": "pandas.open('file.csv')"},
            {"optionTxt": "pandas.load_csv('file.csv')"},
            {"optionTxt": "pandas.csv('file.csv')"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "20.",
        "questionText": "Which Django component is responsible for handling the lifecycle of a web request?",
        "options": [
            {"optionTxt": "Model"},
            {"optionTxt": "View"},
            {"optionTxt": "Template"},
            {"optionTxt": "Middleware"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "21.",
        "questionText": "Which Python library is widely used for machine learning and features various classification, regression, and clustering algorithms?",
        "options": [
            {"optionTxt": "NumPy"},
            {"optionTxt": "Pandas"},
            {"optionTxt": "Scikit-learn"},
            {"optionTxt": "SymPy"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "22.",
        "questionText": "What is TensorFlow primarily used for?",
        "options": [
            {"optionTxt": "Building desktop applications"},
            {"optionTxt": "Creating web pages"},
            {"optionTxt": "Developing machine learning models"},
            {"optionTxt": "Managing databases"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "23.",
        "questionText": "Which library would you use to create highly interactive plots for the web?",
        "options": [
            {"optionTxt": "Matplotlib"},
            {"optionTxt": "Bokeh"},
            {"optionTxt": "Seaborn"},
            {"optionTxt": "Plotly"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "24.",
        "questionText": "Which library is best suited for working with high-performance arrays on GPUs?",
        "options": [
            {"optionTxt": "Cupy"},
            {"optionTxt": "NumPy"},
            {"optionTxt": "TensorFlow"},
            {"optionTxt": "Theano"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "25.",
        "questionText": "For real-time analytics and monitoring of application data, which Python library is most appropriate?",
        "options": [
            {"optionTxt": "Dash"},
            {"optionTxt": "Pandas"},
            {"optionTxt": "Streamlit"},
            {"optionTxt": "Kafka-Python"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "26.",
        "questionText": "What does the Python library 'BeautifulSoup' help you accomplish?",
        "options": [
            {"optionTxt": "Parsing and analyzing big data"},
            {"optionTxt": "Scraping data from HTML and XML files"},
            {"optionTxt": "Creating beautiful visual data representations"},
            {"optionTxt": "Generating synthetic data for testing"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "27.",
        "questionText": "What library provides a Python interface for calling C functions from a DLL or shared library?",
        "options": [
            {"optionTxt": "ctypes"},
            {"optionTxt": "NumPy"},
            {"optionTxt": "Cython"},
            {"optionTxt": "PInvoke"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "28.",
        "questionText": "What library in Python is primarily used for creating 3D visualizations?",
        "options": [
            {"optionTxt": "matplotlib"},
            {"optionTxt": "seaborn"},
            {"optionTxt": "plotly"},
            {"optionTxt": "mayavi"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "29.",
        "questionText": "Which Python library is used for network analysis and manipulation of complex networks?",
        "options": [
            {"optionTxt": "Pygame"},
            {"optionTxt": "NetworkX"},
            {"optionTxt": "Pandas"},
            {"optionTxt": "Keras"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "30.",
        "questionText": "What is the primary application of the Python library 'PyTorch'?",
        "options": [
            {"optionTxt": "Game development"},
            {"optionTxt": "Web development"},
            {"optionTxt": "Deep learning"},
            {"optionTxt": "Statistical analysis"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "31.",
        "questionText": "Which library is best suited for symbolic mathematics in Python?",
        "options": [
            {"optionTxt": "SymPy"},
            {"optionTxt": "SciPy"},
            {"optionTxt": "NumPy"},
            {"optionTxt": "Math"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "32.",
        "questionText": "What Python library provides tools for parsing PDFs and extracting information?",
        "options": [
            {"optionTxt": "PyPDF2"},
            {"optionTxt": "requests"},
            {"optionTxt": "BeautifulSoup"},
            {"optionTxt": "Scrapy"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "33.",
        "questionText": "Which Python package is designed for creating conversational software and building chatbots?",
        "options": [
            {"optionTxt": "Django"},
            {"optionTxt": "Flask"},
            {"optionTxt": "Rasa"},
            {"optionTxt": "NumPy"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "34.",
        "questionText": "For data cleaning and manipulation tasks involving categorical data, which Python library is specifically powerful?",
        "options": [
            {"optionTxt": "matplotlib"},
            {"optionTxt": "pandas"},
            {"optionTxt": "NumPy"},
            {"optionTxt": "Scikit-learn"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      }
        ]
      }
    ]
  },
  {
    "title": "JavaScript",
    "topics": [
      {
        "topic": "Syntax and Operators",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What does the '===' operator check in JavaScript?",
            "options": [
                {"optionTxt": "Only the values for equality"},
                {"optionTxt": "Only the data types for equality"},
                {"optionTxt": "Both the value and the type for equality"},
                {"optionTxt": "Neither the value nor the type"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "2.",
            "questionText": "What is the outcome of the following statement? `console.log(5 + '5');`",
            "options": [
                {"optionTxt": "10"},
                {"optionTxt": "'55'"},
                {"optionTxt": "TypeError"},
                {"optionTxt": "None of the above"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "3.",
            "questionText": "Which operator is used to assign a value to a variable in JavaScript?",
            "options": [
                {"optionTxt": "="},
                {"optionTxt": "=="},
                {"optionTxt": "==="},
                {"optionTxt": "||"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "4.",
            "questionText": "Which statement about JavaScript functions is true?",
            "options": [
                {"optionTxt": "JavaScript functions must have a return type."},
                {"optionTxt": "JavaScript functions cannot be assigned to variables."},
                {"optionTxt": "JavaScript functions can be stored in variables, arrays, and objects."},
                {"optionTxt": "JavaScript does not allow functions to be called with variable numbers of arguments."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "5.",
            "questionText": "What does the 'typeof' operator in JavaScript return when used with an array?",
            "options": [
                {"optionTxt": "'array'"},
                {"optionTxt": "'object'"},
                {"optionTxt": "'list'"},
                {"optionTxt": "'undefined'"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "6.",
            "questionText": "How do you create a block of code that executes repeatedly based on a specified condition in JavaScript?",
            "options": [
                {"optionTxt": "if loop"},
                {"optionTxt": "while loop"},
                {"optionTxt": "for loop"},
                {"optionTxt": "repeat loop"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "7.",
            "questionText": "What is the result of the following JavaScript expression? `console.log(2 * '3');`",
            "options": [
                {"optionTxt": "'23'"},
                {"optionTxt": "'6'"},
                {"optionTxt": "6"},
                {"optionTxt": "NaN"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
          "questionNo": "8.",
          "questionText": "Which of the following is a valid way to declare a constant in JavaScript?",
          "options": [
              {"optionTxt": "let const x = 10;"},
              {"optionTxt": "var x = 10;"},
              {"optionTxt": "const x = 10;"},
              {"optionTxt": "constant x = 10;"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "9.",
          "questionText": "What is the output of the following JavaScript code? `console.log(typeof null);`",
          "options": [
              {"optionTxt": "'null'"},
              {"optionTxt": "'undefined'"},
              {"optionTxt": "'object'"},
              {"optionTxt": "'NaN'"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "10.",
          "questionText": "Which operator is used to compare two values, ensuring they are of the same type and value?",
          "options": [
              {"optionTxt": "!="},
              {"optionTxt": "=="},
              {"optionTxt": "==="},
              {"optionTxt": "="}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "11.",
          "questionText": "What will the following line of JavaScript output? `console.log(1 == '1');`",
          "options": [
              {"optionTxt": "true"},
              {"optionTxt": "false"},
              {"optionTxt": "'true'"},
              {"optionTxt": "'false'"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "12.",
          "questionText": "Which JavaScript statement is used to stop and exit from a loop?",
          "options": [
              {"optionTxt": "stop;"},
              {"optionTxt": "exit;"},
              {"optionTxt": "break;"},
              {"optionTxt": "end;"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "13.",
          "questionText": "What does the '&&' operator do in JavaScript?",
          "options": [
              {"optionTxt": "It concatenates strings."},
              {"optionTxt": "It adds numbers."},
              {"optionTxt": "It performs a logical 'AND' operation."},
              {"optionTxt": "It compares two values for equality."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "14.",
          "questionText": "What will be the output of the following JavaScript code? `console.log(0.1 + 0.2 === 0.3);`",
          "options": [
              {"optionTxt": "true"},
              {"optionTxt": "false"},
              {"optionTxt": "undefined"},
              {"optionTxt": "NaN"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "15.",
        "questionText": "Which statement is true about the `delete` operator in JavaScript?",
        "options": [
            {"optionTxt": "It deletes both the property from the object and its value."},
            {"optionTxt": "It deletes the property from the object but does not delete the variable if used with a variable."},
            {"optionTxt": "It can delete variables, properties, and values."},
            {"optionTxt": "It permanently removes items from an array, changing the indexes of remaining items."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "16.",
        "questionText": "What is the purpose of the `void` operator in JavaScript?",
        "options": [
            {"optionTxt": "To clear variables of their stored values."},
            {"optionTxt": "To destroy a function and free up resources."},
            {"optionTxt": "To evaluate an expression without returning a value."},
            {"optionTxt": "To check for undefined values in variables."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "17.",
        "questionText": "What will be the result of the following code? `console.log('10' + 20);`",
        "options": [
            {"optionTxt": "30"},
            {"optionTxt": "'30'"},
            {"optionTxt": "'1020'"},
            {"optionTxt": "TypeError"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "18.",
        "questionText": "Which keyword is used to declare a block-scoped local variable, optionally initializing it to a value?",
        "options": [
            {"optionTxt": "var"},
            {"optionTxt": "let"},
            {"optionTxt": "const"},
            {"optionTxt": "local"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "19.",
        "questionText": "In JavaScript, what does the expression `Array(3) + [undefined, undefined, undefined]` result in?",
        "options": [
            {"optionTxt": "[undefined, undefined, undefined, undefined, undefined, undefined]"},
            {"optionTxt": "A string 'undefinedundefinedundefined'"},
            {"optionTxt": "An array with six elements, all undefined"},
            {"optionTxt": "SyntaxError"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "20.",
        "questionText": "Which operator is used in JavaScript for a short-circuit evaluation in conditionals?",
        "options": [
            {"optionTxt": "&&"},
            {"optionTxt": "||"},
            {"optionTxt": "??"},
            {"optionTxt": "!!"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      }
        ]
      },
      {
        "topic": "Variables and Data Types",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which variable declaration should be used in JavaScript when you need block scope in a loop?",
            "options": [
                {"optionTxt": "var"},
                {"optionTxt": "let"},
                {"optionTxt": "const"},
                {"optionTxt": "All of the above"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "2.",
            "questionText": "What will be the output of the following JavaScript code? `console.log(typeof 'Hello, world!');`",
            "options": [
                {"optionTxt": "'string'"},
                {"optionTxt": "'text'"},
                {"optionTxt": "'char'"},
                {"optionTxt": "'String'"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "3.",
            "questionText": "Which of the following is true about the `const` keyword in JavaScript?",
            "options": [
                {"optionTxt": "Variables declared with `const` can be reassigned."},
                {"optionTxt": "Variables declared with `const` must be initialized at the time of declaration."},
                {"optionTxt": "Variables declared with `const` have global scope."},
                {"optionTxt": "Variables declared with `const` support hoisting."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "4.",
            "questionText": "Which data type does `true` belong to in JavaScript?",
            "options": [
                {"optionTxt": "String"},
                {"optionTxt": "Boolean"},
                {"optionTxt": "Number"},
                {"optionTxt": "Object"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "5.",
            "questionText": "What is the result of the following expression in JavaScript? `console.log(5 + true);`",
            "options": [
                {"optionTxt": "5"},
                {"optionTxt": "6"},
                {"optionTxt": "true"},
                {"optionTxt": "TypeError"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "6.",
            "questionText": "In JavaScript, how does the `var` keyword differ from `let` in terms of scope?",
            "options": [
                {"optionTxt": "`var` has block scope, while `let` has function scope."},
                {"optionTxt": "`var` has function scope, while `let` has block scope."},
                {"optionTxt": "Both `var` and `let` have global scope."},
                {"optionTxt": "There is no difference in scope between `var` and `let`."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "7.",
            "questionText": "What will be the output of the following JavaScript code? `var num = '100'; console.log(typeof parseInt(num));`",
            "options": [
                {"optionTxt": "'string'"},
                {"optionTxt": "'number'"},
                {"optionTxt": "'integer'"},
                {"optionTxt": "'float'"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
          "questionNo": "8.",
          "questionText": "Which of the following variable declarations is correct when you want to ensure a variable should not be reassigned?",
          "options": [
              {"optionTxt": "let x = 5;"},
              {"optionTxt": "const x = 5;"},
              {"optionTxt": "var x = 5;"},
              {"optionTxt": "x = 5;"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "9.",
          "questionText": "In JavaScript, what is the default value of variables declared with `var` but not initialized?",
          "options": [
              {"optionTxt": "'undefined'"},
              {"optionTxt": "'null'"},
              {"optionTxt": "0"},
              {"optionTxt": "'empty string'"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "10.",
          "questionText": "What does the following JavaScript expression evaluate to? `console.log(null == undefined);`",
          "options": [
              {"optionTxt": "true"},
              {"optionTxt": "false"},
              {"optionTxt": "TypeError"},
              {"optionTxt": "ReferenceError"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "11.",
          "questionText": "How do you check if a numeric variable `n` is NaN (Not-a-Number) in JavaScript?",
          "options": [
              {"optionTxt": "n === NaN"},
              {"optionTxt": "n == NaN"},
              {"optionTxt": "isNaN(n)"},
              {"optionTxt": "Number.isNaN(n)"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "12.",
          "questionText": "Which statement about the `Number` data type in JavaScript is true?",
          "options": [
              {"optionTxt": "JavaScript differentiates between integers and floats."},
              {"optionTxt": "All numbers in JavaScript are treated as double-precision floating-point."},
              {"optionTxt": "Numbers in JavaScript can be objects."},
              {"optionTxt": "The `Number` type includes the values 'true' and 'false'."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "13.",
          "questionText": "Which JavaScript code snippet shows a correct way to concatenate two strings?",
          "options": [
              {"optionTxt": "`var fullName = firstName +, + lastName;`"},
              {"optionTxt": "`var fullName = firstName + ' ' + lastName;`"},
              {"optionTxt": "`var fullName = 'firstName - lastName';`"},
              {"optionTxt": "`var fullName = (firstName lastName);`"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "14.",
          "questionText": "What is the output of the following code snippet? `console.log(typeof('5' * 2));`",
          "options": [
              {"optionTxt": "'string'"},
              {"optionTxt": "'number'"},
              {"optionTxt": "'object'"},
              {"optionTxt": "'undefined'"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "15.",
        "questionText": "What is the output when executing the following JavaScript code? `console.log(0.1 + 0.2 === 0.3);`",
        "options": [
            {"optionTxt": "true"},
            {"optionTxt": "false"},
            {"optionTxt": "TypeError"},
            {"optionTxt": "undefined"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "16.",
        "questionText": "In JavaScript, which operator would you use to check if two variables are not equal in both value and type?",
        "options": [
            {"optionTxt": "!="},
            {"optionTxt": "!=="},
            {"optionTxt": "==!"},
            {"optionTxt": "=!="}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "17.",
        "questionText": "What happens when you declare a variable using `const` inside a loop and try to modify it within the same loop?",
        "options": [
            {"optionTxt": "It throws a TypeError."},
            {"optionTxt": "It throws a SyntaxError."},
            {"optionTxt": "The variable retains the initial value throughout the loop."},
            {"optionTxt": "The variable can be modified without any errors."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "18.",
        "questionText": "What is the correct way to declare an array in JavaScript?",
        "options": [
            {"optionTxt": "var arr = (1,2,3);"},
            {"optionTxt": "var arr = [1, 2, 3];"},
            {"optionTxt": "var arr = 1,2,3;"},
            {"optionTxt": "var arr = array(1,2,3);"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "19.",
        "questionText": "Which of the following will correctly determine if `value` is an array in JavaScript?",
        "options": [
            {"optionTxt": "value instanceof Array"},
            {"optionTxt": "typeof value === 'array'"},
            {"optionTxt": "Array.isArray(value)"},
            {"optionTxt": "Both A and C"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "20.",
        "questionText": "How can you convert a JSON string into a JavaScript object?",
        "options": [
            {"optionTxt": "JSON.parse(jsonString)"},
            {"optionTxt": "JSON.stringify(jsonString)"},
            {"optionTxt": "JSON.toObject(jsonString)"},
            {"optionTxt": "JSON.fromString(jsonString)"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      }
        ]
      },
      {
        "topic": "Functions and Scopes",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is a function expression in JavaScript?",
            "options": [
                {"optionTxt": "A declaration that uses the function keyword followed by a name."},
                {"optionTxt": "A function created and assigned to a variable."},
                {"optionTxt": "A function that is exported from one module to another."},
                {"optionTxt": "A pre-defined function that JavaScript provides."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "2.",
            "questionText": "Which of the following is a correct arrow function in JavaScript?",
            "options": [
                {"optionTxt": "var add = function(x, y) => x + y;"},
                {"optionTxt": "var add = (x, y) => x + y;"},
                {"optionTxt": "function add(x, y) => x + y;"},
                {"optionTxt": "var add = (x, y) => { x + y };"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "3.",
            "questionText": "What is a closure in JavaScript?",
            "options": [
                {"optionTxt": "A type of loop that closes when it's done."},
                {"optionTxt": "An operation that ends the execution of the function immediately."},
                {"optionTxt": "A function that remembers and accesses variables from the outer function scope in which it was created."},
                {"optionTxt": "A method to stop further propagation of event handling."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "4.",
            "questionText": "How does JavaScript handle variable scope?",
            "options": [
                {"optionTxt": "All variables are globally scoped."},
                {"optionTxt": "Variables are scoped to the block in which they are defined when using `let` or `const`."},
                {"optionTxt": "Variables are scoped to the function regardless of blocks."},
                {"optionTxt": "B and C are correct depending on whether `var`, `let`, or `const` is used."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "5.",
            "questionText": "Which statement is true about the `this` keyword in arrow functions?",
            "options": [
                {"optionTxt": "It refers to the global object."},
                {"optionTxt": "It is bound to the scope of the function in which it is defined."},
                {"optionTxt": "It refers to the object from which the function was called."},
                {"optionTxt": "It does not have its own `this` context but inherits it from the enclosing execution context."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "6.",
            "questionText": "What does the following JavaScript code return? \n\n```javascript\nfunction makeAdder(x) {\n    return function(y) {\n        return x + y;\n    };\n}\n\nvar add5 = makeAdder(5);\nconsole.log(add5(2));\n```\n",
            "options": [
                {"optionTxt": "5"},
                {"optionTxt": "7"},
                {"optionTxt": "undefined"},
                {"optionTxt": "NaN"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "7.",
            "questionText": "What is the primary reason for using anonymous functions in JavaScript?",
            "options": [
                {"optionTxt": "To improve performance by saving memory."},
                {"optionTxt": "To enable recursion."},
                {"optionTxt": "For function expressions where the function name is not needed."},
                {"optionTxt": "To declare functions without using memory."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
          "questionNo": "8.",
          "questionText": "Which of the following best describes the behavior of a JavaScript function declared with the `var` keyword inside a loop?",
          "options": [
              {"optionTxt": "Each iteration creates a new instance of the function."},
              {"optionTxt": "The function is hoisted to the top of the scope in which it is defined."},
              {"optionTxt": "The function declaration is ignored inside a loop."},
              {"optionTxt": "It throws a syntax error as functions cannot be declared inside loops."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "9.",
          "questionText": "What is the result of trying to access a variable declared with `let` in the temporal dead zone?",
          "options": [
              {"optionTxt": "It returns `undefined`."},
              {"optionTxt": "It returns `null`."},
              {"optionTxt": "It throws a `ReferenceError`."},
              {"optionTxt": "It automatically gets initialized to zero."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "10.",
          "questionText": "What will the following JavaScript code output? \n\n```javascript\nfunction foo() {\n    console.log(a);\n    var a = 2;\n}\nfoo();\n```\n",
          "options": [
              {"optionTxt": "2"},
              {"optionTxt": "`undefined`"},
              {"optionTxt": "`ReferenceError: a is not defined`"},
              {"optionTxt": "It will output nothing."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "11.",
          "questionText": "How do you ensure that an inner function has access to the outer function's variables in JavaScript?",
          "options": [
              {"optionTxt": "By declaring the variables in the global scope."},
              {"optionTxt": "By passing the variables as arguments to the inner function."},
              {"optionTxt": "By using a closure."},
              {"optionTxt": "This is not possible in JavaScript."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "12.",
          "questionText": "Which of the following correctly demonstrates defining and using an arrow function in JavaScript?",
          "options": [
              {"optionTxt": "const multiply = function(x, y) => { return x * y; };"},
              {"optionTxt": "const multiply = (x, y) => x * y;"},
              {"optionTxt": "const multiply = (x, y) => { x * y; };"},
              {"optionTxt": "const multiply => (x, y) { return x * y; };"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "13.",
          "questionText": "What does the following JavaScript code output? \n\n```javascript\nfunction outer() {\n    var a = 10;\n    function inner() {\n        console.log(a);\n    }\n    return inner;\n}\nvar getInner = outer();\ngetInner();\n```\n",
          "options": [
              {"optionTxt": "10"},
              {"optionTxt": "`undefined`"},
              {"optionTxt": "`ReferenceError: a is not defined`"},
              {"optionTxt": "It throws a syntax error."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "14.",
          "questionText": "Which statement is true regarding JavaScript variable scope?",
          "options": [
              {"optionTxt": "`var` is always global when declared outside of any function."},
              {"optionTxt": "`let` and `const` provide both global and function scope."},
              {"optionTxt": "`let` declarations are hoisted to the top of the block."},
              {"optionTxt": "Variables declared with `let` in a block are accessible outside the block."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "15.",
        "questionText": "What is the effect of using the `const` keyword on an array or object in JavaScript?",
        "options": [
            {"optionTxt": "The array or object cannot be modified in any way."},
            {"optionTxt": "Only the reference to the array or object cannot be changed; its contents can be modified."},
            {"optionTxt": "The array or object becomes immutable, similar to a primitive type."},
            {"optionTxt": "The array or object will only accept strings as properties or elements."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "16.",
        "questionText": "What does the following JavaScript code snippet illustrate? \n\n```javascript\nlet x = 10;\nfunction foo() {\n    let x = 20;\n    console.log(x);\n}\nfoo();\nconsole.log(x);\n```\n",
        "options": [
            {"optionTxt": "Closure"},
            {"optionTxt": "Shadowing"},
            {"optionTxt": "Hoisting"},
            {"optionTxt": "Type Coercion"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "17.",
        "questionText": "In JavaScript, what is a practical use of a closure?",
        "options": [
            {"optionTxt": "To prevent variables from being hoisted."},
            {"optionTxt": "To create private variables."},
            {"optionTxt": "To globally expose local variables."},
            {"optionTxt": "To increase performance by keeping function definitions in memory."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "18.",
        "questionText": "Which of the following is a characteristic of arrow functions in JavaScript?",
        "options": [
            {"optionTxt": "They do not have their own `this` context."},
            {"optionTxt": "They can be used as constructors."},
            {"optionTxt": "They must always return a value."},
            {"optionTxt": "They have their own arguments object."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "19.",
        "questionText": "How can you correctly bind a method to an object in JavaScript so that it does not lose context when passed as a callback?",
        "options": [
            {"optionTxt": "Using a bind function: `obj.method.bind(obj)`"},
            {"optionTxt": "Using a closure to encapsulate the method."},
            {"optionTxt": "Declaring the method with `const` inside the object."},
            {"optionTxt": "JavaScript methods are automatically bound to the object and do not need binding."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "20.",
        "questionText": "What is the result of the following JavaScript expression? `console.log(0.1 + 0.2 == 0.3);`",
        "options": [
            {"optionTxt": "true"},
            {"optionTxt": "false"},
            {"optionTxt": "SyntaxError"},
            {"optionTxt": "ReferenceError"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      }
        ]
      },
      {
        "topic": "DOM Manipulation",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which method is used to select an element by its ID in the Document Object Model (DOM)?",
            "options": [
                {"optionTxt": "document.getElementById('id')"},
                {"optionTxt": "document.getElement('id')"},
                {"optionTxt": "document.querySelector('#id')"},
                {"optionTxt": "Both A and C are correct"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "2.",
            "questionText": "How can you add an event listener that runs when a button is clicked in JavaScript?",
            "options": [
                {"optionTxt": "button.clickEvent = function() {};"},
                {"optionTxt": "button.addEventListener('click', function() {});"},
                {"optionTxt": "button.onClick(function() {});"},
                {"optionTxt": "button.trigger('click', function() {});"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "3.",
            "questionText": "What does the `document.querySelectorAll('.className')` method return?",
            "options": [
                {"optionTxt": "The first element with the specified class name."},
                {"optionTxt": "All elements as an array with the specified class name."},
                {"optionTxt": "A NodeList containing all elements with the specified class name."},
                {"optionTxt": "An HTMLCollection containing all elements with the specified class name."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "4.",
            "questionText": "Which property is used to change the text content of an HTML element in JavaScript?",
            "options": [
                {"optionTxt": "innerHTML"},
                {"optionTxt": "textContent"},
                {"optionTxt": "innerText"},
                {"optionTxt": "Both B and C are correct"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "5.",
            "questionText": "How do you remove an element from the DOM using JavaScript?",
            "options": [
                {"optionTxt": "element.remove();"},
                {"optionTxt": "document.removeElement(element);"},
                {"optionTxt": "document.deleteElement(element);"},
                {"optionTxt": "element.delete();"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "6.",
            "questionText": "What is the difference between `innerText` and `textContent` properties in JavaScript?",
            "options": [
                {"optionTxt": "`innerText` returns the visible text contained in a node, while `textContent` returns the full text."},
                {"optionTxt": "`textContent` filters out sensitive content, while `innerText` does not."},
                {"optionTxt": "`innerText` can be used on any element, whereas `textContent` is only for form elements."},
                {"optionTxt": "There is no difference; both properties do the same thing."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "7.",
            "questionText": "Which method is used to create a new HTML element in the DOM?",
            "options": [
                {"optionTxt": "document.createElement('element')"},
                {"optionTxt": "document.newElement('element')"},
                {"optionTxt": "document.addElement('element')"},
                {"optionTxt": "document.create('element')"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
          "questionNo": "8.",
          "questionText": "What is the correct way to set an attribute for an HTML element using JavaScript?",
          "options": [
              {"optionTxt": "element.setAttribute('class', 'active');"},
              {"optionTxt": "element.setAttribute('class:active');"},
              {"optionTxt": "element.setAttr('class', 'active');"},
              {"optionTxt": "element.attribute('class', 'active');"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "9.",
          "questionText": "Which event listener would you use to execute a function when a user moves the mouse over a specific element?",
          "options": [
              {"optionTxt": "mouseover"},
              {"optionTxt": "mousehover"},
              {"optionTxt": "mouseenter"},
              {"optionTxt": "mousemove"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "10.",
          "questionText": "How can you stop the default action of an event from being triggered in JavaScript?",
          "options": [
              {"optionTxt": "event.stop();"},
              {"optionTxt": "event.preventDefault();"},
              {"optionTxt": "event.stopPropagation();"},
              {"optionTxt": "event.pausePropagation();"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "11.",
          "questionText": "What does the `event.stopPropagation()` method do?",
          "options": [
              {"optionTxt": "Prevents the event from triggering any further action."},
              {"optionTxt": "Prevents the event from being captured or bubbled up to parent elements."},
              {"optionTxt": "Stops all subsequent JavaScript from executing."},
              {"optionTxt": "Resets the event's propagation path."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "12.",
          "questionText": "What will happen if you set `element.innerHTML = '<script>alert(\"Hi!\");</script>';`?",
          "options": [
              {"optionTxt": "It will display an alert box when the element is rendered."},
              {"optionTxt": "The script tag will be safely ignored by the browser."},
              {"optionTxt": "It will add the script to the DOM but not execute it."},
              {"optionTxt": "A syntax error will occur."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "13.",
          "questionText": "Which method is most efficient for attaching an event listener to multiple elements?",
          "options": [
              {"optionTxt": "Attach an event listener to each element individually."},
              {"optionTxt": "Use the document object to listen for events and delegate."},
              {"optionTxt": "Attach an event listener to the window object."},
              {"optionTxt": "It is not possible to attach a single event listener to multiple elements."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "14.",
          "questionText": "What is the output when using the `nextSibling` property on the last child element within its parent?",
          "options": [
              {"optionTxt": "The first child of the parent element."},
              {"optionTxt": "null"},
              {"optionTxt": "undefined"},
              {"optionTxt": "The parent element itself."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "15.",
        "questionText": "How can you access the child nodes of an element, including text nodes and element nodes?",
        "options": [
            {"optionTxt": "element.childNodes"},
            {"optionTxt": "element.children"},
            {"optionTxt": "element.getChildNodes()"},
            {"optionTxt": "element.nextElementSibling"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "16.",
        "questionText": "What is the purpose of the `document.createElement` method?",
        "options": [
            {"optionTxt": "It is used to find an existing HTML element."},
            {"optionTxt": "It creates a new HTML tag in the document."},
            {"optionTxt": "It creates a new HTML element node in the document."},
            {"optionTxt": "It modifies an existing HTML element."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "17.",
        "questionText": "What does the `element.classList.add('new-class')` method do?",
        "options": [
            {"optionTxt": "Replaces all existing classes with 'new-class'."},
            {"optionTxt": "Adds a new class to the list of classes of the element if it doesn't already exist."},
            {"optionTxt": "Creates a new class in the CSS stylesheet."},
            {"optionTxt": "Checks if 'new-class' exists in the element’s class list."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "18.",
        "questionText": "How do you remove all child nodes from a DOM element in JavaScript?",
        "options": [
            {"optionTxt": "element.removeChildNodes();"},
            {"optionTxt": "while (element.firstChild) { element.removeChild(element.firstChild); }"},
            {"optionTxt": "element.deleteChildNodes();"},
            {"optionTxt": "element.childNodes.remove();"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "19.",
        "questionText": "Which DOM method can be used to handle dynamic content where new elements might be added to the DOM that need event handling?",
        "options": [
            {"optionTxt": "addEventListener() with {capture: true}"},
            {"optionTxt": "attachEvent() on the document object"},
            {"optionTxt": "addEventListener() on individual elements"},
            {"optionTxt": "addEventListener() on a parent element using event delegation"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "20.",
        "questionText": "Which event is fired when the user clicks anywhere in the document?",
        "options": [
            {"optionTxt": "onclick"},
            {"optionTxt": "onmousedown"},
            {"optionTxt": "onmouseup"},
            {"optionTxt": "document.click"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      }
        ]
      },
      {
        "topic": "Event Handling",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "Which method is used to attach an event handler to a specific element in JavaScript?",
            "options": [
                {"optionTxt": "element.event('click', function() {});"},
                {"optionTxt": "element.attachEvent('onclick', function() {});"},
                {"optionTxt": "element.addEventListener('click', function() {});"},
                {"optionTxt": "element.onEvent('click', function() {});"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "2.",
            "questionText": "What is event propagation in the context of the DOM?",
            "options": [
                {"optionTxt": "The process of automatically attaching event listeners to child elements."},
                {"optionTxt": "The method of executing CSS animations when an event occurs."},
                {"optionTxt": "The process by which an event travels from the target element up through the ancestors in the DOM tree."},
                {"optionTxt": "The process by which an event travels from the document root down to the target element."},
                {"optionTxt": "The process by which an event travels from the target element up through the ancestors and then back down through the descendants."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "E"}
        },
        {
            "questionNo": "3.",
            "questionText": "How can you prevent a form from submitting when a submit button is clicked?",
            "options": [
                {"optionTxt": "Set `disabled=true` on the submit button."},
                {"optionTxt": "Use the `event.cancel()` method in the event handler."},
                {"optionTxt": "Use the `event.preventDefault()` method in the event handler."},
                {"optionTxt": "Return `false` from the event handler."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "4.",
            "questionText": "What does the `stopPropagation` method do when called inside an event handler?",
            "options": [
                {"optionTxt": "It stops the browser from reloading."},
                {"optionTxt": "It prevents any default actions associated with the event."},
                {"optionTxt": "It prevents the event from bubbling up or capturing down the DOM tree."},
                {"optionTxt": "It stops all event handlers from executing after the current one."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "5.",
            "questionText": "Which property of the event object is used to determine the element that originally triggered the event?",
            "options": [
                {"optionTxt": "event.target"},
                {"optionTxt": "event.type"},
                {"optionTxt": "event.sourceElement"},
                {"optionTxt": "event.origin"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "6.",
            "questionText": "What is the correct order of phases in the event flow described by the DOM Event Model?",
            "options": [
                {"optionTxt": "Target > Capturing > Bubbling"},
                {"optionTxt": "Capturing > Target > Bubbling"},
                {"optionTxt": "Bubbling > Capturing > Target"},
                {"optionTxt": "Bubbling > Target > Capturing"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "7.",
            "questionText": "What is the difference between `event.target` and `event.currentTarget` within an event handler?",
            "options": [
                {"optionTxt": "`event.target` is the element that triggered the event, while `event.currentTarget` is the element that the event listener is attached to."},
                {"optionTxt": "`event.currentTarget` is the element that triggered the event, while `event.target` is the element that the event listener is attached to."},
                {"optionTxt": "There is no difference; both properties refer to the same element."},
                {"optionTxt": "`event.currentTarget` refers to the document object only, whereas `event.target` can refer to any DOM element."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
          "questionNo": "8.",
          "questionText": "Which HTML attribute can directly execute JavaScript code when an element is clicked, and what is a safer alternative using JavaScript?",
          "options": [
              {"optionTxt": "onclick; Use element.onclick = function() {} in JavaScript."},
              {"optionTxt": "onexecute; Use element.addEventListener('execute', function() {});"},
              {"optionTxt": "onclick; Use element.addEventListener('click', function() {});"},
              {"optionTxt": "onaction; Use element.onaction = function() {};"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "9.",
          "questionText": "What method can you use to remove an event listener that was previously added to an element in JavaScript?",
          "options": [
              {"optionTxt": "element.removeEventListener('event', handler);"},
              {"optionTxt": "element.detachEventListener('event', handler);"},
              {"optionTxt": "element.deleteEventListener('event', handler);"},
              {"optionTxt": "element.unbindEvent('event', handler);"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "10.",
          "questionText": "When working with event delegation, why might you use `event.target` instead of `event.currentTarget`?",
          "options": [
              {"optionTxt": "To identify the specific element that was clicked within a parent element."},
              {"optionTxt": "To capture the event before it propagates to the target."},
              {"optionTxt": "To reference the element to which the event handler is bound."},
              {"optionTxt": "To prevent the default action of the event."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "11.",
          "questionText": "What is the default behavior of the 'submit' event in HTML forms and how can you prevent it using JavaScript?",
          "options": [
              {"optionTxt": "It sends form data to the server; use `event.preventDefault()` in the event handler to stop it."},
              {"optionTxt": "It clears the form; use `event.stopPropagation()` to stop it."},
              {"optionTxt": "It validates the form inputs; use `event.validate(false)` to prevent it."},
              {"optionTxt": "It reloads the page; use `event.reload(false)` to prevent it."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "12.",
          "questionText": "What does using `event.stopImmediatePropagation()` accomplish?",
          "options": [
              {"optionTxt": "It stops the event from propagating to the next bubble phase."},
              {"optionTxt": "It prevents other listeners of the same event from being called."},
              {"optionTxt": "It immediately stops all animations triggered by the event."},
              {"optionTxt": "It resets the event's propagation path and starts over."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "13.",
          "questionText": "How does the 'focus' event differ from the 'click' event in terms of propagation?",
          "options": [
              {"optionTxt": "`focus` does not bubble up the DOM tree, whereas `click` does."},
              {"optionTxt": "`focus` and `click` both bubble and can be stopped using `event.stopPropagation()`. "},
              {"optionTxt": "`click` events can be delegated, but `focus` events cannot."},
              {"optionTxt": "There is no difference; both behave identically in propagation."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "14.",
          "questionText": "What happens if you call `event.preventDefault()` inside a 'click' event listener attached to a checkbox?",
          "options": [
              {"optionTxt": "It prevents the checkbox from being checked or unchecked."},
              {"optionTxt": "It disables the checkbox."},
              {"optionTxt": "It hides the checkbox from the view."},
              {"optionTxt": "It deletes the checkbox from the DOM."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "15.",
        "questionText": "Which event is commonly used to delay script execution until all HTML is fully loaded?",
        "options": [
            {"optionTxt": "onload"},
            {"optionTxt": "onready"},
            {"optionTxt": "DOMContentLoaded"},
            {"optionTxt": "documentReady"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "16.",
        "questionText": "What is the effect of calling `event.stopPropagation()` during event capturing?",
        "options": [
            {"optionTxt": "It stops the event from capturing down to any further elements."},
            {"optionTxt": "It only stops the event on the target element."},
            {"optionTxt": "It prevents the event from bubbling up after it reaches the target."},
            {"optionTxt": "It cancels the event entirely and no further listeners are executed."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "17.",
        "questionText": "How can you programmatically trigger a 'click' event on a button element?",
        "options": [
            {"optionTxt": "button.click();"},
            {"optionTxt": "button.emit('click');"},
            {"optionTxt": "button.dispatchEvent(new Event('click'));"},
            {"optionTxt": "Both A and C are correct"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "18.",
        "questionText": "What does the 'change' event do in the context of form elements?",
        "options": [
            {"optionTxt": "It fires every time the element's value is changed by the user."},
            {"optionTxt": "It fires when the element loses focus, after the content has been changed."},
            {"optionTxt": "It fires continuously as the user types or selects options."},
            {"optionTxt": "It only fires when a form is submitted if the value has changed."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "19.",
        "questionText": "In which scenario would you use the `blur` event?",
        "options": [
            {"optionTxt": "When you want to validate the data immediately after a user types into a form field."},
            {"optionTxt": "When you want to apply a CSS style to an input field when it is clicked."},
            {"optionTxt": "When you want to save the input field data when the user moves away from the form field."},
            {"optionTxt": "When you want to prevent the user from leaving the input field."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "20.",
        "questionText": "What happens if you do not prevent the default action of a 'submit' event in a JavaScript form handler?",
        "options": [
            {"optionTxt": "The form data is saved locally on the client's machine."},
            {"optionTxt": "The form will attempt to submit data to a server, possibly reloading the page."},
            {"optionTxt": "The form inputs are automatically cleared."},
            {"optionTxt": "The form becomes disabled."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      }
        ]
      },
      {
        "topic": "Asynchronous JavaScript",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is a callback in JavaScript?",
            "options": [
                {"optionTxt": "A function that runs after another function has finished running."},
                {"optionTxt": "A type of JavaScript function that executes a loop repeatedly."},
                {"optionTxt": "A method that sends a function to another function as an argument."},
                {"optionTxt": "An array method that calls a function for each element in the array."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "2.",
            "questionText": "What is a Promise in JavaScript?",
            "options": [
                {"optionTxt": "A data structure that holds an eventual value or error."},
                {"optionTxt": "A control structure that handles multiple conditional branches."},
                {"optionTxt": "A function that delegates task execution to the JavaScript engine."},
                {"optionTxt": "A JSON object that contains configuration settings."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "3.",
            "questionText": "Which statement about the `async` and `await` syntax is true?",
            "options": [
                {"optionTxt": "The `await` keyword can be used outside of an `async` function."},
                {"optionTxt": "The `async` keyword is used to pause the execution of a function until a Promise is resolved."},
                {"optionTxt": "The `await` keyword is used to pause the execution of an `async` function until a Promise is resolved."},
                {"optionTxt": "Both `async` and `await` can be used independently without any restrictions."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "4.",
            "questionText": "What does the JavaScript event loop do?",
            "options": [
                {"optionTxt": "It continuously monitors for events and triggers callbacks immediately."},
                {"optionTxt": "It handles the execution of multiple threads, allowing JavaScript to perform multi-threading operations."},
                {"optionTxt": "It prioritizes callback execution based on the stack and task queues."},
                {"optionTxt": "It is responsible for executing the code, collecting and processing events, and executing queued sub-tasks."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "5.",
            "questionText": "How can you handle errors in a JavaScript Promise?",
            "options": [
                {"optionTxt": "Using a `try` block inside the Promise."},
                {"optionTxt": "Using an `error` event listener on the Promise object."},
                {"optionTxt": "Using the `catch()` method chained to the Promise."},
                {"optionTxt": "Promises do not support error handling."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "6.",
            "questionText": "What is the result of executing multiple `setImmediate()` commands in Node.js?",
            "options": [
                {"optionTxt": "They execute after any pending I/O operations."},
                {"optionTxt": "They execute before any other form of asynchronous code."},
                {"optionTxt": "They are executed at the end of the current event loop cycle."},
                {"optionTxt": "They interrupt the event loop and run immediately."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "7.",
            "questionText": "What is the main advantage of using async/await over traditional promise chains?",
            "options": [
                {"optionTxt": "Async/await allows JavaScript to perform multi-threading operations."},
                {"optionTxt": "Async/await provides a simpler and cleaner way to handle asynchronous code, avoiding complex promise chains."},
                {"optionTxt": "Async/await executes faster than using promises."},
                {"optionTxt": "Async/await does not require error handling."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
          "questionNo": "8.",
          "questionText": "What does the `fetch()` function return in JavaScript?",
          "options": [
              {"optionTxt": "It returns the data retrieved from the server as a string."},
              {"optionTxt": "It returns a Promise that resolves with the response to the request."},
              {"optionTxt": "It returns an array containing the headers and body of the response."},
              {"optionTxt": "It directly returns the JSON data from the request."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "9.",
          "questionText": "Which of the following is NOT a correct way to use promises?",
          "options": [
              {"optionTxt": "promise.then(data => console.log(data)).catch(error => console.error(error));"},
              {"optionTxt": "promise.then(data => console.log(data), error => console.error(error));"},
              {"optionTxt": "promise.catch(error => console.error(error)).then(data => console.log(data));"},
              {"optionTxt": "promise.finally(data => console.log(data)).catch(error => console.error(error));"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "10.",
          "questionText": "How do you correctly chain multiple asynchronous tasks using promises?",
          "options": [
              {"optionTxt": "By nesting promises inside each other."},
              {"optionTxt": "By using a single `.then()` method for all promises."},
              {"optionTxt": "By returning a promise in the `.then()` callback."},
              {"optionTxt": "By passing all promises to `Promise.all()`."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "11.",
          "questionText": "What is the purpose of `Promise.all()` in JavaScript?",
          "options": [
              {"optionTxt": "To execute multiple promises sequentially."},
              {"optionTxt": "To execute multiple promises in parallel and wait for all to resolve."},
              {"optionTxt": "To ensure that promises do not interfere with each other."},
              {"optionTxt": "To reject all promises if one of them fails."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "12.",
          "questionText": "In what scenario might you use `Promise.race()`?",
          "options": [
              {"optionTxt": "When you need to wait for all asynchronous operations to complete."},
              {"optionTxt": "When you need the result from the first resolved or rejected promise in a group of promises."},
              {"optionTxt": "When you want to execute promises in a specific order."},
              {"optionTxt": "When you need to generate a sequence of numbers."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "13.",
          "questionText": "What will happen if an error occurs in an `async` function and it is not caught?",
          "options": [
              {"optionTxt": "The error will be suppressed by the JavaScript engine."},
              {"optionTxt": "The error will cause the promise returned by the async function to be rejected."},
              {"optionTxt": "The async function will return `undefined`."},
              {"optionTxt": "The entire script will stop executing."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "14.",
          "questionText": "What is a potential pitfall of using `async/await` with `forEach`?",
          "options": [
              {"optionTxt": "The `await` will not actually pause the execution of the `forEach` loop."},
              {"optionTxt": "It causes a memory leak."},
              {"optionTxt": "It will always throw a syntax error."},
              {"optionTxt": "It will multiply the results by the number of items in the array."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "15.",
        "questionText": "What is the significance of using `await` inside a loop in an `async` function?",
        "options": [
            {"optionTxt": "It allows each iteration of the loop to wait for asynchronous operations to complete before proceeding."},
            {"optionTxt": "It prevents the loop from executing."},
            {"optionTxt": "It causes the asynchronous operations to run in parallel."},
            {"optionTxt": "It skips iterations if the awaited operation takes too long."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "16.",
        "questionText": "How can you handle exceptions thrown in an asynchronous function executed with `await`?",
        "options": [
            {"optionTxt": "By wrapping the `await` call in a try-catch block."},
            {"optionTxt": "By adding a `.catch()` method after the `await` call."},
            {"optionTxt": "By using the `onerror` event handler."},
            {"optionTxt": "By checking the return value of the `await` call for errors."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "17.",
        "questionText": "What will happen if you call `await` on a function that does not return a promise?",
        "options": [
            {"optionTxt": "A runtime error will occur."},
            {"optionTxt": "The function will automatically return a rejected promise."},
            {"optionTxt": "The `await` will treat the returned value as a resolved promise."},
            {"optionTxt": "The calling function will become synchronous."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "18.",
        "questionText": "In JavaScript, what is the main advantage of using `async/await` over traditional promise-based approaches?",
        "options": [
            {"optionTxt": "It provides a way to use synchronous programming techniques."},
            {"optionTxt": "It improves performance by using multiple threads."},
            {"optionTxt": "It simplifies the syntax and handling of asynchronous operations, making the code more readable and easier to understand."},
            {"optionTxt": "It reduces the number of lines of code necessary to perform asynchronous tasks."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "19.",
        "questionText": "When using `Promise.allSettled()`, what kind of information does it provide about the promises passed to it?",
        "options": [
            {"optionTxt": "It returns an array of promises as they are resolved or rejected, indicating only the status of each."},
            {"optionTxt": "It returns a single promise that resolves after all the given promises have either resolved or rejected, providing details about each promise's result."},
            {"optionTxt": "It only returns the first resolved promise and ignores others."},
            {"optionTxt": "It automatically retries any rejected promises before resolving."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "20.",
        "questionText": "What is the purpose of the JavaScript `Microtask Queue`?",
        "options": [
            {"optionTxt": "It is used for scheduling long-running operations to keep the UI responsive."},
            {"optionTxt": "It is used to store all callback functions for asynchronous operations."},
            {"optionTxt": "It processes tasks that are responses to DOM events."},
            {"optionTxt": "It is used to handle tasks that should be executed immediately after the currently executing script and before handling any other events."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "21.",
        "questionText": "What role does the `async` keyword play when used in front of a function declaration?",
        "options": [
            {"optionTxt": "It causes the function to run asynchronously."},
            {"optionTxt": "It indicates that the function can use the `await` keyword inside its body."},
            {"optionTxt": "It automatically makes the function return a Promise."},
            {"optionTxt": "Both B and C are correct."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "22.",
        "questionText": "Which statement is true about using `await` with `Promise.all()`?",
        "options": [
            {"optionTxt": "It unwraps the values of all resolved promises into a single value."},
            {"optionTxt": "It waits for all promises to resolve or any to reject before continuing."},
            {"optionTxt": "It causes the promises to execute sequentially, not in parallel."},
            {"optionTxt": "It only returns the first promise that resolves, ignoring the rest."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "23.",
        "questionText": "How do you ensure that multiple asynchronous operations execute in sequence, where each subsequent operation starts only after the previous one has finished?",
        "options": [
            {"optionTxt": "Place each operation in a separate `.then()` after a Promise."},
            {"optionTxt": "Use `Promise.all()` to manage the sequence."},
            {"optionTxt": "Use a loop with `await` inside an `async` function."},
            {"optionTxt": "All asynchronous operations in JavaScript are naturally sequential."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "24.",
        "questionText": "What is a common use case for `Promise.race()` in JavaScript?",
        "options": [
            {"optionTxt": "To handle errors in multiple promises."},
            {"optionTxt": "To limit the time waiting for an asynchronous operation by racing it against a timeout promise."},
            {"optionTxt": "To execute multiple asynchronous functions in a specified order."},
            {"optionTxt": "To determine the slowest promise in a list of promises."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "25.",
        "questionText": "What is the effect of omitting `await` before a promise within an `async` function?",
        "options": [
            {"optionTxt": "The function will not compile."},
            {"optionTxt": "The promise will run, but the `async` function will not wait for it to complete before continuing."},
            {"optionTxt": "The promise will be automatically converted to a synchronous operation."},
            {"optionTxt": "The `async` function will automatically catch any errors from the promise."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "26.",
        "questionText": "What happens when an `async` function throws an exception and it is not caught within the function?",
        "options": [
            {"optionTxt": "The exception is ignored."},
            {"optionTxt": "The exception is logged to the console, but the program continues."},
            {"optionTxt": "The returned promise is rejected with the thrown error as the reason."},
            {"optionTxt": "The function retries execution from the beginning."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "27.",
        "questionText": "What is the purpose of the `finally` block in a `try...catch...finally` statement?",
        "options": [
            {"optionTxt": "To handle errors thrown in the `catch` block."},
            {"optionTxt": "To execute code regardless of whether an error occurs or not."},
            {"optionTxt": "To terminate the execution of the try-catch statement."},
            {"optionTxt": "To provide an alternate code path if the try block fails."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "28.",
        "questionText": "How can you achieve error handling in asynchronous code without using try...catch blocks?",
        "options": [
            {"optionTxt": "By using the `catch()` method of a promise."},
            {"optionTxt": "By passing an error callback as a parameter to an asynchronous function."},
            {"optionTxt": "By checking the error status of the returned promise."},
            {"optionTxt": "Asynchronous code always requires try...catch blocks for error handling."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "29.",
        "questionText": "What is the purpose of the `setTimeout()` function in JavaScript?",
        "options": [
            {"optionTxt": "To execute a function after a specified delay."},
            {"optionTxt": "To set the timeout for AJAX requests."},
            {"optionTxt": "To wait for user interaction before executing a function."},
            {"optionTxt": "To synchronize the execution of multiple asynchronous tasks."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "30.",
        "questionText": "What does the `resolve` function do in a promise?",
        "options": [
            {"optionTxt": "It rejects the promise with the specified value."},
            {"optionTxt": "It marks the promise as fulfilled with the specified value."},
            {"optionTxt": "It waits for the promise to settle before executing the specified value."},
            {"optionTxt": "It throws an error if the specified value is not a promise."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "31.",
        "questionText": "Which statement correctly describes the behavior of `Promise.reject()`?",
        "options": [
            {"optionTxt": "It returns a rejected promise with the specified reason."},
            {"optionTxt": "It returns a resolved promise with the specified reason."},
            {"optionTxt": "It returns a promise that resolves immediately."},
            {"optionTxt": "It returns a promise that never resolves."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "32.",
        "questionText": "What is the significance of the `race condition` in asynchronous programming?",
        "options": [
            {"optionTxt": "It ensures that asynchronous operations always execute in the order they are called."},
            {"optionTxt": "It occurs when two or more asynchronous operations compete for the same shared resource."},
            {"optionTxt": "It guarantees that the fastest asynchronous operation will always win."},
            {"optionTxt": "It prevents the execution of asynchronous operations until all previous operations have completed."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      }
        ]
      },
      {
        "topic": "Objects and Prototypes",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the primary purpose of the `this` keyword in JavaScript?",
            "options": [
                {"optionTxt": "To refer to the current function's scope."},
                {"optionTxt": "To create a new instance of an object."},
                {"optionTxt": "To refer to the object that is currently executing the function."},
                {"optionTxt": "To access the prototype chain of an object."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "2.",
            "questionText": "What is the difference between using object literals and constructors to create objects in JavaScript?",
            "options": [
                {"optionTxt": "Object literals allow for the creation of multiple similar objects, while constructors create a single unique object."},
                {"optionTxt": "Object literals are used to define properties and methods, while constructors are used to create instances of objects."},
                {"optionTxt": "Object literals use prototypes to inherit properties and methods, while constructors do not."},
                {"optionTxt": "There is no difference; both methods create objects in the same way."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "3.",
            "questionText": "What is the purpose of the `prototype` property in JavaScript constructors?",
            "options": [
                {"optionTxt": "To store the internal state of an object."},
                {"optionTxt": "To define methods and properties shared by all instances of the object."},
                {"optionTxt": "To create new instances of the object."},
                {"optionTxt": "To access the constructor function itself."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "4.",
            "questionText": "What is the prototype chain in JavaScript?",
            "options": [
                {"optionTxt": "It is a chain of constructors used to create new objects."},
                {"optionTxt": "It is a chain of objects used for method inheritance."},
                {"optionTxt": "It is a mechanism for accessing properties and methods of an object's prototype."},
                {"optionTxt": "It is a data structure used to store objects in memory."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "5.",
            "questionText": "How can you add a method to an existing JavaScript object?",
            "options": [
                {"optionTxt": "By modifying the object's prototype."},
                {"optionTxt": "By using the `Object.assign()` method."},
                {"optionTxt": "By directly assigning a function to the object's property."},
                {"optionTxt": "By using the `new` keyword with a constructor function."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
          "questionNo": "6.",
          "questionText": "What happens when you try to access a property of an object that does not exist?",
          "options": [
              {"optionTxt": "It throws a runtime error."},
              {"optionTxt": "It returns `undefined`."},
              {"optionTxt": "It creates the property and assigns a value of `null`."},
              {"optionTxt": "It automatically adds the property to the object with a default value."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "7.",
          "questionText": "How can you check if a property exists in an object?",
          "options": [
              {"optionTxt": "By using the `hasOwnProperty()` method."},
              {"optionTxt": "By checking if the property is equal to `undefined`."},
              {"optionTxt": "By using a `for...in` loop."},
              {"optionTxt": "All of the above."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "8.",
          "questionText": "What is the difference between using the `new` keyword and Object.create() to create objects?",
          "options": [
              {"optionTxt": "`new` keyword creates an instance of a constructor function, while `Object.create()` creates an object with the specified prototype."},
              {"optionTxt": "`new` keyword creates a shallow copy of an object, while `Object.create()` creates a deep copy."},
              {"optionTxt": "`new` keyword is used for primitive data types, while `Object.create()` is used for objects."},
              {"optionTxt": "There is no difference; both methods create objects in the same way."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "9.",
          "questionText": "What is the difference between `prototype` and `__proto__` in JavaScript?",
          "options": [
              {"optionTxt": "`prototype` is a property of constructor functions, while `__proto__` is a property of instances."},
              {"optionTxt": "`prototype` refers to the prototype object of a function, while `__proto__` refers to the prototype object of an instance."},
              {"optionTxt": "`prototype` is used for method inheritance, while `__proto__` is used for property inheritance."},
              {"optionTxt": "`prototype` is a built-in object, while `__proto__` is a user-defined object."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "10.",
          "questionText": "What is the primary use of the `Object.setPrototypeOf()` method?",
          "options": [
              {"optionTxt": "To change the prototype of an existing object."},
              {"optionTxt": "To create a new object with the specified prototype."},
              {"optionTxt": "To check if an object has a specific prototype."},
              {"optionTxt": "To define a new prototype for a constructor function."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "11.",
        "questionText": "What is the prototype of an object created using the object literal syntax `{}`?",
        "options": [
            {"optionTxt": "`Object.prototype`"},
            {"optionTxt": "`Object`"},
            {"optionTxt": "`null`"},
            {"optionTxt": "It depends on the JavaScript engine."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "12.",
        "questionText": "How can you determine if an object is derived from a specific prototype?",
        "options": [
            {"optionTxt": "By using the `instanceof` operator."},
            {"optionTxt": "By comparing the object's prototype to the specific prototype."},
            {"optionTxt": "By checking the object's constructor property."},
            {"optionTxt": "By using the `hasOwnProperty()` method."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "13.",
        "questionText": "What is the difference between a prototype and a constructor in JavaScript?",
        "options": [
            {"optionTxt": "A prototype defines the properties and methods of objects created by a constructor."},
            {"optionTxt": "A constructor creates instances of objects, while a prototype is used for inheritance."},
            {"optionTxt": "A prototype is a property of objects, while a constructor is a function used to create objects."},
            {"optionTxt": "There is no difference; both terms refer to the same concept."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "14.",
        "questionText": "What happens when you change a property of an object that is shared across all instances through its prototype?",
        "options": [
            {"optionTxt": "The property value changes for all instances."},
            {"optionTxt": "The property value changes only for the instance where it was modified."},
            {"optionTxt": "An error occurs because prototype properties cannot be modified."},
            {"optionTxt": "The property value is reset to its default value."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "15.",
        "questionText": "How can you prevent a property from being inherited by an object's prototype?",
        "options": [
            {"optionTxt": "By defining the property within the constructor function."},
            {"optionTxt": "By setting the property to `null` after creating the object."},
            {"optionTxt": "By using the `Object.freeze()` method on the property."},
            {"optionTxt": "By deleting the property from the prototype object."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "16.",
        "questionText": "What happens if you try to access a property of an object, but the property is not found in the object or its prototype chain?",
        "options": [
            {"optionTxt": "It throws a TypeError."},
            {"optionTxt": "It returns `null`."},
            {"optionTxt": "It returns `undefined`."},
            {"optionTxt": "It creates the property in the object and assigns a value of `undefined`."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "17.",
        "questionText": "What is the purpose of the `Object.create()` method in JavaScript?",
        "options": [
            {"optionTxt": "To create a new object with the specified prototype."},
            {"optionTxt": "To clone an existing object."},
            {"optionTxt": "To create a shallow copy of an object."},
            {"optionTxt": "To create a new object with the specified properties."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "18.",
        "questionText": "What is the difference between adding properties to an object's prototype and adding them directly to the object itself?",
        "options": [
            {"optionTxt": "Properties added to the prototype are shared across all instances, while properties added directly to the object are unique to that instance."},
            {"optionTxt": "Properties added to the prototype are private, while properties added directly to the object are public."},
            {"optionTxt": "There is no difference; both methods add properties to the object."},
            {"optionTxt": "Properties added to the prototype can be accessed using dot notation, while properties added directly to the object cannot."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "19.",
        "questionText": "How can you determine an object's prototype?",
        "options": [
            {"optionTxt": "By using the `__proto__` property."},
            {"optionTxt": "By calling the `Object.getPrototypeOf()` method."},
            {"optionTxt": "By checking the `constructor.prototype` property."},
            {"optionTxt": "All of the above."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "20.",
        "questionText": "What is the purpose of the `instanceof` operator in JavaScript?",
        "options": [
            {"optionTxt": "To check if an object inherits from a specific prototype."},
            {"optionTxt": "To determine if an object is an instance of a particular class."},
            {"optionTxt": "To compare two objects for equality."},
            {"optionTxt": "To convert a value to an instance of a specified class."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      }
        ]
      },
      {
        "topic": "ES6+ Features",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the purpose of the spread operator (...) in JavaScript?",
            "options": [
                {"optionTxt": "To merge multiple arrays into a single array."},
                {"optionTxt": "To spread the elements of an array into individual elements."},
                {"optionTxt": "To clone an object with shallow copy."},
                {"optionTxt": "To create a new array with the specified length."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "2.",
            "questionText": "How can you use the rest parameter syntax (...) in a function definition?",
            "options": [
                {"optionTxt": "To gather all arguments passed to the function into an array."},
                {"optionTxt": "To spread the function's arguments into individual elements."},
                {"optionTxt": "To specify default parameter values for a function."},
                {"optionTxt": "To define a variable number of parameters for a function."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "3.",
            "questionText": "What is destructuring assignment in JavaScript?",
            "options": [
                {"optionTxt": "It is a way to create new objects from existing objects."},
                {"optionTxt": "It is a way to extract values from arrays or objects and assign them to variables."},
                {"optionTxt": "It is a way to define default values for function parameters."},
                {"optionTxt": "It is a way to spread elements of an array into individual variables."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "4.",
            "questionText": "How do template literals differ from regular strings in JavaScript?",
            "options": [
                {"optionTxt": "Template literals allow for string interpolation and multiline strings."},
                {"optionTxt": "Template literals are immutable, while regular strings are mutable."},
                {"optionTxt": "Template literals can only contain single quotes, while regular strings can contain both single and double quotes."},
                {"optionTxt": "There is no difference; template literals are just a syntactic sugar for regular strings."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "5.",
            "questionText": "What does the arrow function syntax (`=>`) offer compared to regular function expressions?",
            "options": [
                {"optionTxt": "Arrow functions provide a more concise syntax for writing functions."},
                {"optionTxt": "Arrow functions automatically bind `this` to the function's lexical scope."},
                {"optionTxt": "Arrow functions support named parameters."},
                {"optionTxt": "Arrow functions cannot have a body with multiple statements."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
          "questionNo": "6.",
          "questionText": "How can you use the spread operator (...) to clone an array in JavaScript?",
          "options": [
              {"optionTxt": "By spreading the array into a new array literal."},
              {"optionTxt": "By using the `slice()` method."},
              {"optionTxt": "By concatenating the array with an empty array."},
              {"optionTxt": "By using the `Object.assign()` method."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "7.",
          "questionText": "What is the purpose of the rest parameter when used in conjunction with function parameters?",
          "options": [
              {"optionTxt": "To specify a default value for a parameter."},
              {"optionTxt": "To gather remaining function arguments into an array."},
              {"optionTxt": "To define a variable number of parameters for a function."},
              {"optionTxt": "To spread the function's arguments into individual elements."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "8.",
          "questionText": "How can you destructure an object and assign default values to its properties in JavaScript?",
          "options": [
              {"optionTxt": "By using the spread operator."},
              {"optionTxt": "By providing default values in the object literal."},
              {"optionTxt": "By using the `Object.create()` method."},
              {"optionTxt": "By specifying default values in the destructuring assignment."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "9.",
          "questionText": "What is the benefit of using template literals in JavaScript?",
          "options": [
              {"optionTxt": "They allow for string interpolation and multiline strings."},
              {"optionTxt": "They provide better performance compared to regular strings."},
              {"optionTxt": "They support special escape characters like \\n and \\t."},
              {"optionTxt": "They are shorter and more concise than regular strings."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "10.",
          "questionText": "In an arrow function, what happens if you omit the curly braces ({}) around the function body?",
          "options": [
              {"optionTxt": "It will result in a syntax error."},
              {"optionTxt": "It will automatically return the expression after the arrow."},
              {"optionTxt": "It will execute the function body as a single statement."},
              {"optionTxt": "It will treat the function body as a block of code."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "11.",
        "questionText": "What is the purpose of the `map()` method introduced in ES6?",
        "options": [
            {"optionTxt": "To iterate over the elements of an array and modify them in place."},
            {"optionTxt": "To create a new array by applying a function to each element of an existing array."},
            {"optionTxt": "To filter the elements of an array based on a specified condition."},
            {"optionTxt": "To check if at least one element in the array satisfies a given condition."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "12.",
        "questionText": "How can you use the arrow function syntax to define a function that takes multiple parameters?",
        "options": [
            {"optionTxt": "() => { /* function body */ }"},
            {"optionTxt": "(param1, param2) => { /* function body */ }"},
            {"optionTxt": "param1, param2 => { /* function body */ }"},
            {"optionTxt": "(param1, param2) => return { /* function body */ }"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "13.",
        "questionText": "What is the purpose of the `...` operator when used in function arguments?",
        "options": [
            {"optionTxt": "To spread the function's arguments into individual elements."},
            {"optionTxt": "To gather remaining function arguments into an array."},
            {"optionTxt": "To create a shallow copy of the arguments object."},
            {"optionTxt": "To concatenate two or more arrays."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "14.",
        "questionText": "How can you destructure an array and skip certain elements?",
        "options": [
            {"optionTxt": "By providing default values for the elements to be skipped."},
            {"optionTxt": "By using the spread operator before the elements to be skipped."},
            {"optionTxt": "By omitting the variable name for the elements to be skipped."},
            {"optionTxt": "By using the `null` keyword for the elements to be skipped."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "15.",
        "questionText": "What is the purpose of tagged template literals in JavaScript?",
        "options": [
            {"optionTxt": "To format strings with special characters like newline and tab."},
            {"optionTxt": "To create reusable templates for generating HTML markup."},
            {"optionTxt": "To perform advanced string manipulation with embedded expressions."},
            {"optionTxt": "To automatically escape special characters in strings."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "16.",
        "questionText": "What is the purpose of the `find()` method introduced in ES6?",
        "options": [
            {"optionTxt": "To iterate over the elements of an array and modify them in place."},
            {"optionTxt": "To create a new array by applying a function to each element of an existing array."},
            {"optionTxt": "To filter the elements of an array based on a specified condition."},
            {"optionTxt": "To find the first element in the array that satisfies a given condition."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "17.",
        "questionText": "How can you use arrow functions to implicitly return a value?",
        "options": [
            {"optionTxt": "By using the `return` keyword explicitly."},
            {"optionTxt": "By omitting the curly braces {} around the function body."},
            {"optionTxt": "By using the `=>` operator instead of `function` keyword."},
            {"optionTxt": "By wrapping the function body in parentheses ()."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "18.",
        "questionText": "What is the purpose of the `includes()` method introduced in ES6?",
        "options": [
            {"optionTxt": "To check if an array contains a specific element."},
            {"optionTxt": "To concatenate two or more arrays."},
            {"optionTxt": "To remove elements from an array based on a specified condition."},
            {"optionTxt": "To create a new array by applying a function to each element of an existing array."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "19.",
        "questionText": "How can you use destructuring assignment to rename object properties?",
        "options": [
            {"optionTxt": "By using the `rename` keyword followed by the new property name."},
            {"optionTxt": "By providing the new property name after a colon within the destructuring pattern."},
            {"optionTxt": "By using the `as` keyword followed by the new property name."},
            {"optionTxt": "By using the `=>` operator followed by the new property name."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "20.",
        "questionText": "What is the purpose of the `for...of` loop introduced in ES6?",
        "options": [
            {"optionTxt": "To iterate over the properties of an object."},
            {"optionTxt": "To iterate over the values of an array."},
            {"optionTxt": "To iterate over the keys of an object."},
            {"optionTxt": "To iterate over the elements of a Map or Set."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      }
        ]
      },
      {
        "topic": "Modules and Imports",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the purpose of modules in JavaScript?",
            "options": [
                {"optionTxt": "To organize code into reusable units with clear boundaries."},
                {"optionTxt": "To provide a way to declare and use variables and functions."},
                {"optionTxt": "To manipulate the Document Object Model (DOM) in web applications."},
                {"optionTxt": "To handle asynchronous operations with Promises."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "2.",
            "questionText": "How can you export a function from a module in JavaScript?",
            "options": [
                {"optionTxt": "By using the `export` keyword before the function declaration."},
                {"optionTxt": "By using the `module.exports` object."},
                {"optionTxt": "By assigning the function to a global variable."},
                {"optionTxt": "By using the `export()` function."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "3.",
            "questionText": "What is the default export in a JavaScript module?",
            "options": [
                {"optionTxt": "The first function or variable declared in the module."},
                {"optionTxt": "The function or variable explicitly marked with `default` keyword."},
                {"optionTxt": "The object assigned to `module.exports`."},
                {"optionTxt": "The object or function specified after the `export default` statement."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "4.",
            "questionText": "How can you import a default export from a module in JavaScript?",
            "options": [
                {"optionTxt": "By using the `import` keyword followed by the module name."},
                {"optionTxt": "By using the `require()` function."},
                {"optionTxt": "By using the `import default` syntax."},
                {"optionTxt": "By using the `import` keyword followed by `default` and the module name."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "D"}
        },
        {
            "questionNo": "5.",
            "questionText": "What is the purpose of named exports in JavaScript modules?",
            "options": [
                {"optionTxt": "To export multiple functions or variables from a module."},
                {"optionTxt": "To export a single function or variable as the default export."},
                {"optionTxt": "To import functions or variables from another module."},
                {"optionTxt": "To create aliases for existing functions or variables."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
          "questionNo": "6.",
          "questionText": "What is the purpose of the `import` keyword in JavaScript?",
          "options": [
              {"optionTxt": "To declare a new variable."},
              {"optionTxt": "To import functions or variables from another module."},
              {"optionTxt": "To define a function."},
              {"optionTxt": "To create a new object."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "7.",
          "questionText": "How can you import named exports from a module in JavaScript?",
          "options": [
              {"optionTxt": "By using the `import` keyword followed by the module name."},
              {"optionTxt": "By using the `require()` function."},
              {"optionTxt": "By using the `import` keyword followed by `default` and the module name."},
              {"optionTxt": "By using the `import` keyword followed by curly braces `{}` and the exported names."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "8.",
          "questionText": "What happens if you import a module that does not exist?",
          "options": [
              {"optionTxt": "It throws a syntax error."},
              {"optionTxt": "It creates an empty module."},
              {"optionTxt": "It imports all functions and variables from the global scope."},
              {"optionTxt": "It throws a runtime error."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "9.",
          "questionText": "Can you have multiple default exports in a single JavaScript module?",
          "options": [
              {"optionTxt": "Yes, but only one default export will be used."},
              {"optionTxt": "No, a module can only have one default export."},
              {"optionTxt": "Yes, all default exports will be merged into a single object."},
              {"optionTxt": "No, default exports are not allowed in JavaScript modules."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "10.",
          "questionText": "What is the purpose of the `export` keyword in JavaScript?",
          "options": [
              {"optionTxt": "To declare a new variable."},
              {"optionTxt": "To export functions or variables from a module."},
              {"optionTxt": "To define a function."},
              {"optionTxt": "To create a new object."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "11.",
        "questionText": "What is a namespace import in JavaScript modules?",
        "options": [
            {"optionTxt": "It imports all named exports from a module as properties of an object."},
            {"optionTxt": "It imports default exports from a module."},
            {"optionTxt": "It imports multiple modules at once."},
            {"optionTxt": "It renames named exports when importing them."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "12.",
        "questionText": "How can you import all named exports from a module in JavaScript?",
        "options": [
            {"optionTxt": "By using the `import * as` syntax followed by the module name."},
            {"optionTxt": "By using the `import {}` syntax with no specific names."},
            {"optionTxt": "By using the `import default` syntax."},
            {"optionTxt": "By using the `require()` function."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "13.",
        "questionText": "Can you import a module into another module?",
        "options": [
            {"optionTxt": "Yes, but it requires special configuration."},
            {"optionTxt": "No, modules cannot import other modules."},
            {"optionTxt": "Yes, modules can import each other freely."},
            {"optionTxt": "No, modules can only import from the global scope."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "14.",
        "questionText": "What is the purpose of the `export { ... }` syntax in JavaScript modules?",
        "options": [
            {"optionTxt": "To export all functions and variables from a module."},
            {"optionTxt": "To export named exports from a module."},
            {"optionTxt": "To import functions and variables into a module."},
            {"optionTxt": "To declare a new module."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "15.",
        "questionText": "Can you mix default exports and named exports in the same module?",
        "options": [
            {"optionTxt": "Yes, but it is not recommended."},
            {"optionTxt": "No, a module must use either default exports or named exports, not both."},
            {"optionTxt": "Yes, it is a common practice."},
            {"optionTxt": "No, default exports and named exports cannot coexist."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "16.",
        "questionText": "What is the purpose of the `export default` syntax in JavaScript modules?",
        "options": [
            {"optionTxt": "To export multiple functions or variables from a module."},
            {"optionTxt": "To specify the main function or object to be exported from a module."},
            {"optionTxt": "To import a default value into another module."},
            {"optionTxt": "To declare a new module as the default one."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "17.",
        "questionText": "How can you import both default and named exports from a module in JavaScript?",
        "options": [
            {"optionTxt": "By using the `import {}` syntax for named exports and `import default` syntax for default export."},
            {"optionTxt": "By using the `import * as` syntax followed by the module name."},
            {"optionTxt": "By using the `import { ..., default }` syntax."},
            {"optionTxt": "By importing each export separately with its own import statement."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "18.",
        "questionText": "What is a side effect in JavaScript modules?",
        "options": [
            {"optionTxt": "It is an unintended consequence of importing a module."},
            {"optionTxt": "It is a function or variable that is not exported from a module."},
            {"optionTxt": "It is a behavior that occurs when a module is imported, such as modifying global state."},
            {"optionTxt": "It is a syntax error in JavaScript modules."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "19.",
        "questionText": "Can you import a module conditionally in JavaScript?",
        "options": [
            {"optionTxt": "Yes, using the `import` keyword within an `if` statement."},
            {"optionTxt": "No, all imports must be done at the beginning of the file."},
            {"optionTxt": "Yes, using the `require()` function."},
            {"optionTxt": "No, modules cannot be imported conditionally."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "20.",
        "questionText": "What is the purpose of the `import()` function in JavaScript?",
        "options": [
            {"optionTxt": "To import a module dynamically at runtime."},
            {"optionTxt": "To export functions or variables from a module."},
            {"optionTxt": "To import all named exports from a module."},
            {"optionTxt": "To import modules from external sources."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      }
        ]
      },
      {
        "topic": "Web APIs",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the purpose of the Fetch API in JavaScript?",
            "options": [
                {"optionTxt": "To manipulate the Document Object Model (DOM) in web applications."},
                {"optionTxt": "To perform asynchronous HTTP requests and handle responses."},
                {"optionTxt": "To store data locally in the browser."},
                {"optionTxt": "To manage the session state of a user."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "2.",
            "questionText": "How can you use the Fetch API to make a GET request in JavaScript?",
            "options": [
                {"optionTxt": "By using the `fetch()` function with the URL as an argument."},
                {"optionTxt": "By using the `GET()` method of the Fetch object."},
                {"optionTxt": "By using the `request.get()` function."},
                {"optionTxt": "By using the `fetch.get()` method."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "3.",
            "questionText": "What does the `localStorage` object in JavaScript allow you to do?",
            "options": [
                {"optionTxt": "It allows you to perform asynchronous HTTP requests and handle responses."},
                {"optionTxt": "It allows you to store data locally in the browser with no expiration date."},
                {"optionTxt": "It allows you to manage the session state of a user."},
                {"optionTxt": "It allows you to manipulate the Document Object Model (DOM) in web applications."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "4.",
            "questionText": "How can you set an item in the `localStorage` object in JavaScript?",
            "options": [
                {"optionTxt": "By using the `setItem()` method with the key-value pair as arguments."},
                {"optionTxt": "By directly assigning a value to a key in the `localStorage` object."},
                {"optionTxt": "By using the `set()` method of the `localStorage` object."},
                {"optionTxt": "By using the `save()` function with the key-value pair as arguments."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "5.",
            "questionText": "What is the purpose of the SessionStorage object in JavaScript?",
            "options": [
                {"optionTxt": "To perform asynchronous HTTP requests and handle responses."},
                {"optionTxt": "To store data locally in the browser with no expiration date."},
                {"optionTxt": "To manage the session state of a user."},
                {"optionTxt": "To manipulate the Document Object Model (DOM) in web applications."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
          "questionNo": "6.",
          "questionText": "How can you retrieve data from a server using the Fetch API?",
          "options": [
              {"optionTxt": "By using the `get()` method of the Fetch object."},
              {"optionTxt": "By using the `retrieve()` function with the URL as an argument."},
              {"optionTxt": "By using the `fetch()` function with the URL as an argument and handling the promise."},
              {"optionTxt": "By directly accessing the server's URL in the browser."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "7.",
          "questionText": "What does the `localStorage` object in JavaScript store?",
          "options": [
              {"optionTxt": "Data that persists across browser sessions and has no expiration date."},
              {"optionTxt": "Data that is accessible only during the current browser session."},
              {"optionTxt": "Data that is accessible only within a specific domain."},
              {"optionTxt": "Data that is accessible only to a specific user."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "8.",
          "questionText": "What is the difference between localStorage and sessionStorage in JavaScript?",
          "options": [
              {"optionTxt": "localStorage stores data that persists across browser sessions, while sessionStorage stores data that is accessible only during the current session."},
              {"optionTxt": "localStorage stores data that is accessible only during the current session, while sessionStorage stores data that persists across browser sessions."},
              {"optionTxt": "localStorage stores data that is accessible only within a specific domain, while sessionStorage stores data that is accessible only to a specific user."},
              {"optionTxt": "localStorage and sessionStorage are the same and can be used interchangeably."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "9.",
          "questionText": "How can you remove an item from the localStorage object in JavaScript?",
          "options": [
              {"optionTxt": "By using the `removeItem()` method with the key as an argument."},
              {"optionTxt": "By directly setting the value of the item to `null`."},
              {"optionTxt": "By using the `delete()` method of the localStorage object."},
              {"optionTxt": "By using the `clear()` method of the localStorage object."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "10.",
          "questionText": "What is the purpose of the `setItem()` method in the localStorage object?",
          "options": [
              {"optionTxt": "To retrieve an item from localStorage."},
              {"optionTxt": "To update an existing item in localStorage."},
              {"optionTxt": "To remove an item from localStorage."},
              {"optionTxt": "To add a new item to localStorage."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "11.",
        "questionText": "What happens if you try to access localStorage or sessionStorage in a browser that does not support them?",
        "options": [
            {"optionTxt": "An error will be thrown."},
            {"optionTxt": "An empty object will be returned."},
            {"optionTxt": "The browser will prompt the user to enable storage access."},
            {"optionTxt": "A default storage object will be created."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "12.",
        "questionText": "How can you check if localStorage is supported in the current browser?",
        "options": [
            {"optionTxt": "By using the `localStorage` global object and checking if it is not `undefined`."},
            {"optionTxt": "By using the `localStorage` global object and checking if it is `null`."},
            {"optionTxt": "By using the `supportsLocalStorage()` function."},
            {"optionTxt": "By checking the browser's compatibility with the `window.localStorage` property."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "13.",
        "questionText": "What is the purpose of the `fetch()` function in the Fetch API?",
        "options": [
            {"optionTxt": "To retrieve data from a server using HTTP requests."},
            {"optionTxt": "To store data locally in the browser."},
            {"optionTxt": "To manage the session state of a user."},
            {"optionTxt": "To manipulate the Document Object Model (DOM) in web applications."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "14.",
        "questionText": "How can you handle errors in a fetch request?",
        "options": [
            {"optionTxt": "By using the `error()` method of the fetch object."},
            {"optionTxt": "By using the `catch()` method of the fetch promise."},
            {"optionTxt": "By using the `fail()` method of the fetch object."},
            {"optionTxt": "By using the `try-catch` statement around the fetch request."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "15.",
        "questionText": "What is the purpose of the `JSON.stringify()` function?",
        "options": [
            {"optionTxt": "To parse a JSON string into a JavaScript object."},
            {"optionTxt": "To convert a JavaScript object into a JSON string."},
            {"optionTxt": "To format a JSON string for readability."},
            {"optionTxt": "To validate the syntax of a JSON string."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "16.",
        "questionText": "What is the purpose of the `localStorage.setItem()` method?",
        "options": [
            {"optionTxt": "To retrieve an item from localStorage."},
            {"optionTxt": "To update an existing item in localStorage."},
            {"optionTxt": "To remove an item from localStorage."},
            {"optionTxt": "To add a new item to localStorage."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "17.",
        "questionText": "What is the main difference between localStorage and sessionStorage?",
        "options": [
            {"optionTxt": "localStorage persists data across browser sessions, while sessionStorage only persists data for the current session."},
            {"optionTxt": "localStorage stores data only for the current session, while sessionStorage persists data across browser sessions."},
            {"optionTxt": "localStorage and sessionStorage are essentially the same and can be used interchangeably."},
            {"optionTxt": "localStorage and sessionStorage have different methods for storing and retrieving data."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "18.",
        "questionText": "How can you remove an item from sessionStorage in JavaScript?",
        "options": [
            {"optionTxt": "By using the `removeItem()` method with the key as an argument."},
            {"optionTxt": "By directly setting the value of the item to `null`."},
            {"optionTxt": "By using the `delete()` method of the sessionStorage object."},
            {"optionTxt": "By using the `clear()` method of the sessionStorage object."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "19.",
        "questionText": "What is the purpose of the `fetch()` function?",
        "options": [
            {"optionTxt": "To store data locally in the browser."},
            {"optionTxt": "To perform asynchronous HTTP requests and handle responses."},
            {"optionTxt": "To manipulate the Document Object Model (DOM) in web applications."},
            {"optionTxt": "To manage the session state of a user."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "20.",
        "questionText": "Which of the following is NOT a valid method for handling errors in a fetch request?",
        "options": [
            {"optionTxt": "Using the `catch()` method of the fetch promise."},
            {"optionTxt": "Using the `error()` method of the fetch object."},
            {"optionTxt": "Using the `try-catch` statement around the fetch request."},
            {"optionTxt": "Using the `fail()` method of the fetch object."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "21.",
        "questionText": "What is the purpose of the `JSON.parse()` function in JavaScript?",
        "options": [
            {"optionTxt": "To convert a JavaScript object into a JSON string."},
            {"optionTxt": "To parse a JSON string into a JavaScript object."},
            {"optionTxt": "To format a JSON string for readability."},
            {"optionTxt": "To validate the syntax of a JSON string."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "22.",
        "questionText": "Which Web API method is used to store data in the browser's session storage?",
        "options": [
            {"optionTxt": "`localStorage.setItem()`"},
            {"optionTxt": "`sessionStorage.setItem()`"},
            {"optionTxt": "`localStorage.getItem()`"},
            {"optionTxt": "`sessionStorage.getItem()`"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "23.",
        "questionText": "What happens when you try to store non-string data types in localStorage?",
        "options": [
            {"optionTxt": "The data will be automatically converted to a string."},
            {"optionTxt": "An error will be thrown."},
            {"optionTxt": "The data will be stored as-is, without any conversion."},
            {"optionTxt": "The browser will prompt the user for confirmation."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "24.",
        "questionText": "Which method is used to clear all items from localStorage?",
        "options": [
            {"optionTxt": "`localStorage.clear()`"},
            {"optionTxt": "`localStorage.removeItem()`"},
            {"optionTxt": "`localStorage.removeAll()`"},
            {"optionTxt": "`localStorage.deleteAll()`"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "25.",
        "questionText": "What is the purpose of the `sessionStorage.clear()` method?",
        "options": [
            {"optionTxt": "To remove a specific item from sessionStorage."},
            {"optionTxt": "To delete all items from sessionStorage."},
            {"optionTxt": "To check if a specific item exists in sessionStorage."},
            {"optionTxt": "To retrieve all items stored in sessionStorage."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "26.",
        "questionText": "What is the purpose of the `JSON.stringify()` function in JavaScript?",
        "options": [
            {"optionTxt": "To convert a JavaScript object into a JSON string."},
            {"optionTxt": "To parse a JSON string into a JavaScript object."},
            {"optionTxt": "To format a JSON string for readability."},
            {"optionTxt": "To validate the syntax of a JSON string."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "27.",
        "questionText": "Which method is used to retrieve an item from sessionStorage?",
        "options": [
            {"optionTxt": "`sessionStorage.getItem()`"},
            {"optionTxt": "`sessionStorage.setItem()`"},
            {"optionTxt": "`sessionStorage.retrieveItem()`"},
            {"optionTxt": "`sessionStorage.getItemValue()`"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "28.",
        "questionText": "Can data stored in localStorage be accessed by multiple tabs/windows of the same browser?",
        "options": [
            {"optionTxt": "Yes, data stored in localStorage is accessible by all tabs/windows of the same browser."},
            {"optionTxt": "No, data stored in localStorage is accessible only by the tab/window that created it."},
            {"optionTxt": "It depends on the browser's security settings."},
            {"optionTxt": "It depends on whether the data is stored as a string or an object."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "29.",
        "questionText": "Which method is used to check if a specific key exists in localStorage?",
        "options": [
            {"optionTxt": "`localStorage.hasItem()`"},
            {"optionTxt": "`localStorage.exists()`"},
            {"optionTxt": "`localStorage.contains()`"},
            {"optionTxt": "`localStorage.getItem()`"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "30.",
        "questionText": "What does the `localStorage.length` property represent?",
        "options": [
            {"optionTxt": "The number of items currently stored in localStorage."},
            {"optionTxt": "The total capacity of the localStorage storage space in bytes."},
            {"optionTxt": "The length of the longest item stored in localStorage."},
            {"optionTxt": "The length of the key of the last item added to localStorage."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "31.",
        "questionText": "What does the `fetch()` function return?",
        "options": [
            {"optionTxt": "A Promise that resolves to a Response object."},
            {"optionTxt": "The fetched data directly as a JavaScript object."},
            {"optionTxt": "An array containing the fetched data."},
            {"optionTxt": "The XMLHttpRequest object."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "32.",
        "questionText": "Which HTTP method is used by default when making a fetch request?",
        "options": [
            {"optionTxt": "GET"},
            {"optionTxt": "POST"},
            {"optionTxt": "PUT"},
            {"optionTxt": "DELETE"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "33.",
        "questionText": "What is the purpose of the `then()` method in a fetch request?",
        "options": [
            {"optionTxt": "To handle errors in the fetch request."},
            {"optionTxt": "To specify the HTTP method for the request."},
            {"optionTxt": "To convert the response to JSON format."},
            {"optionTxt": "To handle the resolved value of the Promise returned by the fetch request."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "34.",
        "questionText": "How can you send data along with a fetch request?",
        "options": [
            {"optionTxt": "By passing an object with the `body` property containing the data."},
            {"optionTxt": "By appending the data to the URL as query parameters."},
            {"optionTxt": "By using the `send()` method of the fetch request."},
            {"optionTxt": "By passing the data directly as an argument to the fetch function."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "35.",
        "questionText": "What is the purpose of the `catch()` method in a fetch request?",
        "options": [
            {"optionTxt": "To specify the HTTP method for the request."},
            {"optionTxt": "To handle errors in the fetch request."},
            {"optionTxt": "To convert the response to JSON format."},
            {"optionTxt": "To handle the resolved value of the Promise returned by the fetch request."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      }
        ]
      },
      {
        "topic": "Front-end Frameworks",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is a front-end framework in JavaScript?",
            "options": [
                {"optionTxt": "A tool for building user interfaces and web applications."},
                {"optionTxt": "A server-side scripting language."},
                {"optionTxt": "A database management system."},
                {"optionTxt": "A version control system for code collaboration."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "2.",
            "questionText": "Which of the following is a popular front-end framework in JavaScript?",
            "options": [
                {"optionTxt": "React"},
                {"optionTxt": "Express"},
                {"optionTxt": "MongoDB"},
                {"optionTxt": "Node.js"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "3.",
            "questionText": "What is the main purpose of using a front-end framework like React or Angular?",
            "options": [
                {"optionTxt": "To simplify and streamline the process of building interactive user interfaces."},
                {"optionTxt": "To manage server-side logic and database operations."},
                {"optionTxt": "To handle client-side authentication and authorization."},
                {"optionTxt": "To optimize search engine optimization (SEO) for web applications."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "4.",
            "questionText": "Which front-end framework is known for its component-based architecture?",
            "options": [
                {"optionTxt": "React"},
                {"optionTxt": "Vue.js"},
                {"optionTxt": "Angular"},
                {"optionTxt": "Ember.js"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "5.",
            "questionText": "What is the purpose of JSX in React?",
            "options": [
                {"optionTxt": "To define styling for React components."},
                {"optionTxt": "To handle asynchronous data fetching."},
                {"optionTxt": "To specify the structure of UI components using HTML-like syntax."},
                {"optionTxt": "To manage routing and navigation in React applications."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
          "questionNo": "6.",
          "questionText": "What is the virtual DOM in React?",
          "options": [
              {"optionTxt": "A representation of the actual DOM in memory."},
              {"optionTxt": "A separate browser window where React components are rendered."},
              {"optionTxt": "A JavaScript object that maps to the structure of the HTML elements."},
              {"optionTxt": "A server-side rendering technique used by React for performance optimization."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "7.",
          "questionText": "Which front-end framework uses two-way data binding?",
          "options": [
              {"optionTxt": "Angular"},
              {"optionTxt": "React"},
              {"optionTxt": "Vue.js"},
              {"optionTxt": "Ember.js"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "8.",
          "questionText": "What is the purpose of a component library in front-end frameworks?",
          "options": [
              {"optionTxt": "To provide pre-built UI components for faster development."},
              {"optionTxt": "To manage server-side logic and database operations."},
              {"optionTxt": "To handle client-side authentication and authorization."},
              {"optionTxt": "To optimize search engine optimization (SEO) for web applications."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "9.",
          "questionText": "What are the key features of Vue.js?",
          "options": [
              {"optionTxt": "Reactivity, components, and virtual DOM."},
              {"optionTxt": "Dependency injection, directives, and pipes."},
              {"optionTxt": "Strict type checking and static typing."},
              {"optionTxt": "Server-side rendering and code splitting."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "10.",
          "questionText": "What does Angular use for templating?",
          "options": [
              {"optionTxt": "HTML with special Angular directives."},
              {"optionTxt": "JavaScript functions for dynamic rendering."},
              {"optionTxt": "CSS preprocessors for styling."},
              {"optionTxt": "WebAssembly for efficient rendering."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "11.",
        "questionText": "What is the main advantage of using a front-end framework like React or Vue.js?",
        "options": [
            {"optionTxt": "Improved performance through server-side rendering."},
            {"optionTxt": "Simplified UI development with reusable components."},
            {"optionTxt": "Enhanced security features for client-side applications."},
            {"optionTxt": "Built-in support for backend integration and database management."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "12.",
        "questionText": "Which front-end framework is known for its progressive nature, allowing developers to adopt features gradually?",
        "options": [
            {"optionTxt": "React"},
            {"optionTxt": "Vue.js"},
            {"optionTxt": "Angular"},
            {"optionTxt": "Ember.js"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "13.",
        "questionText": "What role does the Angular CLI play in Angular development?",
        "options": [
            {"optionTxt": "It provides a command-line interface for creating, building, and testing Angular applications."},
            {"optionTxt": "It is used to manage backend server configuration and deployment."},
            {"optionTxt": "It handles database migrations and schema management."},
            {"optionTxt": "It integrates with version control systems for code collaboration."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "14.",
        "questionText": "What is server-side rendering (SSR) in the context of front-end frameworks?",
        "options": [
            {"optionTxt": "Rendering UI components on the client side using JavaScript."},
            {"optionTxt": "Rendering UI components on the server side and sending the fully rendered HTML to the client."},
            {"optionTxt": "Optimizing database queries for faster data retrieval."},
            {"optionTxt": "Minimizing the size of JavaScript bundles for improved performance."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "15.",
        "questionText": "What is the purpose of state management libraries like Redux in React applications?",
        "options": [
            {"optionTxt": "To handle server-side logic and database operations."},
            {"optionTxt": "To manage the state of UI components and enable predictable data flow."},
            {"optionTxt": "To optimize search engine optimization (SEO) for web applications."},
            {"optionTxt": "To provide pre-built UI components for faster development."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "16.",
        "questionText": "What are the core principles of React?",
        "options": [
            {"optionTxt": "Data binding, directives, and services."},
            {"optionTxt": "Components, virtual DOM, and one-way data flow."},
            {"optionTxt": "Dependency injection, pipes, and decorators."},
            {"optionTxt": "Observables, subscriptions, and operators."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "17.",
        "questionText": "In Vue.js, what is the purpose of the `v-for` directive?",
        "options": [
            {"optionTxt": "To conditionally render elements based on a boolean value."},
            {"optionTxt": "To loop through an array and render a template for each item."},
            {"optionTxt": "To bind data to HTML attributes or properties."},
            {"optionTxt": "To handle user input events like click or keypress."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "18.",
        "questionText": "What does Angular use for dependency injection?",
        "options": [
            {"optionTxt": "Services"},
            {"optionTxt": "Directives"},
            {"optionTxt": "Components"},
            {"optionTxt": "Modules"}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "19.",
        "questionText": "What is the purpose of Angular directives?",
        "options": [
            {"optionTxt": "To define custom HTML elements."},
            {"optionTxt": "To extend the behavior of existing HTML elements or attributes."},
            {"optionTxt": "To import external JavaScript libraries into Angular applications."},
            {"optionTxt": "To manage the routing and navigation of Angular applications."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "20.",
        "questionText": "How does Vue.js handle reactivity in data?",
        "options": [
            {"optionTxt": "Using watchers to manually detect changes and update the DOM."},
            {"optionTxt": "By automatically tracking dependencies and re-rendering components as needed."},
            {"optionTxt": "By using Redux for centralized state management."},
            {"optionTxt": "By utilizing server-side rendering for faster initial page load."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "21.",
        "questionText": "What is the purpose of Angular services?",
        "options": [
            {"optionTxt": "To define custom HTML elements."},
            {"optionTxt": "To extend the behavior of existing HTML elements or attributes."},
            {"optionTxt": "To provide reusable logic and data to different parts of an Angular application."},
            {"optionTxt": "To manage the routing and navigation of Angular applications."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "22.",
        "questionText": "How does React handle component communication?",
        "options": [
            {"optionTxt": "Through one-way data binding."},
            {"optionTxt": "Through two-way data binding."},
            {"optionTxt": "By passing data from parent to child components via props."},
            {"optionTxt": "By using observables for reactive updates."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "23.",
        "questionText": "What is the main advantage of using Vue.js over other front-end frameworks?",
        "options": [
            {"optionTxt": "Its simplicity and ease of learning."},
            {"optionTxt": "Its extensive built-in library of UI components."},
            {"optionTxt": "Its performance optimization techniques."},
            {"optionTxt": "Its strong integration with server-side rendering frameworks."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "24.",
        "questionText": "What are Angular components composed of?",
        "options": [
            {"optionTxt": "Templates, styles, and services."},
            {"optionTxt": "Directives, pipes, and modules."},
            {"optionTxt": "HTML, CSS, and JavaScript."},
            {"optionTxt": "Observables, subscriptions, and operators."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "25.",
        "questionText": "How does Vue.js handle conditional rendering?",
        "options": [
            {"optionTxt": "Using v-if and v-else directives."},
            {"optionTxt": "Using ng-if and ng-show directives."},
            {"optionTxt": "By directly manipulating the DOM with JavaScript."},
            {"optionTxt": "By using Reactivity to dynamically update the DOM."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "26.",
        "questionText": "What is the main difference between React and Angular in terms of their rendering approach?",
        "options": [
            {"optionTxt": "React uses virtual DOM for efficient re-rendering, while Angular uses real DOM manipulation."},
            {"optionTxt": "Angular uses virtual DOM for efficient re-rendering, while React uses real DOM manipulation."},
            {"optionTxt": "Both React and Angular use virtual DOM for rendering."},
            {"optionTxt": "Both React and Angular use real DOM manipulation for rendering."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "27.",
        "questionText": "What does the term 'Single Page Application (SPA)' refer to?",
        "options": [
            {"optionTxt": "An application that only has one HTML page."},
            {"optionTxt": "An application that loads its content dynamically without refreshing the entire page."},
            {"optionTxt": "An application that uses a single JavaScript file for all its functionality."},
            {"optionTxt": "An application that runs entirely on the client-side without any server-side processing."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "28.",
        "questionText": "What is the purpose of Angular CLI?",
        "options": [
            {"optionTxt": "To manage database migrations in Angular applications."},
            {"optionTxt": "To provide a command-line interface for generating and managing Angular projects."},
            {"optionTxt": "To handle routing and navigation in Angular applications."},
            {"optionTxt": "To optimize search engine optimization (SEO) for Angular applications."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "29.",
        "questionText": "What is the main advantage of using JSX in React?",
        "options": [
            {"optionTxt": "It provides a simpler syntax for creating HTML templates."},
            {"optionTxt": "It allows JavaScript and HTML to be mixed together, making component logic easier to understand."},
            {"optionTxt": "It improves the performance of React applications by optimizing the virtual DOM."},
            {"optionTxt": "It ensures compatibility with older browsers that do not support modern JavaScript syntax."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "30.",
        "questionText": "What are the key features of Angular's RxJS library?",
        "options": [
            {"optionTxt": "Reactivity, observables, and subscriptions."},
            {"optionTxt": "Dependency injection, decorators, and services."},
            {"optionTxt": "Directives, pipes, and components."},
            {"optionTxt": "Modules, routing, and forms."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      }
        ]
      },
      {
        "topic": "Testing and Debugging",
        "questions": [
          {
            "questionNo": "1.",
            "questionText": "What is the purpose of unit testing in JavaScript?",
            "options": [
                {"optionTxt": "To test the entire application as a whole."},
                {"optionTxt": "To test individual units or components of code in isolation."},
                {"optionTxt": "To debug runtime errors in the browser console."},
                {"optionTxt": "To profile the performance of JavaScript functions."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
            "questionNo": "2.",
            "questionText": "Which testing framework is commonly used for writing unit tests in JavaScript applications?",
            "options": [
                {"optionTxt": "Jest"},
                {"optionTxt": "Mocha"},
                {"optionTxt": "Jasmine"},
                {"optionTxt": "Karma"}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "3.",
            "questionText": "What is the purpose of a code coverage tool in JavaScript?",
            "options": [
                {"optionTxt": "To analyze and optimize the performance of JavaScript code."},
                {"optionTxt": "To monitor network requests and API responses in real-time."},
                {"optionTxt": "To measure the percentage of code that is executed by unit tests."},
                {"optionTxt": "To automate the deployment process of JavaScript applications."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "C"}
        },
        {
            "questionNo": "4.",
            "questionText": "What is the purpose of integration testing in JavaScript?",
            "options": [
                {"optionTxt": "To test the interaction between different components or modules of the application."},
                {"optionTxt": "To identify and fix syntax errors in JavaScript code."},
                {"optionTxt": "To analyze the performance of database queries in the application."},
                {"optionTxt": "To monitor user interactions and behavior on the website."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "A"}
        },
        {
            "questionNo": "5.",
            "questionText": "What is a common technique for debugging JavaScript code in the browser?",
            "options": [
                {"optionTxt": "Using console.log() statements to output variable values and messages."},
                {"optionTxt": "Using breakpoints to pause code execution and inspect variables."},
                {"optionTxt": "Using try-catch blocks to catch and handle runtime errors."},
                {"optionTxt": "Using code linters to enforce coding standards and identify potential issues."}
            ],
            "answer": {"text": "Answer: Option", "Letter": "B"}
        },
        {
          "questionNo": "6.",
          "questionText": "What is the purpose of a mocking library in JavaScript unit testing?",
          "options": [
              {"optionTxt": "To create fake versions of external dependencies to isolate the unit under test."},
              {"optionTxt": "To generate random test data for input parameters."},
              {"optionTxt": "To simulate user interactions and behavior on the website."},
              {"optionTxt": "To profile the performance of JavaScript functions."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
          "questionNo": "7.",
          "questionText": "Which tool is commonly used for end-to-end (E2E) testing of JavaScript applications?",
          "options": [
              {"optionTxt": "Selenium"},
              {"optionTxt": "Jest"},
              {"optionTxt": "Mocha"},
              {"optionTxt": "Cypress"}
          ],
          "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
          "questionNo": "8.",
          "questionText": "What is a syntax linter in JavaScript development?",
          "options": [
              {"optionTxt": "A tool for measuring the percentage of code that is executed by unit tests."},
              {"optionTxt": "A tool for identifying and fixing syntax errors and coding style violations."},
              {"optionTxt": "A tool for automating the deployment process of JavaScript applications."},
              {"optionTxt": "A tool for profiling the performance of JavaScript functions."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
          "questionNo": "9.",
          "questionText": "What is the purpose of using assertions in JavaScript unit testing?",
          "options": [
              {"optionTxt": "To simulate user interactions and behavior on the website."},
              {"optionTxt": "To measure the performance of JavaScript functions."},
              {"optionTxt": "To define the expected behavior of code and validate its correctness."},
              {"optionTxt": "To generate random test data for input parameters."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
          "questionNo": "10.",
          "questionText": "What is the main advantage of using a testing framework like Jest or Mocha?",
          "options": [
              {"optionTxt": "It provides a simple and intuitive syntax for writing tests."},
              {"optionTxt": "It automates the deployment process of JavaScript applications."},
              {"optionTxt": "It optimizes the performance of JavaScript code."},
              {"optionTxt": "It enables real-time monitoring of network requests and API responses."}
          ],
          "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "11.",
        "questionText": "What is the purpose of test runners in JavaScript testing?",
        "options": [
            {"optionTxt": "To execute individual test cases and report the results."},
            {"optionTxt": "To generate random test data for input parameters."},
            {"optionTxt": "To simulate user interactions and behavior on the website."},
            {"optionTxt": "To measure the performance of JavaScript functions."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "12.",
        "questionText": "What is the role of continuous integration (CI) in JavaScript development?",
        "options": [
            {"optionTxt": "To analyze and optimize the performance of JavaScript code."},
            {"optionTxt": "To automatically deploy JavaScript applications to production servers."},
            {"optionTxt": "To integrate code changes from multiple developers into a shared repository regularly."},
            {"optionTxt": "To simulate user interactions and behavior on the website."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "13.",
        "questionText": "What is the purpose of debugging tools like Chrome DevTools in JavaScript development?",
        "options": [
            {"optionTxt": "To analyze and optimize the performance of JavaScript code."},
            {"optionTxt": "To identify and fix syntax errors and runtime bugs."},
            {"optionTxt": "To automate the deployment process of JavaScript applications."},
            {"optionTxt": "To simulate user interactions and behavior on the website."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "B"}
      },
      {
        "questionNo": "14.",
        "questionText": "What is the difference between unit testing and integration testing in JavaScript?",
        "options": [
            {"optionTxt": "Unit testing focuses on testing individual units or components in isolation, while integration testing focuses on testing the interaction between different components."},
            {"optionTxt": "Unit testing is performed manually by developers, while integration testing is automated using testing frameworks."},
            {"optionTxt": "Unit testing is used for testing UI components, while integration testing is used for testing server-side logic."},
            {"optionTxt": "Unit testing is only applicable to front-end code, while integration testing is only applicable to back-end code."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "A"}
      },
      {
        "questionNo": "15.",
        "questionText": "What is the purpose of snapshot testing in JavaScript?",
        "options": [
            {"optionTxt": "To measure the performance of JavaScript functions."},
            {"optionTxt": "To simulate user interactions and behavior on the website."},
            {"optionTxt": "To automatically generate and compare snapshots of UI components."},
            {"optionTxt": "To validate the correctness of database queries in the application."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "16.",
        "questionText": "What is the purpose of code coverage analysis in JavaScript testing?",
        "options": [
            {"optionTxt": "To measure the performance of JavaScript functions."},
            {"optionTxt": "To automatically generate and compare snapshots of UI components."},
            {"optionTxt": "To identify areas of code that are not covered by unit tests."},
            {"optionTxt": "To validate the correctness of database queries in the application."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "17.",
        "questionText": "What is the role of a debugger statement in JavaScript?",
        "options": [
            {"optionTxt": "To analyze and optimize the performance of JavaScript code."},
            {"optionTxt": "To simulate user interactions and behavior on the website."},
            {"optionTxt": "To automatically generate and compare snapshots of UI components."},
            {"optionTxt": "To pause code execution and allow developers to inspect variables and step through code."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "18.",
        "questionText": "What is the purpose of using headless browsers for testing in JavaScript?",
        "options": [
            {"optionTxt": "To automate the deployment process of JavaScript applications."},
            {"optionTxt": "To simulate user interactions and behavior on the website."},
            {"optionTxt": "To optimize the performance of JavaScript code."},
            {"optionTxt": "To run tests in a browser environment without a graphical user interface."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "D"}
      },
      {
        "questionNo": "19.",
        "questionText": "What is the primary benefit of using automated testing in JavaScript development?",
        "options": [
            {"optionTxt": "To measure the performance of JavaScript functions."},
            {"optionTxt": "To simulate user interactions and behavior on the website."},
            {"optionTxt": "To increase code reliability and reduce manual testing efforts."},
            {"optionTxt": "To validate the correctness of database queries in the application."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      },
      {
        "questionNo": "20.",
        "questionText": "What is the purpose of regression testing in JavaScript?",
        "options": [
            {"optionTxt": "To measure the performance of JavaScript functions."},
            {"optionTxt": "To simulate user interactions and behavior on the website."},
            {"optionTxt": "To ensure that recent code changes have not adversely affected existing functionality."},
            {"optionTxt": "To validate the correctness of database queries in the application."}
        ],
        "answer": {"text": "Answer: Option", "Letter": "C"}
      }
        ]
      }
    ]
  }
]
